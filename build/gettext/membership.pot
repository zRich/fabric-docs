# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, hyperledger
# This file is distributed under the same license as the hyperledger-fabricdocs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: hyperledger-fabricdocs master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-09 08:55+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/membership/membership.md:1
msgid "Membership"
msgstr ""

#: ../../source/membership/membership.md:3
msgid "If you've read through the documentation on identity you've seen how a PKI can provide verifiable identities through a chain of trust. Now let's see how these identities can be used to represent the trusted members of a blockchain network."
msgstr ""

#: ../../source/membership/membership.md:8
msgid "This is where a Membership Service Provider (MSP) comes into play --- it identifies which Root CAs and Intermediate CAs are trusted to define the members of a trust domain, e.g., an organization, either by listing the identities of their members, or by identifying which CAs are authorized to issue valid identities for their members, or --- as will usually be the case --- through a combination of both."
msgstr ""

#: ../../source/membership/membership.md:15
msgid "The power of an MSP goes beyond simply listing who is a network participant or member of a channel. An MSP can identify specific roles an actor might play either within the scope of the organization the MSP represents (e.g., admins, or as members of a sub-organization group), and sets the basis for defining access privileges in the context of a network and channel (e.g., channel admins, readers, writers)."
msgstr ""

#: ../../source/membership/membership.md:21
msgid "The configuration of an MSP is advertised to all the channels where members of the corresponding organization participate (in the form of a channel MSP). In addition to the channel MSP, peers, orderers, and clients also maintain a local MSP to authenticate member messages outside the context of a channel and to define the permissions over a particular component (who has the ability to install chaincode on a peer, for example)."
msgstr ""

#: ../../source/membership/membership.md:28
msgid "In addition, an MSP can allow for the identification of a list of identities that have been revoked --- as discussed in the Identity documentation --- but we will talk about how that process also extends to an MSP."
msgstr ""

#: ../../source/membership/membership.md:32
msgid "We'll talk more about local and channel MSPs in a moment. For now let's see what MSPs do in general."
msgstr ""

#: ../../source/membership/membership.md:35
msgid "Mapping MSPs to Organizations"
msgstr ""

#: ../../source/membership/membership.md:37
msgid "An organization is a managed group of members. This can be something as big as a multinational corporation or a small as a flower shop. What's most important about organizations (or orgs) is that they manage their members under a single MSP. Note that this is different from the organization concept defined in an X.509 certificate, which we'll talk about later."
msgstr ""

#: ../../source/membership/membership.md:43
msgid "The exclusive relationship between an organization and its MSP makes it sensible to name the MSP after the organization, a convention you'll find adopted in most policy configurations. For example, organization ORG1 would likely have an MSP called something like ORG1-MSP. In some cases an organization may require multiple membership groups --- for example, where channels are used to perform very different business functions between organizations. In these cases it makes sense to have multiple MSPs and name them accordingly, e.g., ORG2-MSP-NATIONAL and ORG2-MSP-GOVERNMENT, reflecting the different membership roots of trust within ORG2 in the NATIONAL sales channel compared to the GOVERNMENT regulatory channel."
msgstr ""

#: ../../source/membership/membership.md:54
msgid "MSP1"
msgstr ""

#: ../../source/membership/membership.md:56
msgid "Two different MSP configurations for an organization. The first configuration shows the typical relationship between an MSP and an organization --- a single MSP defines the list of members of an organization. In the second configuration, different MSPs are used to represent different organizational groups with national, international, and governmental affiliation."
msgstr ""

#: ../../source/membership/membership.md:62
msgid "Organizational Units and MSPs"
msgstr ""

#: ../../source/membership/membership.md:64
msgid "An organization is often divided up into multiple organizational units (OUs), each of which has a certain set of responsibilities. For example, the ORG1 organization might have both ORG1-MANUFACTURING and ORG1-DISTRIBUTION OUs to reflect these separate lines of business. When a CA issues X.509 certificates, the OU field in the certificate specifies the line of business to which the identity belongs."
msgstr ""

#: ../../source/membership/membership.md:71
msgid "We'll see later how OUs can be helpful to control the parts of an organization who are considered to be the members of a blockchain network. For example, only identities from the ORG1-MANUFACTURING OU might be able to access a channel, whereas ORG1-DISTRIBUTION cannot."
msgstr ""

#: ../../source/membership/membership.md:76
msgid "Finally, though this is a slight misuse of OUs, they can sometimes be used by different organizations in a consortium to distinguish each other. In such cases, the different organizations use the same Root CAs and Intermediate CAs for their chain of trust, but assign the OU field to identify members of each organization. We'll also see how to configure MSPs to achieve this later."
msgstr ""

#: ../../source/membership/membership.md:82
msgid "Local and Channel MSPs"
msgstr ""

#: ../../source/membership/membership.md:84
msgid "MSPs appear in two places in a blockchain network: channel configuration (channel MSPs), and locally on an actor's premise (local MSP). Local MSPs are defined for clients (users) and for nodes (peers and orderers). Node local MSPs define the permissions for that node (who the peer admins are, for example). The local MSPs of the users allow the user side to authenticate itself in its transactions as a member of a channel (e.g. in chaincode transactions), or as the owner of a specific role into the system (an org admin, for example, in configuration transactions)."
msgstr ""

#: ../../source/membership/membership.md:92
msgid "Every node and user must have a local MSP defined, as it defines who has administrative or participatory rights at that level (peer admins will not necessarily be channel admins, and vice versa)."
msgstr ""

#: ../../source/membership/membership.md:96
msgid "In contrast, channel MSPs define administrative and participatory rights at the channel level. Every organization participating in a channel must have an MSP defined for it. Peers and orderers on a channel will all share the same view of channel MSPs, and will therefore be able to correctly authenticate the channel participants. This means that if an organization wishes to join the channel, an MSP incorporating the chain of trust for the organization's members would need to be included in the channel configuration. Otherwise transactions originating from this organization's identities will be rejected."
msgstr ""

#: ../../source/membership/membership.md:105
msgid "The key difference here between local and channel MSPs is not how they function --- both turn identities into roles --- but their scope."
msgstr ""

#: ../../source/membership/membership.md:108
msgid "<a name=\"msp2img\"></a>"
msgstr ""

#: ../../source/membership/membership.md:110
msgid "MSP2"
msgstr ""

#: ../../source/membership/membership.md:112
msgid "Local and channel MSPs. The trust domain (e.g., the organization) of each peer is defined by the peer's local MSP, e.g., ORG1 or ORG2. Representation of an organization on a channel is achieved by adding the organization's MSP to the channel configuration. For example, the channel of this figure is managed by both ORG1 and ORG2. Similar principles apply for the network, orderers, and users, but these are not shown here for simplicity."
msgstr ""

#: ../../source/membership/membership.md:119
msgid "You may find it helpful to see how local and channel MSPs are used by seeing what happens when a blockchain administrator installs and instantiates a smart contract, as shown in the diagram above."
msgstr ""

#: ../../source/membership/membership.md:123
msgid "An administrator B connects to the peer with an identity issued by RCA1 and stored in their local MSP. When B tries to install a smart contract on the peer, the peer checks its local MSP, ORG1-MSP, to verify that the identity of B is indeed a member of ORG1. A successful verification will allow the install command to complete successfully. Subsequently, B wishes to instantiate the smart contract on the channel. Because this is a channel operation, all organizations on the channel must agree to it. Therefore, the peer must check the MSPs of the channel before it can successfully commit this command. (Other things must happen too, but concentrate on the above for now.)"
msgstr ""

#: ../../source/membership/membership.md:133
msgid "Local MSPs are only defined on the file system of the node or user to which they apply. Therefore, physically and logically there is only one local MSP per node or user. However, as channel MSPs are available to all nodes in the channel, they are logically defined once in the channel configuration. However, a channel MSP is also instantiated on the file system of every node in the channel and kept synchronized via consensus. So while there is a copy of each channel MSP on the local file system of every node, logically a channel MSP resides on and is maintained by the channel or the network."
msgstr ""

#: ../../source/membership/membership.md:142
msgid "MSP Levels"
msgstr ""

#: ../../source/membership/membership.md:144
msgid "The split between channel and local MSPs reflects the needs of organizations to administer their local resources, such as a peer or orderer nodes, and their channel resources, such as ledgers, smart contracts, and consortia, which operate at the channel or network level. It's helpful to think of these MSPs as being at different levels, with MSPs at a higher level relating to network administration concerns while MSPs at a lower level handle identity for the administration of private resources. MSPs are mandatory at every level of administration --- they must be defined for the network, channel, peer, orderer, and users."
msgstr ""

#: ../../source/membership/membership.md:154
msgid "MSP3"
msgstr ""

#: ../../source/membership/membership.md:156
msgid "MSP Levels. The MSPs for the peer and orderer are local, whereas the MSPs for a channel (including the network configuration channel) are shared across all participants of that channel. In this figure, the network configuration channel is administered by ORG1, but another application channel can be managed by ORG1 and ORG2. The peer is a member of and managed by ORG2, whereas ORG1 manages the orderer of the figure. ORG1 trusts identities from RCA1, whereas ORG2 trusts identities from RCA2. Note that these are administration identities, reflecting who can administer these components. So while ORG1 administers the network, ORG2.MSP does exist in the network definition."
msgstr ""

#: ../../source/membership/membership.md:192
msgid "MSP Structure"
msgstr ""

#: ../../source/membership/membership.md:194
msgid "So far, you've seen that the most important element of an MSP are the specification of the root or intermediate CAs that are used to establish an actor's or node's membership in the respective organization. There are, however, more elements that are used in conjunction with these two to assist with membership functions."
msgstr ""

#: ../../source/membership/membership.md:199
msgid "MSP4"
msgstr ""

#: ../../source/membership/membership.md:201
msgid "The figure above shows how a local MSP is stored on a local filesystem. Even though channel MSPs are not physically structured in exactly this way, it's still a helpful way to think about them."
msgstr ""

#: ../../source/membership/membership.md:205
msgid "As you can see, there are nine elements to an MSP. It's easiest to think of these elements in a directory structure, where the MSP name is the root folder name with each subfolder representing different elements of an MSP configuration."
msgstr ""

#: ../../source/membership/membership.md:209
msgid "Let's describe these folders in a little more detail and see why they are important."
msgstr ""

#: ../../source/membership/membership.md:335
msgid "If you've read this doc as well as our doc on Identity), you should have a pretty good grasp of how identities and membership work in Hyperledger Fabric. You've seen how a PKI and MSPs are used to identify the actors collaborating in a blockchain network. You've learned how certificates, public/private keys, and roots of trust work, in addition to how MSPs are physically and logically structured."
msgstr ""

