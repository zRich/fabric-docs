# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, hyperledger
# This file is distributed under the same license as the hyperledger-fabricdocs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: hyperledger-fabricdocs master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-01 12:09+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/chaincode4ade.rst:2
msgid "Chaincode for Developers"
msgstr ""

#: ../../source/chaincode4ade.rst:5
msgid "What is Chaincode?"
msgstr ""

#: ../../source/chaincode4ade.rst:7
msgid "Chaincode is a program, written in `Go <https://golang.org>`_, `node.js <https://nodejs.org>`_, or `Java <https://java.com/en/>`_ that implements a prescribed interface. Chaincode runs in a secured Docker container isolated from the endorsing peer process. Chaincode initializes and manages the ledger state through transactions submitted by applications."
msgstr ""

#: ../../source/chaincode4ade.rst:13
msgid "A chaincode typically handles business logic agreed to by members of the network, so it similar to a \"smart contract\". A chaincode can be invoked to update or query the ledger in a proposal transaction. Given the appropriate permission, a chaincode may invoke another chaincode, either in the same channel or in different channels, to access its state. Note that, if the called chaincode is on a different channel from the calling chaincode, only read query is allowed. That is, the called chaincode on a different channel is only a ``Query``, which does not participate in state validation checks in subsequent commit phase."
msgstr ""

#: ../../source/chaincode4ade.rst:21
msgid "In the following sections, we will explore chaincode through the eyes of an application developer. We'll present a simple chaincode sample application and walk through the purpose of each method in the Chaincode Shim API."
msgstr ""

#: ../../source/chaincode4ade.rst:26
msgid "Chaincode API"
msgstr ""

#: ../../source/chaincode4ade.rst:28
msgid "Every chaincode program must implement the ``Chaincode`` interface whose methods are called in response to received transactions. You can find the reference documentation of the Chaincode Shim API for different languages below:"
msgstr ""

#: ../../source/chaincode4ade.rst:32
msgid "`Go <https://godoc.org/github.com/hyperledger/fabric/core/chaincode/shim#Chaincode>`__"
msgstr ""

#: ../../source/chaincode4ade.rst:33
msgid "`node.js <https://fabric-shim.github.io/ChaincodeInterface.html>`__"
msgstr ""

#: ../../source/chaincode4ade.rst:34
msgid "`Java <https://fabric-chaincode-java.github.io/org/hyperledger/fabric/shim/Chaincode.html>`_"
msgstr ""

#: ../../source/chaincode4ade.rst:36
msgid "In each language, the ``Invoke`` method is called by clients to submit transaction proposals. This method allows you to use the chaincode to read and write data on the channel ledger."
msgstr ""

#: ../../source/chaincode4ade.rst:40
msgid "You also need to include an ``Init`` method that will serve as the initialization function for your chaincode. This method will be called in order to initialize the chaincode when it is started or upgraded. By default, this function is never executed. However, you can use the chaincode definition to request that the ``Init`` function be executed. If execution of ``Init`` is requested, fabric will ensure that ``Init`` is invoked before any other function and is only invoked once. This option provides you additional control over which users can initialize the chaincode and the ability to add initial data to the ledger. If you are using the peer CLI to approve the chaincode definition, use the ``--init-required`` flag to request the execution of the ``Init`` function. Then call the ``Init`` function by using the `peer chaincode invoke` command and passing the ``--isInit`` flag. If you are using the Fabric SDK for Node.js, visit `How to install and start your chaincode <https://fabric-sdk-node.github.io/master/tutorial-chaincode-lifecycle.html>`__. For more information, see :doc:`chaincode4noah`."
msgstr ""

#: ../../source/chaincode4ade.rst:54
msgid "The other interface in the chaincode \"shim\" APIs is the ``ChaincodeStubInterface``:"
msgstr ""

#: ../../source/chaincode4ade.rst:56
msgid "`Go <https://godoc.org/github.com/hyperledger/fabric/core/chaincode/shim#ChaincodeStubInterface>`__"
msgstr ""

#: ../../source/chaincode4ade.rst:57
msgid "`node.js <https://fabric-shim.github.io/ChaincodeStub.html>`__"
msgstr ""

#: ../../source/chaincode4ade.rst:58
msgid "`Java <https://fabric-chaincode-java.github.io/org/hyperledger/fabric/shim/ChaincodeStub.html>`_"
msgstr ""

#: ../../source/chaincode4ade.rst:60
msgid "which is used to access and modify the ledger, and to make invocations between chaincodes."
msgstr ""

#: ../../source/chaincode4ade.rst:63
msgid "In this tutorial using Go chaincode, we will demonstrate the use of these APIs by implementing a simple chaincode application that manages simple \"assets\"."
msgstr ""

#: ../../source/chaincode4ade.rst:69
msgid "Simple Asset Chaincode"
msgstr ""

#: ../../source/chaincode4ade.rst:70
msgid "Our application is a basic sample chaincode to create assets (key-value pairs) on the ledger."
msgstr ""

#: ../../source/chaincode4ade.rst:74
msgid "Choosing a Location for the Code"
msgstr ""

#: ../../source/chaincode4ade.rst:76
msgid "If you haven't been doing programming in Go, you may want to make sure that you have :ref:`Golang` installed and your system properly configured."
msgstr ""

#: ../../source/chaincode4ade.rst:79
msgid "Now, you will want to create a directory for your chaincode application as a child directory of ``$GOPATH/src/``."
msgstr ""

#: ../../source/chaincode4ade.rst:82
msgid "To keep things simple, let's use the following command:"
msgstr ""

#: ../../source/chaincode4ade.rst:88
msgid "Now, let's create the source file that we'll fill in with code:"
msgstr ""

#: ../../source/chaincode4ade.rst:95
msgid "Housekeeping"
msgstr ""

#: ../../source/chaincode4ade.rst:97
msgid "First, let's start with some housekeeping. As with every chaincode, it implements the `Chaincode interface <https://godoc.org/github.com/hyperledger/fabric/core/chaincode/shim#Chaincode>`_ in particular, ``Init`` and ``Invoke`` functions. So, let's add the Go import statements for the necessary dependencies for our chaincode. We'll import the chaincode shim package and the `peer protobuf package <https://godoc.org/github.com/hyperledger/fabric/protos/peer>`_. Next, let's add a struct ``SimpleAsset`` as a receiver for Chaincode shim functions."
msgstr ""

#: ../../source/chaincode4ade.rst:121
msgid "Initializing the Chaincode"
msgstr ""

#: ../../source/chaincode4ade.rst:123
msgid "Next, we'll implement the ``Init`` function."
msgstr ""

#: ../../source/chaincode4ade.rst:132
msgid "Note that chaincode upgrade also calls this function. When writing a chaincode that will upgrade an existing one, make sure to modify the ``Init`` function appropriately. In particular, provide an empty \"Init\" method if there's no \"migration\" or nothing to be initialized as part of the upgrade."
msgstr ""

#: ../../source/chaincode4ade.rst:137
msgid "Next, we'll retrieve the arguments to the ``Init`` call using the `ChaincodeStubInterface.GetStringArgs <https://godoc.org/github.com/hyperledger/fabric/core/chaincode/shim#ChaincodeStub.GetStringArgs>`_ function and check for validity. In our case, we are expecting a key-value pair."
msgstr ""

#: ../../source/chaincode4ade.rst:155
msgid "Next, now that we have established that the call is valid, we'll store the initial state in the ledger. To do this, we will call `ChaincodeStubInterface.PutState <https://godoc.org/github.com/hyperledger/fabric/core/chaincode/shim#ChaincodeStub.PutState>`_ with the key and value passed in as the arguments. Assuming all went well, return a peer.Response object that indicates the initialization was a success."
msgstr ""

#: ../../source/chaincode4ade.rst:185
msgid "Invoking the Chaincode"
msgstr ""

#: ../../source/chaincode4ade.rst:187
msgid "First, let's add the ``Invoke`` function's signature."
msgstr ""

#: ../../source/chaincode4ade.rst:198
msgid "As with the ``Init`` function above, we need to extract the arguments from the ``ChaincodeStubInterface``. The ``Invoke`` function's arguments will be the name of the chaincode application function to invoke. In our case, our application will simply have two functions: ``set`` and ``get``, that allow the value of an asset to be set or its current state to be retrieved. We first call `ChaincodeStubInterface.GetFunctionAndParameters <https://godoc.org/github.com/hyperledger/fabric/core/chaincode/shim#ChaincodeStub.GetFunctionAndParameters>`_ to extract the function name and the parameters to that chaincode application function."
msgstr ""

#: ../../source/chaincode4ade.rst:218
msgid "Next, we'll validate the function name as being either ``set`` or ``get``, and invoke those chaincode application functions, returning an appropriate response via the ``shim.Success`` or ``shim.Error`` functions that will serialize the response into a gRPC protobuf message."
msgstr ""

#: ../../source/chaincode4ade.rst:248
msgid "Implementing the Chaincode Application"
msgstr ""

#: ../../source/chaincode4ade.rst:250
msgid "As noted, our chaincode application implements two functions that can be invoked via the ``Invoke`` function. Let's implement those functions now. Note that as we mentioned above, to access the ledger's state, we will leverage the `ChaincodeStubInterface.PutState <https://godoc.org/github.com/hyperledger/fabric/core/chaincode/shim#ChaincodeStub.PutState>`_ and `ChaincodeStubInterface.GetState <https://godoc.org/github.com/hyperledger/fabric/core/chaincode/shim#ChaincodeStub.GetState>`_ functions of the chaincode shim API."
msgstr ""

#: ../../source/chaincode4ade.rst:292
msgid "Pulling it All Together"
msgstr ""

#: ../../source/chaincode4ade.rst:294
msgid "Finally, we need to add the ``main`` function, which will call the `shim.Start <https://godoc.org/github.com/hyperledger/fabric/core/chaincode/shim#Start>`_ function. Here's the whole chaincode program source."
msgstr ""

#: ../../source/chaincode4ade.rst:393
msgid "Building Chaincode"
msgstr ""

#: ../../source/chaincode4ade.rst:395
msgid "Now let's compile your chaincode."
msgstr ""

#: ../../source/chaincode4ade.rst:402
msgid "Assuming there are no errors, now we can proceed to the next step, testing your chaincode."
msgstr ""

#: ../../source/chaincode4ade.rst:406
msgid "Testing Using dev mode"
msgstr ""

#: ../../source/chaincode4ade.rst:408
msgid "Normally chaincodes are started and maintained by peer. However in “dev mode\", chaincode is built and started by the user. This mode is useful during chaincode development phase for rapid code/build/run/debug cycle turnaround."
msgstr ""

#: ../../source/chaincode4ade.rst:413
msgid "We start \"dev mode\" by leveraging pre-generated orderer and channel artifacts for a sample dev network.  As such, the user can immediately jump into the process of compiling chaincode and driving calls."
msgstr ""

#: ../../source/chaincode4ade.rst:418
msgid "Install Hyperledger Fabric Samples"
msgstr ""

#: ../../source/chaincode4ade.rst:420
msgid "If you haven't already done so, please :doc:`install`."
msgstr ""

#: ../../source/chaincode4ade.rst:422
msgid "Navigate to the ``chaincode-docker-devmode`` directory of the ``fabric-samples`` clone:"
msgstr ""

#: ../../source/chaincode4ade.rst:429
msgid "Now open three terminals and navigate to your ``chaincode-docker-devmode`` directory in each."
msgstr ""

#: ../../source/chaincode4ade.rst:433
msgid "Terminal 1 - Start the network"
msgstr ""

#: ../../source/chaincode4ade.rst:439
msgid "The above starts the network with the ``SingleSampleMSPSolo`` orderer profile and launches the peer in \"dev mode\".  It also launches two additional containers - one for the chaincode environment and a CLI to interact with the chaincode.  The commands for create and join channel are embedded in the CLI container, so we can jump immediately to the chaincode calls."
msgstr ""

#: ../../source/chaincode4ade.rst:446
msgid "Terminal 2 - Build & start the chaincode"
msgstr ""

#: ../../source/chaincode4ade.rst:452
msgid "You should see the following:"
msgstr ""

#: ../../source/chaincode4ade.rst:458
msgid "Now, compile your chaincode:"
msgstr ""

#: ../../source/chaincode4ade.rst:465
msgid "Now run the chaincode:"
msgstr ""

#: ../../source/chaincode4ade.rst:471
msgid "The chaincode is started with peer and chaincode logs indicating successful registration with the peer. Note that at this stage the chaincode is not associated with any channel. This is done in subsequent steps using the ``instantiate`` command."
msgstr ""

#: ../../source/chaincode4ade.rst:476
msgid "Terminal 3 - Use the chaincode"
msgstr ""

#: ../../source/chaincode4ade.rst:478
msgid "Even though you are in ``--peer-chaincodedev`` mode, you still have to install the chaincode so the life-cycle system chaincode can go through its checks normally. This requirement may be removed in future when in ``--peer-chaincodedev`` mode."
msgstr ""

#: ../../source/chaincode4ade.rst:482
msgid "We'll leverage the CLI container to drive these calls."
msgstr ""

#: ../../source/chaincode4ade.rst:493
msgid "Now issue an invoke to change the value of \"a\" to \"20\"."
msgstr ""

#: ../../source/chaincode4ade.rst:499
msgid "Finally, query ``a``.  We should see a value of ``20``."
msgstr ""

#: ../../source/chaincode4ade.rst:506
msgid "Testing new chaincode"
msgstr ""

#: ../../source/chaincode4ade.rst:508
msgid "By default, we mount only ``sacc``.  However, you can easily test different chaincodes by adding them to the ``chaincode`` subdirectory and relaunching your network.  At this point they will be accessible in your ``chaincode`` container."
msgstr ""

#: ../../source/chaincode4ade.rst:513
msgid "Chaincode access control"
msgstr ""

#: ../../source/chaincode4ade.rst:515
msgid "Chaincode can utilize the client (submitter) certificate for access control decisions by calling the GetCreator() function. Additionally the Go shim provides extension APIs that extract client identity from the submitter's certificate that can be used for access control decisions, whether that is based on client identity itself, or the org identity, or on a client identity attribute."
msgstr ""

#: ../../source/chaincode4ade.rst:522
msgid "For example an asset that is represented as a key/value may include the client's identity as part of the value (for example as a JSON attribute indicating that asset owner), and only this client may be authorized to make updates to the key/value in the future. The client identity library extension APIs can be used within chaincode to retrieve this submitter information to make such access control decisions."
msgstr ""

#: ../../source/chaincode4ade.rst:529
msgid "See the `client identity (CID) library documentation <https://github.com/hyperledger/fabric/blob/master/core/chaincode/shim/ext/cid/README.md>`_ for more details."
msgstr ""

#: ../../source/chaincode4ade.rst:532
msgid "To add the client identity shim extension to your chaincode as a dependency, see :ref:`vendoring`."
msgstr ""

#: ../../source/chaincode4ade.rst:535
msgid "Chaincode encryption"
msgstr ""

#: ../../source/chaincode4ade.rst:537
msgid "In certain scenarios, it may be useful to encrypt values associated with a key in their entirety or simply in part.  For example, if a person's social security number or address was being written to the ledger, then you likely would not want this data to appear in plaintext.  Chaincode encryption is achieved by leveraging the `entities extension <https://github.com/hyperledger/fabric/tree/master/core/chaincode/shim/ext/entities>`__ which is a BCCSP wrapper with commodity factories and functions to perform cryptographic operations such as encryption and elliptic curve digital signatures.  For example, to encrypt, the invoker of a chaincode passes in a cryptographic key via the transient field.  The same key may then be used for subsequent query operations, allowing for proper decryption of the encrypted state values."
msgstr ""

#: ../../source/chaincode4ade.rst:548
msgid "For more information and samples, see the `Encc Example <https://github.com/hyperledger/fabric/tree/master/examples/chaincode/go/enccc_example>`__ within the ``fabric/examples`` directory.  Pay specific attention to the ``utils.go`` helper program.  This utility loads the chaincode shim APIs and Entities extension and builds a new class of functions (e.g. ``encryptAndPutState`` & ``getStateAndDecrypt``) that the sample encryption chaincode then leverages.  As such, the chaincode can now marry the basic shim APIs of ``Get`` and ``Put`` with the added functionality of ``Encrypt`` and ``Decrypt``."
msgstr ""

#: ../../source/chaincode4ade.rst:557
msgid "To add the encryption entities extension to your chaincode as a dependency, see :ref:`vendoring`."
msgstr ""

#: ../../source/chaincode4ade.rst:562
msgid "Managing external dependencies for chaincode written in Go"
msgstr ""

#: ../../source/chaincode4ade.rst:563
msgid "If your chaincode requires packages not provided by the Go standard library, you will need to include those packages with your chaincode. It is also a good practice to add the shim and any extension libraries to your chaincode as a dependency."
msgstr ""

#: ../../source/chaincode4ade.rst:568
msgid "There are `many tools available <https://github.com/golang/go/wiki/PackageManagementTools>`__ for managing (or \"vendoring\") these dependencies.  The following demonstrates how to use ``govendor``:"
msgstr ""

#: ../../source/chaincode4ade.rst:578
msgid "This imports the external dependencies into a local ``vendor`` directory. If you are vendoring the Fabric shim or shim extensions, clone the Fabric repository to your $GOPATH/src/github.com/hyperledger directory, before executing the govendor commands."
msgstr ""

#: ../../source/chaincode4ade.rst:583
msgid "Once dependencies are vendored in your chaincode directory, ``peer chaincode package`` and ``peer chaincode install`` operations will then include code associated with the dependencies into the chaincode package."
msgstr ""

