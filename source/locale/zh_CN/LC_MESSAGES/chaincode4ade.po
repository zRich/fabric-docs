# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, hyperledger
# This file is distributed under the same license as the hyperledger-fabricdocs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# 王伟兵 <wbwang@inspur.com>, 2019
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: hyperledger-fabricdocs master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-01 12:09+0800\n"
"PO-Revision-Date: 2019-04-22 19:53+0000\n"
"Last-Translator: 王伟兵 <wbwang@inspur.com>, 2019\n"
"Language-Team: Chinese (China) (https://www.transifex.com/hyperledger/teams/97220/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../source/chaincode4ade.rst:2
msgid "Chaincode for Developers"
msgstr "链码开发者"

#: ../../source/chaincode4ade.rst:5
msgid "What is Chaincode?"
msgstr "什么是链码？"

#: ../../source/chaincode4ade.rst:7
msgid ""
"Chaincode is a program, written in `Go <https://golang.org>`_, `node.js "
"<https://nodejs.org>`_, or `Java <https://java.com/en/>`_ that implements a "
"prescribed interface. Chaincode runs in a secured Docker container isolated "
"from the endorsing peer process. Chaincode initializes and manages the "
"ledger state through transactions submitted by applications."
msgstr ""
"Chaincode是一个程序，用`Go <https://golang.org>`_, `node.js <https://nodejs.org>`_,"
" or `Java "
"<https://java.com/en/>`_编写，实现指定的接口。链码运行在安全的Docker容器中，该容器与背书节点进程隔离。链码通过应用提交的交易初始化和管理账本状态。"

#: ../../source/chaincode4ade.rst:13
msgid ""
"A chaincode typically handles business logic agreed to by members of the "
"network, so it similar to a \"smart contract\". A chaincode can be invoked "
"to update or query the ledger in a proposal transaction. Given the "
"appropriate permission, a chaincode may invoke another chaincode, either in "
"the same channel or in different channels, to access its state. Note that, "
"if the called chaincode is on a different channel from the calling "
"chaincode, only read query is allowed. That is, the called chaincode on a "
"different channel is only a ``Query``, which does not participate in state "
"validation checks in subsequent commit phase."
msgstr ""
"链码通常处理网络成员同意的业务逻辑，因此它类似于“智能合约”。在一个提议交易中，可以调用链码来更新或查询账本。给予适当的权限，一个链码可以调用另一个链码(在相同通道中或在不同通道中)来访问其状态。注意，如果被调用的链码位于与调用链码不同的通道上，则只允许读查询。也就是说，在不同通道上被调用的链码只是一个“查询”，它不参与后续提交阶段的状态验证检查。"

#: ../../source/chaincode4ade.rst:21
msgid ""
"In the following sections, we will explore chaincode through the eyes of an "
"application developer. We'll present a simple chaincode sample application "
"and walk through the purpose of each method in the Chaincode Shim API."
msgstr ""
"在下面的部分中，我们将通过应用开发者的视角来研究链码。我们将展示一个简单的链码示例应用程序，并介绍Chaincode Shim API中每个方法的用途。"

#: ../../source/chaincode4ade.rst:26
msgid "Chaincode API"
msgstr "链码API"

#: ../../source/chaincode4ade.rst:28
msgid ""
"Every chaincode program must implement the ``Chaincode`` interface whose "
"methods are called in response to received transactions. You can find the "
"reference documentation of the Chaincode Shim API for different languages "
"below:"
msgstr ""
"每个链码程序都必须实现``Chaincode`` 接口，该接口的方法是在收到交易的响应中被调用的。你可以在下面找到适用于不同语言的Chaincode "
"Shim API的参考文档:"

#: ../../source/chaincode4ade.rst:32
msgid ""
"`Go "
"<https://godoc.org/github.com/hyperledger/fabric/core/chaincode/shim#Chaincode>`__"
msgstr ""
"`Go "
"<https://godoc.org/github.com/hyperledger/fabric/core/chaincode/shim#Chaincode>`__"

#: ../../source/chaincode4ade.rst:33
msgid "`node.js <https://fabric-shim.github.io/ChaincodeInterface.html>`__"
msgstr "`node.js <https://fabric-shim.github.io/ChaincodeInterface.html>`__"

#: ../../source/chaincode4ade.rst:34
msgid ""
"`Java <https://fabric-chaincode-"
"java.github.io/org/hyperledger/fabric/shim/Chaincode.html>`_"
msgstr ""
"`Java <https://fabric-chaincode-"
"java.github.io/org/hyperledger/fabric/shim/Chaincode.html>`_"

#: ../../source/chaincode4ade.rst:36
msgid ""
"In each language, the ``Invoke`` method is called by clients to submit "
"transaction proposals. This method allows you to use the chaincode to read "
"and write data on the channel ledger."
msgstr "在每种语言中，客户端调用``Invoke`` 方法来提交交易提议。此方法允许您使用链码读取和写入通道账本上的数据。"

#: ../../source/chaincode4ade.rst:40
msgid ""
"You also need to include an ``Init`` method that will serve as the "
"initialization function for your chaincode. This method will be called in "
"order to initialize the chaincode when it is started or upgraded. By "
"default, this function is never executed. However, you can use the chaincode"
" definition to request that the ``Init`` function be executed. If execution "
"of ``Init`` is requested, fabric will ensure that ``Init`` is invoked before"
" any other function and is only invoked once. This option provides you "
"additional control over which users can initialize the chaincode and the "
"ability to add initial data to the ledger. If you are using the peer CLI to "
"approve the chaincode definition, use the ``--init-required`` flag to "
"request the execution of the ``Init`` function. Then call the ``Init`` "
"function by using the `peer chaincode invoke` command and passing the "
"``--isInit`` flag. If you are using the Fabric SDK for Node.js, visit `How "
"to install and start your chaincode <https://fabric-sdk-"
"node.github.io/master/tutorial-chaincode-lifecycle.html>`__. For more "
"information, see :doc:`chaincode4noah`."
msgstr ""
"您还需要包含一个 ``Init`` "
"方法，它将作为链码的初始化函数。当链码启动或升级时，将调用此方法来初始化链码。默认情况下，这个函数永远不会执行。但是，您可以使用链码定义来请求执行 "
"``Init`` 函数。如果请求执行 ``Init`` ，Fabric将确保在调用任何其他函数之前调用 ``Init`` "
"，并且只调用一次。该选项为您提供了额外的控制，用户可以对其中的链码进行初始化，并能够将初始数据添加到账本。如果您正在使用节点的CLI来批准链码定义，请使用"
"``--init-required`` 标志来请求执行``Init`` 函数。然后使用 `peer chaincode "
"invoke`命令调用``Init`` 函数，并传入 ``--isInit`` 标志。如果您正在为Node.js使用Fabric SDK，请访问 "
"`如何安装和启动您的链码<https://fabric-sdk-node.github.io/master/tutorial-chaincode-"
"lifecycle.html>`__。更多信息，请看 :doc:`chaincode4noah`。"

#: ../../source/chaincode4ade.rst:54
msgid ""
"The other interface in the chaincode \"shim\" APIs is the "
"``ChaincodeStubInterface``:"
msgstr "在链码“shim”API中的另一个接口是“ChaincodeStubInterface”:"

#: ../../source/chaincode4ade.rst:56
msgid ""
"`Go "
"<https://godoc.org/github.com/hyperledger/fabric/core/chaincode/shim#ChaincodeStubInterface>`__"
msgstr ""
"`Go "
"<https://godoc.org/github.com/hyperledger/fabric/core/chaincode/shim#ChaincodeStubInterface>`__"

#: ../../source/chaincode4ade.rst:57
msgid "`node.js <https://fabric-shim.github.io/ChaincodeStub.html>`__"
msgstr "`node.js <https://fabric-shim.github.io/ChaincodeStub.html>`__"

#: ../../source/chaincode4ade.rst:58
msgid ""
"`Java <https://fabric-chaincode-"
"java.github.io/org/hyperledger/fabric/shim/ChaincodeStub.html>`_"
msgstr ""
"`Java <https://fabric-chaincode-"
"java.github.io/org/hyperledger/fabric/shim/ChaincodeStub.html>`_"

#: ../../source/chaincode4ade.rst:60
msgid ""
"which is used to access and modify the ledger, and to make invocations "
"between chaincodes."
msgstr "这些用于存取和修改账本，并在链码之间进行调用。"

#: ../../source/chaincode4ade.rst:63
msgid ""
"In this tutorial using Go chaincode, we will demonstrate the use of these "
"APIs by implementing a simple chaincode application that manages simple "
"\"assets\"."
msgstr "在使用Go链码的本教程中，我们将通过实现一个管理简单“资产”的简单链码应用程序来演示这些API的使用。"

#: ../../source/chaincode4ade.rst:69
msgid "Simple Asset Chaincode"
msgstr "简单资产链码"

#: ../../source/chaincode4ade.rst:70
msgid ""
"Our application is a basic sample chaincode to create assets (key-value "
"pairs) on the ledger."
msgstr "我们的应用程序是一个基本的链码示例，用于在账本上创建资产(键值对)。"

#: ../../source/chaincode4ade.rst:74
msgid "Choosing a Location for the Code"
msgstr "为代码选择一个位置"

#: ../../source/chaincode4ade.rst:76
msgid ""
"If you haven't been doing programming in Go, you may want to make sure that "
"you have :ref:`Golang` installed and your system properly configured."
msgstr "如果您没有用过Go编程，您可能希望确保已经安装了 :ref:`Golang` 并正确配置了系统。"

#: ../../source/chaincode4ade.rst:79
msgid ""
"Now, you will want to create a directory for your chaincode application as a"
" child directory of ``$GOPATH/src/``."
msgstr "现在，您需要为链码应用程序创建一个目录，作为``$GOPATH/src/``的子目录。"

#: ../../source/chaincode4ade.rst:82
msgid "To keep things simple, let's use the following command:"
msgstr "为了简单起见，我们使用以下命令:"

#: ../../source/chaincode4ade.rst:88
msgid "Now, let's create the source file that we'll fill in with code:"
msgstr "现在，让我们创建源文件，我们将用下列代码填充:"

#: ../../source/chaincode4ade.rst:95
msgid "Housekeeping"
msgstr "辅助工作"

#: ../../source/chaincode4ade.rst:97
msgid ""
"First, let's start with some housekeeping. As with every chaincode, it "
"implements the `Chaincode interface "
"<https://godoc.org/github.com/hyperledger/fabric/core/chaincode/shim#Chaincode>`_"
" in particular, ``Init`` and ``Invoke`` functions. So, let's add the Go "
"import statements for the necessary dependencies for our chaincode. We'll "
"import the chaincode shim package and the `peer protobuf package "
"<https://godoc.org/github.com/hyperledger/fabric/protos/peer>`_. Next, let's"
" add a struct ``SimpleAsset`` as a receiver for Chaincode shim functions."
msgstr ""
"首先，让我们从一些辅助工作开始。与每个链码一样，它实现了 `Chaincode interface "
"<https://godoc.org/github.com/hyperledger/fabric/core/chaincode/shim#Chaincode>`_"
"  特别是 ``Init`` 和 ``Invoke`` 函数。因此，让我们添加Go "
"import语句，用于链码的必要依赖项。我们将导入链码shim包和`peer protobuf package "
"<https://godoc.org/github.com/hyperledger/fabric/protos/peer>`_。接下来，让我们添加一个结构"
" ``SimpleAsset`` 作为Chaincode shim函数的接收器。"

#: ../../source/chaincode4ade.rst:121
msgid "Initializing the Chaincode"
msgstr "初始化链码"

#: ../../source/chaincode4ade.rst:123
msgid "Next, we'll implement the ``Init`` function."
msgstr "下面，我们将实现``Init`` 函数。"

#: ../../source/chaincode4ade.rst:132
msgid ""
"Note that chaincode upgrade also calls this function. When writing a "
"chaincode that will upgrade an existing one, make sure to modify the "
"``Init`` function appropriately. In particular, provide an empty \"Init\" "
"method if there's no \"migration\" or nothing to be initialized as part of "
"the upgrade."
msgstr ""
"注意，链码升级也调用这个函数。在编写现有链码升级的链码时，请确保适当地修改``Init`` "
"函数。特别是，如果没有“迁移”或升级过程中没有需要初始化的内容，请提供一个空的“Init”方法。"

#: ../../source/chaincode4ade.rst:137
msgid ""
"Next, we'll retrieve the arguments to the ``Init`` call using the "
"`ChaincodeStubInterface.GetStringArgs "
"<https://godoc.org/github.com/hyperledger/fabric/core/chaincode/shim#ChaincodeStub.GetStringArgs>`_"
" function and check for validity. In our case, we are expecting a key-value "
"pair."
msgstr ""
"接下来，我们将使用函数 `ChaincodeStubInterface.GetStringArgs "
"<https://godoc.org/github.com/hyperledger/fabric/core/chaincode/shim#ChaincodeStub.GetStringArgs>`_"
" 检索参数调用``Init``，并检查有效性。在我们的示例中，我们期望取到一个键值对。"

#: ../../source/chaincode4ade.rst:155
msgid ""
"Next, now that we have established that the call is valid, we'll store the "
"initial state in the ledger. To do this, we will call "
"`ChaincodeStubInterface.PutState "
"<https://godoc.org/github.com/hyperledger/fabric/core/chaincode/shim#ChaincodeStub.PutState>`_"
" with the key and value passed in as the arguments. Assuming all went well, "
"return a peer.Response object that indicates the initialization was a "
"success."
msgstr ""
"接下来，既然我们已经确定调用是有效的，我们将在账本中存储初始状态。为此，我们将以键和值作为参数传入调用`ChaincodeStubInterface.PutState"
" "
"<https://godoc.org/github.com/hyperledger/fabric/core/chaincode/shim#ChaincodeStub.PutState>`_"
" 。PutState ' _。假设一切顺利，返回一个表明初始化成功的peer.Response对象。"

#: ../../source/chaincode4ade.rst:185
msgid "Invoking the Chaincode"
msgstr "调用链码"

#: ../../source/chaincode4ade.rst:187
msgid "First, let's add the ``Invoke`` function's signature."
msgstr "首先，让我们添加``Invoke`` 函数的签名。"

#: ../../source/chaincode4ade.rst:198
msgid ""
"As with the ``Init`` function above, we need to extract the arguments from "
"the ``ChaincodeStubInterface``. The ``Invoke`` function's arguments will be "
"the name of the chaincode application function to invoke. In our case, our "
"application will simply have two functions: ``set`` and ``get``, that allow "
"the value of an asset to be set or its current state to be retrieved. We "
"first call `ChaincodeStubInterface.GetFunctionAndParameters "
"<https://godoc.org/github.com/hyperledger/fabric/core/chaincode/shim#ChaincodeStub.GetFunctionAndParameters>`_"
" to extract the function name and the parameters to that chaincode "
"application function."
msgstr ""
"与上面的``Init`` "
"函数一样，我们需要从``ChaincodeStubInterface``中提取参数。函数的参数将是要调用的链码应用的函数名称。在我们的例子中，应用只有两个函数：``set``和``get``，它们允许设置资产的值或检索资产的当前状态。我们首先调用`ChaincodeStubInterface.GetFunctionAndParameters"
" "
"<https://godoc.org/github.com/hyperledger/fabric/core/chaincode/shim#ChaincodeStub.GetFunctionAndParameters>`_提取函数名和链码应用函数的参数。"

#: ../../source/chaincode4ade.rst:218
msgid ""
"Next, we'll validate the function name as being either ``set`` or ``get``, "
"and invoke those chaincode application functions, returning an appropriate "
"response via the ``shim.Success`` or ``shim.Error`` functions that will "
"serialize the response into a gRPC protobuf message."
msgstr ""
"接下来，我们将验证函数名是否为``set`` 或 "
"``get``，并调用那些链码应用程序函数，通过``shim.Success``或``shim.Error``函数返回适当的响应，该函数将响应序列化为gRPC"
" protobuf消息。"

#: ../../source/chaincode4ade.rst:248
msgid "Implementing the Chaincode Application"
msgstr "实现链码应用程序"

#: ../../source/chaincode4ade.rst:250
msgid ""
"As noted, our chaincode application implements two functions that can be "
"invoked via the ``Invoke`` function. Let's implement those functions now. "
"Note that as we mentioned above, to access the ledger's state, we will "
"leverage the `ChaincodeStubInterface.PutState "
"<https://godoc.org/github.com/hyperledger/fabric/core/chaincode/shim#ChaincodeStub.PutState>`_"
" and `ChaincodeStubInterface.GetState "
"<https://godoc.org/github.com/hyperledger/fabric/core/chaincode/shim#ChaincodeStub.GetState>`_"
" functions of the chaincode shim API."
msgstr ""
"如前所述，我们的链码应用程序实现了两个可以通过``Invoke`` "
"'函数调用的函数。现在我们来实现这些函数。请注意，如前所述，要访问账本的状态，我们将利用链码shim API的 "
"`ChaincodeStubInterface.PutState "
"<https://godoc.org/github.com/hyperledger/fabric/core/chaincode/shim#ChaincodeStub.PutState>`_"
" 和 `ChaincodeStubInterface.GetState "
"<https://godoc.org/github.com/hyperledger/fabric/core/chaincode/shim#ChaincodeStub.GetState>`_"
" 函数。"

#: ../../source/chaincode4ade.rst:292
msgid "Pulling it All Together"
msgstr "放在一起"

#: ../../source/chaincode4ade.rst:294
msgid ""
"Finally, we need to add the ``main`` function, which will call the "
"`shim.Start "
"<https://godoc.org/github.com/hyperledger/fabric/core/chaincode/shim#Start>`_"
" function. Here's the whole chaincode program source."
msgstr ""
"最后，我们需要添加``main`` 函数，它将调用`shim.Start "
"<https://godoc.org/github.com/hyperledger/fabric/core/chaincode/shim#Start>`_"
" 函数。这是完整的链码程序源代码。"

#: ../../source/chaincode4ade.rst:393
msgid "Building Chaincode"
msgstr "构建链码"

#: ../../source/chaincode4ade.rst:395
msgid "Now let's compile your chaincode."
msgstr "现在让我们编译你的链码"

#: ../../source/chaincode4ade.rst:402
msgid ""
"Assuming there are no errors, now we can proceed to the next step, testing "
"your chaincode."
msgstr "假设没有错误，现在我们可以继续下一步，测试您的链码。"

#: ../../source/chaincode4ade.rst:406
msgid "Testing Using dev mode"
msgstr "用开发模式测试"

#: ../../source/chaincode4ade.rst:408
msgid ""
"Normally chaincodes are started and maintained by peer. However in “dev "
"mode\", chaincode is built and started by the user. This mode is useful "
"during chaincode development phase for rapid code/build/run/debug cycle "
"turnaround."
msgstr ""
"通常，链码由节点启动和维护。但是在“开发模式”中，链码是由用户构建和启动的。这种模式在链码开发阶段对于快速代码/构建/运行/调试循环非常有用。"

#: ../../source/chaincode4ade.rst:413
msgid ""
"We start \"dev mode\" by leveraging pre-generated orderer and channel "
"artifacts for a sample dev network.  As such, the user can immediately jump "
"into the process of compiling chaincode and driving calls."
msgstr "我们利用预生成的排序器和通道构件组成的示例开发网络来启动“开发模式”。因此，用户可以立即跳到编译链码和驱动调用的过程中。"

#: ../../source/chaincode4ade.rst:418
msgid "Install Hyperledger Fabric Samples"
msgstr "安装超级账本Fabric示例"

#: ../../source/chaincode4ade.rst:420
msgid "If you haven't already done so, please :doc:`install`."
msgstr "如果您还没有这样做，请 :doc:`install`。"

#: ../../source/chaincode4ade.rst:422
msgid ""
"Navigate to the ``chaincode-docker-devmode`` directory of the ``fabric-"
"samples`` clone:"
msgstr "导航到“fabric-samples”克隆体的“chaincode-docker-devmode”目录:"

#: ../../source/chaincode4ade.rst:429
msgid ""
"Now open three terminals and navigate to your ``chaincode-docker-devmode`` "
"directory in each."
msgstr "现在打开三个终端并导航到每个终端的“chaincode-docker-devmode”目录。"

#: ../../source/chaincode4ade.rst:433
msgid "Terminal 1 - Start the network"
msgstr "终端1 - 启动网络"

#: ../../source/chaincode4ade.rst:439
msgid ""
"The above starts the network with the ``SingleSampleMSPSolo`` orderer "
"profile and launches the peer in \"dev mode\".  It also launches two "
"additional containers - one for the chaincode environment and a CLI to "
"interact with the chaincode.  The commands for create and join channel are "
"embedded in the CLI container, so we can jump immediately to the chaincode "
"calls."
msgstr ""
"上面的代码使用“SingleSampleMSPSolo”排序器配置文件启动网络，并在“dev模式”中启动节点。它还启动了另外两个容器，一个用于链码环境，另一个用于CLI与链码交互。创建和加入通道的命令嵌入到CLI容器中，因此我们可以立即跳转到链码调用。"

#: ../../source/chaincode4ade.rst:446
msgid "Terminal 2 - Build & start the chaincode"
msgstr "终端2 - 构建和启动链码"

#: ../../source/chaincode4ade.rst:452
msgid "You should see the following:"
msgstr "你将看到如下结果："

#: ../../source/chaincode4ade.rst:458
msgid "Now, compile your chaincode:"
msgstr "现在，编译你的链码："

#: ../../source/chaincode4ade.rst:465
msgid "Now run the chaincode:"
msgstr "现在运行链码："

#: ../../source/chaincode4ade.rst:471
msgid ""
"The chaincode is started with peer and chaincode logs indicating successful "
"registration with the peer. Note that at this stage the chaincode is not "
"associated with any channel. This is done in subsequent steps using the "
"``instantiate`` command."
msgstr ""
"链码由节点启动，链码日志表明节点注册成功。注意，在这个阶段，链码与任何通道都没有关联。这是在后续步骤中使用 ``instantiate`` 命令完成的。"

#: ../../source/chaincode4ade.rst:476
msgid "Terminal 3 - Use the chaincode"
msgstr "终端3 - 使用链码"

#: ../../source/chaincode4ade.rst:478
msgid ""
"Even though you are in ``--peer-chaincodedev`` mode, you still have to "
"install the chaincode so the life-cycle system chaincode can go through its "
"checks normally. This requirement may be removed in future when in ``--peer-"
"chaincodedev`` mode."
msgstr ""
"即使您处于 ``--peer-chaincodedev`` 模式，您仍然必须安装链码，以便生命周期系统链码能够正常通过检查。这个要求可能会在以后的 "
"``--peer-chaincodedev`` 模式中被删除。"

#: ../../source/chaincode4ade.rst:482
msgid "We'll leverage the CLI container to drive these calls."
msgstr "我们将利用CLI容器来驱动这些调用。"

#: ../../source/chaincode4ade.rst:493
msgid "Now issue an invoke to change the value of \"a\" to \"20\"."
msgstr "现在发出一个调用，将“a”的值更改为“20”。"

#: ../../source/chaincode4ade.rst:499
msgid "Finally, query ``a``.  We should see a value of ``20``."
msgstr "最后,查询 ``a``。我们应该看到'``20``的值。"

#: ../../source/chaincode4ade.rst:506
msgid "Testing new chaincode"
msgstr "测试新链码"

#: ../../source/chaincode4ade.rst:508
msgid ""
"By default, we mount only ``sacc``.  However, you can easily test different "
"chaincodes by adding them to the ``chaincode`` subdirectory and relaunching "
"your network.  At this point they will be accessible in your ``chaincode`` "
"container."
msgstr ""
"默认情况下，我们只挂载`sacc``。然而，您可以通过将不同的链码添加到 ``chaincode`` "
"子目录并重新启动您的网络，从而轻松地测试不同的链码。此时，它们将可在您的``chaincode``容器中被访问。"

#: ../../source/chaincode4ade.rst:513
msgid "Chaincode access control"
msgstr "链码访问控制"

#: ../../source/chaincode4ade.rst:515
msgid ""
"Chaincode can utilize the client (submitter) certificate for access control "
"decisions by calling the GetCreator() function. Additionally the Go shim "
"provides extension APIs that extract client identity from the submitter's "
"certificate that can be used for access control decisions, whether that is "
"based on client identity itself, or the org identity, or on a client "
"identity attribute."
msgstr ""
"链码可以通过调用GetCreator()函数来利用客户端(提交者)证书进行访问控制决策。此外，Go "
"shim还提供了扩展API，从提交者的证书中提取客户端身份，这些API可用于访问控制决策，无论是基于客户端身份本身、org身份，还是基于客户端身份属性。"

#: ../../source/chaincode4ade.rst:522
msgid ""
"For example an asset that is represented as a key/value may include the "
"client's identity as part of the value (for example as a JSON attribute "
"indicating that asset owner), and only this client may be authorized to make"
" updates to the key/value in the future. The client identity library "
"extension APIs can be used within chaincode to retrieve this submitter "
"information to make such access control decisions."
msgstr ""
"例如，表示为键/值的资产可能包含作为值的一部分的客户端身份(例如表示该资产所有者的JSON属性)，并且只有这个客户端可能被授权在将来更新键/值。可以在链码中使用客户端身份库扩展API来检索提交者信息，从而做出这样的访问控制决策。"

#: ../../source/chaincode4ade.rst:529
msgid ""
"See the `client identity (CID) library documentation "
"<https://github.com/hyperledger/fabric/blob/master/core/chaincode/shim/ext/cid/README.md>`_"
" for more details."
msgstr ""
"有关详细信息，请参见`客户端身份(CID)库文档 "
"<https://github.com/hyperledger/fabric/blob/master/core/chaincode/shim/ext/cid/README.md>`_"
" 。"

#: ../../source/chaincode4ade.rst:532
msgid ""
"To add the client identity shim extension to your chaincode as a dependency,"
" see :ref:`vendoring`."
msgstr "要将客户端身份shim扩展作为依赖项添加到链码中，请参见  :ref:`vendoring`。"

#: ../../source/chaincode4ade.rst:535
msgid "Chaincode encryption"
msgstr "链码加密"

#: ../../source/chaincode4ade.rst:537
msgid ""
"In certain scenarios, it may be useful to encrypt values associated with a "
"key in their entirety or simply in part.  For example, if a person's social "
"security number or address was being written to the ledger, then you likely "
"would not want this data to appear in plaintext.  Chaincode encryption is "
"achieved by leveraging the `entities extension "
"<https://github.com/hyperledger/fabric/tree/master/core/chaincode/shim/ext/entities>`__"
" which is a BCCSP wrapper with commodity factories and functions to perform "
"cryptographic operations such as encryption and elliptic curve digital "
"signatures.  For example, to encrypt, the invoker of a chaincode passes in a"
" cryptographic key via the transient field.  The same key may then be used "
"for subsequent query operations, allowing for proper decryption of the "
"encrypted state values."
msgstr ""
"链码在某些场景中，对与密钥关联的值进行整体或部分加密可能很有用。例如，如果一个人的社会安全号码或地址被写入了账本，那么您可能不希望这些数据以明文形式出现。链码加密是通过使用`实体扩展"
" "
"<https://github.com/hyperledger/fabric/tree/master/core/chaincode/shim/ext/entities>`__"
" "
"来实现的，该扩展是一个BCCSP包装器，带有商品工厂和函数，用于执行类似加密和椭圆曲线数字签名等的加密操作。例如，要加密，链码的调用程序通过瞬态字段传入一个加密密钥。然后，可以将相同的密钥用于后续查询操作，从而对加密的状态值进行正确的解密。"

#: ../../source/chaincode4ade.rst:548
msgid ""
"For more information and samples, see the `Encc Example "
"<https://github.com/hyperledger/fabric/tree/master/examples/chaincode/go/enccc_example>`__"
" within the ``fabric/examples`` directory.  Pay specific attention to the "
"``utils.go`` helper program.  This utility loads the chaincode shim APIs and"
" Entities extension and builds a new class of functions (e.g. "
"``encryptAndPutState`` & ``getStateAndDecrypt``) that the sample encryption "
"chaincode then leverages.  As such, the chaincode can now marry the basic "
"shim APIs of ``Get`` and ``Put`` with the added functionality of ``Encrypt``"
" and ``Decrypt``."
msgstr ""
"有关更多信息和示例，请参见“fabric/examples”目录中的`Encc例子 "
"<https://github.com/hyperledger/fabric/tree/master/examples/chaincode/go/enccc_example>`__。要特别注意"
" ``utils.go`` 辅助程序。这个实用程序加载链码shim "
"API和实体扩展，并构建一个新的函数类（例如``encryptAndPutState`` & "
"``getStateAndDecrypt``）来示范加密链码。因此，链码现在可以将基本shim API 的``Get`` "
"/``Put``与``Encrypt`` /``Decrypt``的附加功能结合起来。"

#: ../../source/chaincode4ade.rst:557
msgid ""
"To add the encryption entities extension to your chaincode as a dependency, "
"see :ref:`vendoring`."
msgstr "要将加密实体扩展作为依赖项添加到链码中，请参见 :ref:`vendoring`."

#: ../../source/chaincode4ade.rst:562
msgid "Managing external dependencies for chaincode written in Go"
msgstr "管理用Go编写的链码的外部依赖关系"

#: ../../source/chaincode4ade.rst:563
msgid ""
"If your chaincode requires packages not provided by the Go standard library,"
" you will need to include those packages with your chaincode. It is also a "
"good practice to add the shim and any extension libraries to your chaincode "
"as a dependency."
msgstr "如果您的链码需要Go标准库没有提供的包，那么您需要在链码中包含这些包。将shim和任何扩展库作为依赖项添加到链码中也是一个很好的实践。"

#: ../../source/chaincode4ade.rst:568
msgid ""
"There are `many tools available "
"<https://github.com/golang/go/wiki/PackageManagementTools>`__ for managing "
"(or \"vendoring\") these dependencies.  The following demonstrates how to "
"use ``govendor``:"
msgstr ""
"有`许多工具 <https://github.com/golang/go/wiki/PackageManagementTools>`__ "
"可用于管理(或“处理”)这些依赖项。下面演示如何使用``govendor``:"

#: ../../source/chaincode4ade.rst:578
msgid ""
"This imports the external dependencies into a local ``vendor`` directory. If"
" you are vendoring the Fabric shim or shim extensions, clone the Fabric "
"repository to your $GOPATH/src/github.com/hyperledger directory, before "
"executing the govendor commands."
msgstr ""
"这将外部依赖项导入到本地的 ``vendor`` 目录中。如果您正在处理Fabric "
"shim或shim扩展，请在执行govendor命令之前，将Fabric存储库克隆到您的$GOPATH/src/github.com/hyperledger目录。"

#: ../../source/chaincode4ade.rst:583
msgid ""
"Once dependencies are vendored in your chaincode directory, ``peer chaincode"
" package`` and ``peer chaincode install`` operations will then include code "
"associated with the dependencies into the chaincode package."
msgstr ""
"一旦依赖项在chaincode目录中被处理，``peer chaincode package``和``peer chaincode install`` "
"操作将把与依赖项相关的代码包含到链码包中。"
