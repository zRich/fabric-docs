# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, hyperledger
# This file is distributed under the same license as the hyperledger-fabricdocs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: hyperledger-fabricdocs master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-01 12:09+0800\n"
"PO-Revision-Date: 2019-04-22 19:59+0000\n"
"Language-Team: Chinese (China) (https://www.transifex.com/hyperledger/teams/97220/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../source/developapps/transactioncontext.md:1
msgid "Transaction context"
msgstr ""

#: ../../source/developapps/transactioncontext.md:3
msgid "Audience: Architects, application and smart contract developers"
msgstr ""

#: ../../source/developapps/transactioncontext.md:5
msgid ""
"A transaction context performs two functions. Firstly, it allows a developer"
" to define and maintain user variables across transaction invocations within"
" a smart contract. Secondly, it provides access to a wide range of Fabric "
"APIs that allow smart contract developers to perform operations relating to "
"detailed transaction processing. These range from querying or updating the "
"ledger, both the immutable blockchain and the modifiable world state, to "
"retrieving the transaction-submitting application's digital identity."
msgstr ""

#: ../../source/developapps/transactioncontext.md:13
msgid ""
"A transaction context is created when a smart contract is instantiated, and "
"made available to every subsequent transaction invocation. A transaction "
"context helps smart contract developers write programs that are powerful, "
"efficient and easy to reason about."
msgstr ""

#: ../../source/developapps/transactioncontext.md:18
msgid "Why a transaction context is important"
msgstr ""

#: ../../source/developapps/transactioncontext.md:19
msgid "How to use a transaction context"
msgstr ""

#: ../../source/developapps/transactioncontext.md:20
msgid "What's in a transaction context"
msgstr ""

#: ../../source/developapps/transactioncontext.md:21
msgid "Using a context stub"
msgstr ""

#: ../../source/developapps/transactioncontext.md:22
msgid "Using a context clientIdentity"
msgstr ""

#: ../../source/developapps/transactioncontext.md:24
msgid "Scenario"
msgstr ""

#: ../../source/developapps/transactioncontext.md:26
msgid ""
"In the commercial paper sample, papercontract initially defines the name of "
"the list of commercial papers for which it's responsible. Each transaction "
"subsequently refers to this list; the issue transaction adds new papers to "
"it, the buy transaction changes its owner, and the redeem transaction marks "
"it as complete. This is a common pattern; when writing a smart contract it's"
" often helpful to initialize and recall particular variables in sequential "
"transactions."
msgstr ""

#: ../../source/developapps/transactioncontext.md:35
msgid ""
"A smart contract transaction context allows smart contracts to define and "
"maintain user variables across transaction invocations. Refer to the text "
"for a detailed explanation."
msgstr ""

#: ../../source/developapps/transactioncontext.md:39
msgid "Programming"
msgstr ""

#: ../../source/developapps/transactioncontext.md:41
msgid ""
"When a smart contract is constructed, a developer can optionally override "
"the built-in Context class createContext method to create a custom context:"
msgstr ""

#: ../../source/developapps/transactioncontext.md:50
msgid ""
"In our example, the CommercialPaperContext is specialized for "
"CommercialPaperContract. See how the custom context, addressed through this,"
" adds the specific variable PaperList to itself:"
msgstr ""

#: ../../source/developapps/transactioncontext.md:62
msgid ""
"When the createContext() method returns at point (1) in the diagram above, a"
" custom context ctx has been created which contains paperList as one of its "
"variables."
msgstr ""

#: ../../source/developapps/transactioncontext.md:66
msgid ""
"Subsequently, whenever a smart contract transaction such as issue, buy or "
"redeem is called, this context will be passed to it. See how at points (2), "
"(3) and (4) the same commercial paper context is passed into the transaction"
" method using the ctx variable."
msgstr ""

#: ../../source/developapps/transactioncontext.md:71
msgid "See how the context is then used at point (5):"
msgstr ""

#: ../../source/developapps/transactioncontext.md:78
msgid ""
"Notice how paperList created in CommercialPaperContext is available to the "
"issue transaction. See how paperList is similarly used by the redeem and buy"
" transactions; ctx makes the smart contracts efficient and easy to reason "
"about."
msgstr ""

#: ../../source/developapps/transactioncontext.md:83
msgid ""
"You can also see that there's another element in the context -- ctx.stub -- "
"which was not explictly added by CommercialPaperContext. That's because stub"
" and other variables are part of the built-in context. Let's now examine the"
" structure of this built-in context, these implicit variables and how to use"
" them."
msgstr ""

#: ../../source/developapps/transactioncontext.md:89
msgid "Structure"
msgstr ""

#: ../../source/developapps/transactioncontext.md:91
msgid ""
"As we've seen from the example, a transaction context can contain any number"
" of user variables such as paperList."
msgstr ""

#: ../../source/developapps/transactioncontext.md:94
msgid ""
"The transaction context also contains two built-in elements that provide "
"access to a wide range of Fabric functionality ranging from the client "
"application that submitted the transaction to ledger access."
msgstr ""

#: ../../source/developapps/transactioncontext.md:98
msgid ""
"ctx.stub is used to access APIs that provide a broad range of transaction "
"processing operations from putState() and getState() to access the ledger, "
"to getTxID() to retrieve the current transaction ID."
msgstr ""

#: ../../source/developapps/transactioncontext.md:102
msgid ""
"ctx.clientIdentity is used to get information about the identity of the user"
" who submitted the transaction."
msgstr ""

#: ../../source/developapps/transactioncontext.md:105
msgid ""
"We'll use the following diagram to show you what a smart contract can do "
"using the stub and clientIdentity using the APIs available to it:"
msgstr ""

#: ../../source/developapps/transactioncontext.md:108
msgid ""
"A smart contract can access a range of functionality in a smart contract via"
" the transaction context stub and clientIdentity. Refer to the text for a "
"detailed explanation."
msgstr ""

#: ../../source/developapps/transactioncontext.md:112
msgid "Stub"
msgstr ""

#: ../../source/developapps/transactioncontext.md:114
msgid "The APIs in the stub fall into the following categories:"
msgstr ""

#: ../../source/developapps/transactioncontext.md:116
msgid ""
"World state data APIs. See interaction point (1). These APIs enable smart "
"contracts to get, put and delete state corresponding to individual objects "
"from the world state, using their key:"
msgstr ""

#: ../../source/developapps/transactioncontext.md:120
msgid "getState()"
msgstr ""

#: ../../source/developapps/transactioncontext.md:121
msgid "putState()"
msgstr ""

#: ../../source/developapps/transactioncontext.md:122
msgid "deleteState()"
msgstr ""

#: ../../source/developapps/transactioncontext.md:124
msgid ""
"<br> These basic APIs are complemented by query APIs which enable contracts "
"to retrieve a set of states, rather than an individual state. See "
"interaction point (2). The set is either defined by a range of key values, "
"using full or partial keys, or a query according to values in the underlying"
" world state database.  For large queries, the result sets can be paginated "
"to reduce storage requirements:"
msgstr ""

#: ../../source/developapps/transactioncontext.md:131
msgid "getStateByRange()"
msgstr ""

#: ../../source/developapps/transactioncontext.md:132
msgid "getStateByRangeWithPagination()"
msgstr ""

#: ../../source/developapps/transactioncontext.md:133
msgid "getStateByPartialCompositeKey()"
msgstr ""

#: ../../source/developapps/transactioncontext.md:134
msgid "getStateByPartialCompositeKeyWithPagination()"
msgstr ""

#: ../../source/developapps/transactioncontext.md:135
msgid "getQueryResult()"
msgstr ""

#: ../../source/developapps/transactioncontext.md:136
msgid "getQueryResultWithPagination()"
msgstr ""

#: ../../source/developapps/transactioncontext.md:139
msgid ""
"Private data APIs. See interaction point (3). These APIs enable smart "
"contracts to interact with a private data collection. They are analogous to "
"the APIs for world state interactions, but for private data. There are APIs "
"to get, put and delete a private data state by its key:"
msgstr ""

#: ../../source/developapps/transactioncontext.md:144
msgid "getPrivateData()"
msgstr ""

#: ../../source/developapps/transactioncontext.md:145
msgid "putPrivateData()"
msgstr ""

#: ../../source/developapps/transactioncontext.md:146
msgid "deletePrivateData()"
msgstr ""

#: ../../source/developapps/transactioncontext.md:148
msgid ""
"<br> This set is complemented by set of APIs to query private data (4). "
"These APIs allow smart contracts to retrieve a set of states from a private "
"data collection, according to a range of key values, either full or partial "
"keys, or a query according to values in the underlying world state database."
" There are currently no pagination APIs for private data collections."
msgstr ""

#: ../../source/developapps/transactioncontext.md:155
msgid "getPrivateDataByRange()"
msgstr ""

#: ../../source/developapps/transactioncontext.md:156
msgid "getPrivateDataByPartialCompositeKey()"
msgstr ""

#: ../../source/developapps/transactioncontext.md:157
msgid "getPrivateDataQueryResult()"
msgstr ""

#: ../../source/developapps/transactioncontext.md:160
msgid ""
"Transaction APIs. See interaction point (5). These APIs are used by a smart "
"contract to retrieve details about the current transaction proposal being "
"processed by the smart contract. This includes the transaction identifier "
"and the time when the transaction proposal was created."
msgstr ""

#: ../../source/developapps/transactioncontext.md:165
msgid ""
"getTxID() returns the identifier of the current transaction proposal (5)."
msgstr ""

#: ../../source/developapps/transactioncontext.md:167
msgid ""
"getTxTimestamp() returns the timestamp when the current transaction proposal"
" was created by the application (5)."
msgstr ""

#: ../../source/developapps/transactioncontext.md:170
msgid ""
"getCreator() returns the raw identity (X.509 or otherwise) of the creator of"
" transaction proposal. If this is an X.509 certificate then it is often more"
" appropriate to use ctx.ClientIdentity."
msgstr ""

#: ../../source/developapps/transactioncontext.md:174
msgid ""
"getSignedProposal() returns a signed copy of the current transaction "
"proposal being processed by the smart contract."
msgstr ""

#: ../../source/developapps/transactioncontext.md:177
msgid ""
"getBinding() is used to prevent transactions being maliciously or "
"accidentally replayed using a nonce. (For practical purposes, a nonce is a "
"random number generated by the client application and incorporated in a "
"cryptographic hash.) For example, this API could be used by a smart contract"
" at (1) to detect a replay of the transaction (5)."
msgstr ""

#: ../../source/developapps/transactioncontext.md:183
msgid ""
"getTransient() allows a smart contract to access the transient data an "
"application passes to a smart contract. See interaction points (9) and (10)."
" Transient data is private to the application-smart contract interaction. It"
" is not recorded on the ledger and is often used in conjunction with private"
" data collections (3)."
msgstr ""

#: ../../source/developapps/transactioncontext.md:192
msgid ""
"Key APIs are used by smart contracts to manipulate state key in the world "
"state or a private data collection. See interaction points 2 and 4."
msgstr ""

#: ../../source/developapps/transactioncontext.md:195
msgid ""
"The simplest of these APIs allows smart contracts to form and split "
"composite keys from their individual components. Slightly more advanced are "
"the ValidationParameter() APIs which get and set the state based endorsement"
" policies for world state (2) and private data (4). Finally, "
"getHistoryForKey() retrieves the history for a state by returning the set of"
" stored values, including the transaction identifiers that performed the "
"state update, allowing the transactions to be read from the blockchain (10)."
msgstr ""

#: ../../source/developapps/transactioncontext.md:203
msgid "createCompositeKey()"
msgstr ""

#: ../../source/developapps/transactioncontext.md:204
msgid "splitCompositeKey()"
msgstr ""

#: ../../source/developapps/transactioncontext.md:205
msgid "setStateValidationParameter()"
msgstr ""

#: ../../source/developapps/transactioncontext.md:206
msgid "getStateValidationParameter()"
msgstr ""

#: ../../source/developapps/transactioncontext.md:207
msgid "getPrivateDataValidationParameter()"
msgstr ""

#: ../../source/developapps/transactioncontext.md:208
msgid "setPrivateDataValidationParameter()"
msgstr ""

#: ../../source/developapps/transactioncontext.md:209
msgid "getHistoryForKey()"
msgstr ""

#: ../../source/developapps/transactioncontext.md:213
msgid "Event APIs are used manage event processing in a smart contract."
msgstr ""

#: ../../source/developapps/transactioncontext.md:215
msgid "setEvent()"
msgstr ""

#: ../../source/developapps/transactioncontext.md:217
msgid ""
"Smart contracts use this API to add user events to a transaction response. "
"See interaction point (5). These events are ultimately recorded on the "
"blockchain and sent to listening applications at interaction point (11)."
msgstr ""

#: ../../source/developapps/transactioncontext.md:224
msgid ""
"Utility APIs are a collection of useful APIs that don't easily fit in a pre-"
"defined category, so we've grouped them together! They include retrieving "
"the current channel name and passing control to a different chaincode on the"
" same peer."
msgstr ""

#: ../../source/developapps/transactioncontext.md:229
msgid "getChannelID()"
msgstr ""

#: ../../source/developapps/transactioncontext.md:231
msgid ""
"See interaction point (13).  A smart contract running on any peer can use "
"this API to determined on which channel the application invoked the smart "
"contract."
msgstr ""

#: ../../source/developapps/transactioncontext.md:234
msgid "invokeChaincode()"
msgstr ""

#: ../../source/developapps/transactioncontext.md:236
msgid ""
"See interaction point (14).  Peer3 owned by MagnetoCorp has multiple smart "
"contracts installed on it.  These smart contracts are able to call each "
"other using this API. The smart contracts must be collocated; it is not "
"possible to call a smart contract on a different peer."
msgstr ""

#: ../../source/developapps/transactioncontext.md:241
msgid ""
"<br> Some of these utility APIs are only used if you're using low-level "
"chaincode, rather than smart contracts. These APIs are primarily for the "
"detailed manipulation of chaincode input; the smart contract Contract class "
"does all of this parameter marshalling automatically for developers."
msgstr ""

#: ../../source/developapps/transactioncontext.md:246
msgid "getFunctionAndParameters()"
msgstr ""

#: ../../source/developapps/transactioncontext.md:247
msgid "getStringArgs()"
msgstr ""

#: ../../source/developapps/transactioncontext.md:248
msgid "getArgs()"
msgstr ""

#: ../../source/developapps/transactioncontext.md:251
msgid "ClientIdentity"
msgstr ""

#: ../../source/developapps/transactioncontext.md:253
msgid ""
"In most cases, the application submitting a transaction will be using an "
"X.509 certificate. In the example, an X.509 certificate (6) issued by CA1 "
"(7) is being used by Isabella (8) in her application to sign the proposal in"
" transaction t6 (5)."
msgstr ""

#: ../../source/developapps/transactioncontext.md:258
msgid ""
"ClientIdentity takes the information returned by getCreator() and puts a set"
" of X.509 utility APIs on top of it to make it easier to use for this common"
" use case."
msgstr ""

#: ../../source/developapps/transactioncontext.md:262
msgid ""
"getX509Certificate() returns the full X.509 certificate of the transaction "
"submitter, including all its attributes and their values. See interaction "
"point (6)."
msgstr ""

#: ../../source/developapps/transactioncontext.md:265
msgid ""
"getAttributeValue() returns the value of a particular X.509 attribute, for "
"example, the organizational unit OU, or distinguished name DN. See "
"interaction point (6)."
msgstr ""

#: ../../source/developapps/transactioncontext.md:269
msgid ""
"assertAttributeValue() returns TRUE if the specified attribute of the X.509 "
"attribute has a specified value. See interaction point (6)."
msgstr ""

#: ../../source/developapps/transactioncontext.md:272
msgid ""
"getID() returns the unique identity of the transaction submitter, according "
"to their distinguished name and the issuing CA's distinguished name. The "
"format is x509::{subject DN}::{issuer DN}. See interaction point (6)."
msgstr ""

#: ../../source/developapps/transactioncontext.md:276
msgid ""
"getMSPID() returns the channel MSP of the transaction submitter. This allows"
" a smart contract to make processing decisions based on the submitter's "
"organizational identity. See interaction point (15) or (16)."
msgstr ""
