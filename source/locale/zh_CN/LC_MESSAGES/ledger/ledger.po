# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, hyperledger
# This file is distributed under the same license as the hyperledger-fabricdocs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# 王伟兵 <wbwang@inspur.com>, 2019
# Zhenhua Zhao <zhao.zhenhua@gmail.com>, 2019
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: hyperledger-fabricdocs master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-01 12:09+0800\n"
"PO-Revision-Date: 2019-04-22 20:00+0000\n"
"Last-Translator: Zhenhua Zhao <zhao.zhenhua@gmail.com>, 2019\n"
"Language-Team: Chinese (China) (https://www.transifex.com/hyperledger/teams/97220/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../source/ledger/ledger.md:1
msgid "Ledger"
msgstr ""

#: ../../source/ledger/ledger.md:3
msgid ""
"Audience: Architects, Application and smart contract developers, "
"administrators"
msgstr "受众：架构师、应用程序开发者和智能合约开发者、管理员"

#: ../../source/ledger/ledger.md:6
msgid ""
"A ledger is a key concept in Hyperledger Fabric; it stores important factual"
" information about business objects; both the current value of the "
"attributes of the objects, and the history of transactions that resulted in "
"these current values."
msgstr "账本是超级账本Fabric中的一个重要概念;它存储有关业务对象的重要事实信息;包括对象属性的当前值，和产生这些当前值的交易的历史。"

#: ../../source/ledger/ledger.md:11
msgid "In this topic, we're going to cover:"
msgstr "在这个主题中，我们将涉及:"

#: ../../source/ledger/ledger.md:13 ../../source/ledger/ledger.md:25
msgid "What is a Ledger?"
msgstr ""

#: ../../source/ledger/ledger.md:14
msgid "Storing facts about business objects"
msgstr ""

#: ../../source/ledger/ledger.md:15
msgid "A blockchain ledger"
msgstr ""

#: ../../source/ledger/ledger.md:16
msgid "The world state"
msgstr ""

#: ../../source/ledger/ledger.md:17
msgid "The blockchain data structure"
msgstr ""

#: ../../source/ledger/ledger.md:18
msgid "How blocks are stored in a blockchain"
msgstr ""

#: ../../source/ledger/ledger.md:19 ../../source/ledger/ledger.md:246
msgid "Transactions"
msgstr ""

#: ../../source/ledger/ledger.md:20
msgid "World state database options"
msgstr ""

#: ../../source/ledger/ledger.md:21
msgid "The Fabcar example ledger"
msgstr ""

#: ../../source/ledger/ledger.md:22
msgid "Ledgers and namespaces"
msgstr ""

#: ../../source/ledger/ledger.md:23
msgid "Ledgers and channels"
msgstr ""

#: ../../source/ledger/ledger.md:27
msgid ""
"A ledger contains the current state of a business as a journal of "
"transactions. The earliest European and Chinese ledgers date from almost "
"1000 years ago, and the Sumerians had stone ledgers 4000 years ago -- but "
"let's start with a more up-to-date example!"
msgstr ""
"账本包含业务的当前状态，就像一个交易日记账。欧洲和中国最早的账本可以追溯到近1000年前，苏美尔人在4000年前就有了石制账本——但让我们从一个更现代的例子开始吧!"

#: ../../source/ledger/ledger.md:33
msgid ""
"You're probably used to looking at your bank account. What's most important "
"to you is the available balance -- it's what you're able to spend at the "
"current moment in time. If you want to see how your balance was derived, "
"then you can look through the transaction credits and debits that determined"
" it. This is a real life example of a ledger -- a state (your bank balance),"
" and a set of ordered transactions (credits and debits) that determine it. "
"Hyperledger Fabric is motivated by these same two concerns -- to present the"
" current value of a set of ledger states, and to capture the history of the "
"transactions that determined these states."
msgstr ""
"你可能已经习惯查看你的银行账户了。对你来说，最重要的是可用的余额——它是你现在能花多少钱。如果你想知道你的余额是如何产生的，那么你可以查看决定它的交易贷项和借项。这是一个真实的账本示例——一个状态(您的银行余额)和一组确定账本的有序交易(贷记和借记)。超级账本Fabric的动机是出于这两个相同的考虑——显示一组账本状态的当前值，以及捕获决定这些状态的交易历史。"

#: ../../source/ledger/ledger.md:43
msgid "Ledgers, Facts and States"
msgstr ""

#: ../../source/ledger/ledger.md:45
msgid ""
"A ledger doesn't literally store business objects -- instead it stores facts"
" about those objects. When we say \"we store a business object in a ledger\""
" what we really mean is that we're recording the facts about the current "
"state of an object, and the facts about the history of transactions that led"
" to the current state. In an increasingly digital world, it can feel like "
"we're looking at an object, rather than facts about an object. In the case "
"of a digital object, it's likely that it lives in an external datastore; the"
" facts we store in the ledger allow us to identify its location along with "
"other key information about it."
msgstr ""
"账本并不真正地存储业务对象，而是存储关于这些对象的事实。当我们说“我们在账本中存储一个业务对象”时，我们真正的意思是我们正在记录关于一个对象当前状态的事实，以及关于导致当前状态的交易历史的事实。在一个日益数字化的世界里，我们感觉自己在看一个物体，而不是关于一个物体的事实。对于数字对象，它很可能存在于外部数据存储中;我们存储在账本中的事实使我们能够确定它的位置以及有关它的其他关键信息。"

#: ../../source/ledger/ledger.md:54
msgid ""
"While the facts about the current state of a business object may change, the"
" history of facts about it is immutable, it can be added to, but it cannot "
"be retrospectively changed. We're going to see how thinking of a blockchain "
"as an immutable history of facts about business objects is a simple yet "
"powerful way to understand it."
msgstr ""
"虽然关于业务对象当前状态的事实可能会更改，但是关于它的事实历史是不可变的，可以将其添加到其中，但不能对其进行回溯性更改。我们将看到，将区块链看作业务对象事实的不可变历史，是如何理解它的一种简单而强大的方法。"

#: ../../source/ledger/ledger.md:60
msgid ""
"Let's now take a closer look at the Hyperledger Fabric ledger structure!"
msgstr "现在让我们仔细看看超级账本Fabric的账本结构!"

#: ../../source/ledger/ledger.md:63
msgid "The Ledger"
msgstr ""

#: ../../source/ledger/ledger.md:65
msgid ""
"In Hyperledger Fabric, a ledger consists of two distinct, though related, "
"parts -- a world state and a blockchain. Each of these represents a set of "
"facts about a set of business objects."
msgstr "在超级账本Fabric中，账本由两个不同但相关的部分组成——一个世界状态和一个区块链。每一个都表示一组关于一组业务对象的事实。"

#: ../../source/ledger/ledger.md:69
msgid ""
"Firstly, there's a world state -- a database that holds a cache of the "
"current values of a set of ledger states. The world state makes it easy for "
"a program to directly access the current value of a state rather than having"
" to calculate it by traversing the entire transaction log. Ledger states "
"are, by default, expressed as key-value pairs, and we'll see later how "
"Hyperledger Fabric provides flexibility in this regard. The world state can "
"change frequently, as states can be created, updated and deleted."
msgstr ""
"首先，有一个世界状态——一个数据库，其中包含一组账本状态的当前值的缓存。世界状态使程序可以很容易地直接访问状态的当前值，而不必遍历整个交易日志来计算它。缺省情况下，账本状态表示为键值对，稍后我们将看到超级账本Fabric如何在这方面提供灵活性。世界状态可以频繁地更改，因为可以创建、更新和删除状态。"

#: ../../source/ledger/ledger.md:77
msgid ""
"Secondly, there's a blockchain -- a transaction log that records all the "
"changes that have resulted in the current the world state. Transactions are "
"collected inside blocks that are appended to the blockchain -- enabling you "
"to understand the history of changes that have resulted in the current world"
" state. The blockchain data structure is very different to the world state "
"because once written, it cannot be modified; it is immutable."
msgstr ""
"其次，还有一个区块链——一个交易日志，记录导致当前世界状态的所有更改。交易收集在附加到区块链的区块中——使您能够了解导致当前世界状态的更改的历史。区块链数据结构与世界状态非常不同，因为一旦写入，就无法修改;它是不可变的。"

#: ../../source/ledger/ledger.md:84
msgid ""
"A Ledger L comprises blockchain B and world state W, where blockchain B "
"determines world state W. We can also say that world state W is derived from"
" blockchain B."
msgstr ""

#: ../../source/ledger/ledger.md:88
msgid ""
"It's helpful to think of there being one logical ledger in a Hyperledger "
"Fabric network. In reality, the network maintains multiple copies of a "
"ledger -- which are kept consistent with every other copy through a process "
"called consensus. The term Distributed Ledger Technology (DLT) is often "
"associated with this kind of ledger -- one that is logically singular, but "
"has many consistent copies distributed throughout a network."
msgstr ""
"在一个超级账本Fabric网络中有一个逻辑账本是很有帮助的。实际上，该网络维护一个账本的多个副本——通过一个称为“共识”的过程，这些副本与其他副本保持一致。分布式账本技术(DLT)这个术语经常与这种账本联系在一起——这种账本在逻辑上是单一的，但是在整个网络中分布着许多一致的副本。"

#: ../../source/ledger/ledger.md:95
msgid ""
"Let's now examine the world state and blockchain data structures in more "
"detail."
msgstr "现在让我们更详细地研究世界状态和区块链数据结构。"

#: ../../source/ledger/ledger.md:97
msgid "World State"
msgstr ""

#: ../../source/ledger/ledger.md:99
msgid ""
"The world state holds the current value of the attributes of a business "
"object as a unique ledger state. That's useful because programs usually "
"require the current value of an object; it would be cumbersome to traverse "
"the entire blockchain to calculate an object's current value -- you just get"
" it directly from the world state."
msgstr ""
"世界状态将业务对象属性的当前值保存为唯一的账本状态。这很有用，因为程序通常需要对象的当前值;遍历整个区块链来计算对象的当前值将会很麻烦——您只需要直接从世界状态获取它。"

#: ../../source/ledger/ledger.md:105
msgid ""
"A ledger world state containing two states. The first state is: key=CAR1 and"
" value=Audi. The second state has a more complex value: key=CAR2 and "
"value={model:BMW, color=red, owner=Jane}. Both states are at version 0."
msgstr ""

#: ../../source/ledger/ledger.md:110
msgid ""
"A ledger state records a set of facts about a particular business object. "
"Our example shows ledger states for two cars, CAR1 and CAR2, each having a "
"key and a value. An application program can invoke a smart contract which "
"uses simple ledger APIs to get, put and delete states. Notice how a state "
"value can be simple (Audi...) or compound (type:BMW...). The world state is "
"often queried to retrieve objects with certain attributes, for example to "
"find all red BMWs."
msgstr ""
"账本状态记录一组关于特定业务对象的事实。我们的示例显示了CAR1和CAR2这两辆车的账本状态，每辆车都有一个键和一个值。应用程序可以调用智能合约，该合约使用简单的账本API来获取、设置和删除状态。注意状态值可以是简单的(奥迪…)，也可以是复合的(类型:BMW…)。通常查询世界状态来检索具有特定属性的对象，例如查找所有红色宝马。"

#: ../../source/ledger/ledger.md:118
msgid ""
"The world state is implemented as a database. This makes a lot of sense "
"because a database provides a rich set of operators for the efficient "
"storage and retrieval of states.  We'll see later that Hyperledger Fabric "
"can be configured to use different world state databases to address the "
"needs of different types of state values and the access patterns required by"
" applications, for example in complex queries."
msgstr ""
"世界状态作为数据库实现。这很有意义，因为数据库提供了一组丰富的操作符来有效地存储和检索状态。稍后我们将看到，可以将超级账本Fabric配置为使用不同的世界状态数据库来满足不同类型的状态值和应用程序(例如在复杂查询中)所需的访问模式的需要。"

#: ../../source/ledger/ledger.md:125
msgid ""
"Applications submit transactions which capture changes to the world state, "
"and these transactions end up being committed to the ledger blockchain. "
"Applications are insulated from the details of this consensus mechanism by "
"the Hyperledger Fabric SDK; they merely invoke a smart contract, and are "
"notified when the transaction has been included in the blockchain (whether "
"valid or invalid). The key design point is that only transactions that are "
"signed by the required set of endorsing organizations will result in an "
"update to the world state. If a transaction is not signed by sufficient "
"endorsers, it will not result in a change of world state. You can read more "
"about how applications use smart contracts, and how to develop applications."
msgstr ""
"应用程序提交的交易捕获对世界状态的更改，这些交易最终提交到账本区块链。应用程序通过超级账本Fabric "
"SDK与这种共识机制的细节隔离;它们仅仅调用一个智能合约，当交易被包含在区块链中时(无论是否有效)，它们都会得到通知。关键的设计要点是，只有由一组必需的背书组织签名的交易才会导致对世界状态的更新。如果一个交易没有足够的背书者签名，它将不会导致世界状态的改变。您可以阅读更多关于应用程序如何使用智能合约以及如何开发应用程序的信息。"

#: ../../source/ledger/ledger.md:137
msgid ""
"You'll also notice that a state has an version number, and in the diagram "
"above, states CAR1 and CAR2 are at their starting versions, 0. The version "
"number for internal use by Hyperledger Fabric, and is incremented every time"
" the state changes. The version is checked whenever the state is updated to "
"make sure the current states matches the version at the time of endorsement."
" This ensures that the world state is changing as expected; that there has "
"not been a concurrent update."
msgstr ""
"您还会注意到，状态有一个版本号，在上面的图表中，状态CAR1和CAR2处于它们的初始版本0。用于内部使用的版本号，并在每次状态更改时递增。每当更新状态时，都会检查版本，以确保当前状态与背书时的版本匹配。这就确保了世界状态正在按照预期发生变化;没有并发更新。"

#: ../../source/ledger/ledger.md:145
msgid ""
"Finally, when a ledger is first created, the world state is empty. Because "
"any transaction which represents a valid change to world state is recorded "
"on the blockchain, it means that the world state can be re-generated from "
"the blockchain at any time. This can be very convenient -- for example, the "
"world state is automatically generated when a peer is created. Moreover, if "
"a peer fails abnormally, the world state can be regenerated on peer restart,"
" before transactions are accepted."
msgstr ""
"最后，当第一次创建账本时，世界状态为空。因为表示对世界状态的有效更改的任何交易都记录在区块链上，这意味着可以随时从区块链重新生成世界状态。这非常方便——例如，创建peer时自动生成世界状态。此外，如果某个peer异常失败，则可以在peer重新启动时(在接受交易之前)重新生成世界状态。"

#: ../../source/ledger/ledger.md:153
msgid "Blockchain"
msgstr ""

#: ../../source/ledger/ledger.md:155
msgid ""
"Let's now turn our attention from the world state to the blockchain. Whereas"
" the world state contains a set of facts relating to the current state of a "
"set of business objects, the blockchain is an historical record of the facts"
" about how these objects arrived at their current states. The blockchain has"
" recorded every previous version of each ledger state and how it has been "
"changed."
msgstr ""
"现在让我们把注意力从世界状态转移到区块链。虽然世界状态包含一组与一组业务对象的当前状态相关的事实，但是区块链是关于这些对象如何达到其当前状态的事实的历史记录。区块链记录了每个账本状态的每个以前版本以及它是如何被更改的。"

#: ../../source/ledger/ledger.md:161
msgid ""
"The blockchain is structured as sequential log of interlinked blocks, where "
"each block contains a sequence of transactions, each transaction "
"representing a query or update to the world state. The exact mechanism by "
"which transactions are ordered is discussed elsewhere; what's important is "
"that block sequencing, as well as transaction sequencing within blocks, is "
"established when blocks are first created by a Hyperledger Fabric component "
"called the ordering service."
msgstr ""
"区块链结构为相互链接的区块的顺序日志，其中每个区块包含一系列交易，每个交易表示对世界状态的查询或更新。其他地方讨论了交易的确切排序机制;重要的是，区块排序，以及区块内的交易排序，是在称为排序服务的超超级账本Fabric组件首次创建区块时建立的。"

#: ../../source/ledger/ledger.md:169
msgid ""
"Each block's header includes a hash of the block's transactions, as well a "
"copy of the hash of the prior block's header. In this way, all transactions "
"on the ledger are sequenced and cryptographically linked together. This "
"hashing and linking makes the ledger data very secure. Even if one node "
"hosting the ledger was tampered with, it would not be able to convince all "
"the other nodes that it has the 'correct' blockchain because the ledger is "
"distributed throughout a network of independent nodes."
msgstr ""
"每个区块的头部包含区块交易的散列，以及前一个区块的头部散列的副本。这样，账本上的所有交易都按顺序排列，并以密码方式连接在一起。这种散列和链接使账本数据非常安全。即使一个承载账本的节点被篡改了，它也不能让所有其他节点相信它拥有“正确的”区块链，因为账本分布在一个由独立节点组成的网络中。"

#: ../../source/ledger/ledger.md:177
msgid ""
"The blockchain is always implemented as a file, in contrast to the world "
"state, which uses a database. This is a sensible design choice as the "
"blockchain data structure is heavily biased towards a very small set of "
"simple operations. Appending to the end of the blockchain is the primary "
"operation, and query is currently a relatively infrequent operation."
msgstr ""
"与使用数据库的世界状态相反，区块链始终作为文件实现。这是一个明智的设计选择，因为区块链数据结构严重偏向于非常小的一组简单操作。附加到区块链末尾的操作是主要操作，查询目前是一个相对不频繁的操作。"

#: ../../source/ledger/ledger.md:183
msgid ""
"Let's have a look at the structure of a blockchain in a little more detail."
msgstr "让我们更详细地看看区块链的结构。"

#: ../../source/ledger/ledger.md:185
msgid ""
"A blockchain B containing blocks B0, B1, B2, B3. B0 is the first block in "
"the blockchain, the genesis block."
msgstr ""

#: ../../source/ledger/ledger.md:188
msgid ""
"In the above diagram, we can see that block B2 has a block data D2 which "
"contains all its transactions: T5, T6, T7."
msgstr "在上面的图中，我们可以看到B2区块有一个区块数据D2，它包含所有的交易:T5、T6、T7。"

#: ../../source/ledger/ledger.md:191
msgid ""
"Most importantly, B2 has a block header H2, which contains a cryptographic "
"hash of all the transactions in D2 as well as with the equivalent hash from "
"the previous block B1. In this way, blocks are inextricably and immutably "
"linked to each other, which the term blockchain so neatly captures!"
msgstr ""
"最重要的是，B2有一个区块头部H2，它包含D2中所有交易的加密散列，以及与前一个区块B1相同的散列。通过这种方式，区块之间不可分割地、不可改变地链接在一起，术语区块链很好地捕捉到了这一点!"

#: ../../source/ledger/ledger.md:196
msgid ""
"Finally, as you can see in the diagram, the first block in the blockchain is"
" called the genesis block.  It's the starting point for the ledger, though "
"it does not contain any user transactions. Instead, it contains a "
"configuration transaction containing the initial state of the network "
"channel (not shown). We discuss the genesis block in more detail when we "
"discuss the blockchain network and channels in the documentation."
msgstr ""
"最后，如图所示，区块链中的第一个区块称为创世区块。它是账本的起点，尽管它不包含任何用户交易。相反，它包含一个配置交易，其中包含网络通道的初始状态(未显示)。在文档中讨论区块链网络和通道时，我们将更详细地讨论创世区块。"

#: ../../source/ledger/ledger.md:203
msgid "Blocks"
msgstr ""

#: ../../source/ledger/ledger.md:205
msgid ""
"Let's have a closer look at the structure of a block. It consists of three "
"sections"
msgstr "让我们仔细看看一个区块的结构。它由三个部分组成"

#: ../../source/ledger/ledger.md:208
msgid "Block Header"
msgstr ""

#: ../../source/ledger/ledger.md:210
msgid "This section comprises three fields, written when a block is created."
msgstr ""

#: ../../source/ledger/ledger.md:212
msgid ""
"Block number: An integer starting at 0 (the genesis block), and increased by"
" 1 for every new block appended to the blockchain."
msgstr ""

#: ../../source/ledger/ledger.md:215
msgid ""
"Current Block Hash: The hash of all the transactions contained in the "
"current block."
msgstr ""

#: ../../source/ledger/ledger.md:218
msgid ""
"Previous Block Hash: A copy of the hash from the previous block in the "
"blockchain."
msgstr ""

#: ../../source/ledger/ledger.md:221
msgid ""
"These fields are internally derived by cryptographically hashing the block "
"data. They ensure that each and every block is inextricably linked to its "
"neighbour, leading to an immutable ledger."
msgstr ""

#: ../../source/ledger/ledger.md:225
msgid ""
"Block header details. The header H2 of block B2 consists of block number 2, "
"the hash CH2 of the current block data D2, and a copy of a hash PH1 from the"
" previous block, block number 1."
msgstr ""

#: ../../source/ledger/ledger.md:230
msgid "Block Data"
msgstr ""

#: ../../source/ledger/ledger.md:232
msgid ""
"This section contains a list of transactions arranged in order. It is "
"written when the block is created by the ordering service. These "
"transactions have a rich but straightforward structure, which we describe "
"later in this topic."
msgstr ""

#: ../../source/ledger/ledger.md:238
msgid "Block Metadata"
msgstr ""

#: ../../source/ledger/ledger.md:240
msgid ""
"This section contains the time when the block was written, as well as the "
"certificate, public key and signature of the block writer. Subsequently, the"
" block committer also adds a valid/invalid indicator for every transaction, "
"though this information is not included in the hash, as that is created when"
" the block is created."
msgstr ""

#: ../../source/ledger/ledger.md:248
msgid ""
"As we've seen, a transaction captures changes to the world state. Let's have"
" a look at the detailed blockdata structure which contains the transactions "
"in a block."
msgstr "正如我们所看到的，交易捕获对世界状态的更改。让我们来看看包含在一个区块中的交易的详细区块数据结构。"

#: ../../source/ledger/ledger.md:252
msgid ""
"Transaction details. Transaction T4 in blockdata D1 of block B1 consists of "
"transaction header, H4, a transaction signature, S4, a transaction proposal "
"P4, a transaction response, R4, and a list of endorsements, E4."
msgstr ""

#: ../../source/ledger/ledger.md:257
msgid "In the above example, we can see the following fields:"
msgstr "在上面的例子中，我们可以看到以下字段:"

#: ../../source/ledger/ledger.md:260
msgid "Header"
msgstr ""

#: ../../source/ledger/ledger.md:262
msgid ""
"This section, illustrated by H4, captures some essential metadata about the "
"transaction -- for example, the name of the relevant chaincode, and its "
"version."
msgstr ""

#: ../../source/ledger/ledger.md:267
msgid "Signature"
msgstr ""

#: ../../source/ledger/ledger.md:269
msgid ""
"This section, illustrated by S4, contains a cryptographic signature, created"
" by the client application. This field is used to check that the transaction"
" details have not been tampered with, as it requires the application's "
"private key to generate it."
msgstr ""

#: ../../source/ledger/ledger.md:275
msgid "Proposal"
msgstr ""

#: ../../source/ledger/ledger.md:277
msgid ""
"This field, illustrated by P4, encodes the input parameters supplied by an "
"application to the smart contract which creates the proposed ledger update. "
"When the smart contract runs, this proposal provides a set of input "
"parameters, which, in combination with the current world state, determines "
"the new world state."
msgstr ""

#: ../../source/ledger/ledger.md:284
msgid "Response"
msgstr ""

#: ../../source/ledger/ledger.md:286
msgid ""
"This section, illustrated by R4, captures the before and after values of the"
" world state, as a Read Write set (RW-set). It's the output of a smart "
"contract, and if the transaction is successfully validated, it will be "
"applied to the ledger to update the world state."
msgstr ""

#: ../../source/ledger/ledger.md:292
msgid "Endorsements"
msgstr ""

#: ../../source/ledger/ledger.md:294
msgid ""
"As shown in E4, this is a list of signed transaction responses from each "
"required organization sufficient to satisfy the endorsement policy. You'll "
"notice that, whereas only one transaction response is included in the "
"transaction, there are multiple endorsements. That's because each "
"endorsement effectively encodes its organization's particular transaction "
"response -- meaning that there's no need to include any transaction response"
" that doesn't match sufficient endorsements as it will be rejected as "
"invalid, and not update the world state."
msgstr ""

#: ../../source/ledger/ledger.md:303
msgid ""
"That concludes the major fields of the transaction -- there are others, but "
"these are the essential ones that you need to understand to have a solid "
"understanding of the ledger data structure."
msgstr "这就总结了交易的主要领域——还有其他领域，但是这些是您需要了解的基本领域，以便对账本数据结构有一个坚实的了解。"

#: ../../source/ledger/ledger.md:307
msgid "World State database options"
msgstr ""

#: ../../source/ledger/ledger.md:309
msgid ""
"The world state is physically implemented as a database, to provide simple "
"and efficient storage and retrieval of ledger states. As we've seen, ledger "
"states can have simple or compound values, and to accommodate this, the "
"world state database implementation can vary, allowing these values to be "
"efficiently implemented. Options for the world state database currently "
"include LevelDB and CouchDB."
msgstr ""
"世界状态被物理地实现为一个数据库，以提供简单而有效的账本状态存储和检索。正如我们所看到的，账本状态可以有简单的值，也可以有复合的值，为了适应这一点，世界状态数据库的实现可以有所不同，从而允许这些值得到有效的实现。目前，世界状态数据库的选项包括LevelDB和CouchDB。"

#: ../../source/ledger/ledger.md:316
msgid ""
"LevelDB is the default and is particularly appropriate when ledger states "
"are simple key-value pairs. A LevelDB database is closely co-located with a "
"network node -- it is embedded within the same operating system process."
msgstr "LevelDB是默认值，当账本状态是简单的键值对时，它尤其适用。LevelDB数据库与网络节点紧密地共存——它嵌入在相同的操作系统进程中。"

#: ../../source/ledger/ledger.md:320
msgid ""
"CouchDB is a particularly appropriate choice when ledger states are "
"structured as JSON documents because CouchDB supports the rich queries and "
"update of richer data types often found in business transactions. "
"Implementation-wise, CouchDB runs in a separate operating system process, "
"but there is still a 1:1 relation between a peer node and a CouchDB "
"instance. All of this is invisible to a smart contract. See CouchDB as the "
"StateDatabase for more information on CouchDB."
msgstr ""
"当账本状态结构为JSON文档时，CouchDB是一个特别合适的选择，因为CouchDB支持在业务交易中经常看到的丰富的查询和更新数据类型。在实现方面，CouchDB运行在单独的操作系统进程中，但是peer节点和CouchDB实例之间仍然存在1:1的关系。所有这些都是智能合约所看不到的。有关CouchDB的更多信息，请参见CouchDB作为状态数据库。"

#: ../../source/ledger/ledger.md:328
msgid ""
"In LevelDB and CouchDB, we see an important aspect of Hyperledger Fabric -- "
"it is pluggable. The world state database could be a relational data store, "
"or a graph store, or a temporal database.  This provides great flexibility "
"in the types of ledger states that can be efficiently accessed, allowing "
"Hyperledger Fabric to address many different types of problems."
msgstr ""
"在LevelDB和CouchDB中，我们看到了超级账本Fabric的一个重要方面——它是可插入的。世界状态数据库可以是关系数据存储、图形存储或时态数据库。这为可以有效访问的账本状态类型提供了极大的灵活性，允许超级账本Fabric处理许多不同类型的问题。"

#: ../../source/ledger/ledger.md:334
msgid "Example Ledger: fabcar"
msgstr ""

#: ../../source/ledger/ledger.md:336
msgid ""
"As we end this topic on the ledger, let's have a look at a sample ledger. If"
" you've run the fabcar sample application, then you've created this ledger."
msgstr "当我们结束关于账本的话题时，让我们来看一个账本示例。如果您已经运行了fabcar示例应用程序，那么您已经创建了这个账本。"

#: ../../source/ledger/ledger.md:340
msgid ""
"The fabcar sample app creates a set of 10 cars each with a unique identity; "
"a different color, make, model and owner. Here's what the ledger looks like "
"after the first four cars have been created."
msgstr "fabcar样例应用程序创建一组10辆车，每辆车都有一个唯一的标识;不同的颜色，不同的款式，不同的主人。以下是前四辆车创建后的账本。"

#: ../../source/ledger/ledger.md:344
msgid ""
"The ledger, L, comprises a world state, W and a blockchain, B. W contains "
"four states with keys: CAR1, CAR2, CAR3 and CAR4. B contains two blocks, 0 "
"and 1. Block 1 contains four transactions: T1, T2, T3, T4."
msgstr ""

#: ../../source/ledger/ledger.md:349
msgid ""
"We can see that the world state contains states that correspond to CAR0, "
"CAR1, CAR2 and CAR3. CAR0 has a value which indicates that it is a blue "
"Toyota Prius, currently owned by Tomoko, and we can see similar states and "
"values for the other cars. Moreover, we can see that all car states are at "
"version number 0, indicating that this is their starting version number -- "
"they have not been updated since they were created."
msgstr ""
"我们可以看到世界状态包含对应于CAR0 CAR1 CAR2 "
"CAR3的状态。CAR0的值表明这是一辆蓝色的丰田普锐斯，目前归Tomoko所有，我们可以看到其他车的状态和值类似。此外，我们可以看到所有car状态的版本号都是0，这表示这是它们的初始版本号——自创建以来，它们一直没有更新。"

#: ../../source/ledger/ledger.md:356
msgid ""
"We can also see that the blockchain contains two blocks.  Block 0 is the "
"genesis block, though it does not contain any transactions that relate to "
"cars. Block 1 however, contains transactions T1, T2, T3, T4 and these "
"correspond to transactions that created the initial states for CAR0 to CAR3 "
"in the world state. We can see that block 1 is linked to block 0."
msgstr ""
"我们还可以看到区块链包含两个区块。区块0是创世区块，尽管它不包含任何与汽车相关的交易。然而，第1区块包含交易T1、T2、T3、T4，这些交易对应于为世界状态中的CAR0到CAR3创建初始状态的交易。我们可以看到区块1与区块0相连。"

#: ../../source/ledger/ledger.md:362
msgid ""
"We have not shown the other fields in the blocks or transactions, "
"specifically headers and hashes.  If you're interested in the precise "
"details of these, you will find a dedicated reference topic elsewhere in the"
" documentation. It gives you a fully worked example of an entire block with "
"its transactions in glorious detail -- but for now, you have achieved a "
"solid conceptual understanding of a Hyperledger Fabric ledger. Well done!"
msgstr ""
"我们还没有显示区块或交易中的其他字段，特别是头部和散列。如果您对这些细节感兴趣，可以在文档的其他地方找到专门的参考主题。它为您提供了一个完整的工作示例，其中详细介绍了整个区块及其交易——但是现在，您已经对超级账本Fabric账本有了一个坚实的概念理解。做得好!"

#: ../../source/ledger/ledger.md:369
msgid "Namespaces"
msgstr ""

#: ../../source/ledger/ledger.md:371
msgid ""
"Even though we have presented the ledger as though it were a single world "
"state and single blockchain, that's a little bit of an over-simplification. "
"In reality, each chaincode has its own world state that is separate from all"
" other chaincodes. World states are in a namespace so that only smart "
"contracts within the same chaincode can access a given namespace."
msgstr ""
"虽然我们把账本描述成一个单一的世界状态和单一的区块链，但这有点过于简单化了。实际上，每个链码都有自己的世界状态，与所有其他链码分离。世界状态位于一个名称空间中，因此只有同一链码中的智能合约才能访问给定的名称空间。"

#: ../../source/ledger/ledger.md:377
msgid ""
"A blockchain is not namespaced. It contains transactions from many different"
" smart contract namespaces. You can read more about chaincode namespaces in "
"this topic."
msgstr "区块链没有名称空间。它包含来自许多不同智能合约名称空间的交易。您可以在本主题中阅读更多关于链码名称空间的信息。"

#: ../../source/ledger/ledger.md:381
msgid ""
"Let's now look at how the concept of a namespace is applied within a "
"Hyperledger Fabric channel."
msgstr "现在让我们看看名称空间的概念是如何应用于超级账本Fabric通道中的。"

#: ../../source/ledger/ledger.md:384
msgid "Channels"
msgstr ""

#: ../../source/ledger/ledger.md:386
msgid ""
"In Hyperledger Fabric, each channel has a completely separate ledger. This "
"means a completely separate blockchain, and completely separate world "
"states, including namespaces. It is possible for applications and smart "
"contracts to communicate between channels so that ledger information can be "
"accessed between them."
msgstr ""
"在超级账本Fabric中，每个通道都有一个完全独立的账本。这意味着完全独立的区块链和完全独立的世界状态，包括名称空间。应用程序和智能合约可以在通道之间通信，以便在通道之间访问账本信息。"

#: ../../source/ledger/ledger.md:392
msgid "You can read more about how ledgers work with channels in this topic."
msgstr "在本主题中，您可以阅读更多关于账本如何与通道一起工作的信息。"

#: ../../source/ledger/ledger.md:396
msgid "More information"
msgstr ""

#: ../../source/ledger/ledger.md:398
msgid ""
"See the Transaction Flow, Read-Write set semantics and CouchDB as the "
"StateDatabase topics for a deeper dive on transaction flow, concurrency "
"control, and the world state database."
msgstr "要深入了解交易流程、并发控制和世界状态数据库，请将交易流程、读写集语义和CouchDB作为状态数据库主题。"
