# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, hyperledger
# This file is distributed under the same license as the hyperledger-fabricdocs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# 王伟兵 <wbwang@inspur.com>, 2019
# JulienGuo郭立冬 <690748277@qq.com>, 2019
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: hyperledger-fabricdocs master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-01 12:09+0800\n"
"PO-Revision-Date: 2019-04-22 19:53+0000\n"
"Last-Translator: JulienGuo郭立冬 <690748277@qq.com>, 2019\n"
"Language-Team: Chinese (China) (https://www.transifex.com/hyperledger/teams/97220/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../source/private-data-arch.rst:2
msgid "Private Data"
msgstr "私有数据"

#: ../../source/private-data-arch.rst:4
msgid ""
"This topic assumes an understanding of the conceptual material in the "
"`documentation on private data <private-data/private-data.html>`_."
msgstr "本主题假设您已经理解`“关于私有数据的文档 <private-data/private-data.html>`_ 中的概念。"

#: ../../source/private-data-arch.rst:8
msgid "Private data collection definition"
msgstr "私有数据集合定义"

#: ../../source/private-data-arch.rst:10
msgid ""
"A collection definition contains one or more collections, each having a "
"policy definition listing the organizations in the collection, as well as "
"properties used to control dissemination of private data at endorsement time"
" and, optionally, whether the data will be purged."
msgstr ""
"集合定义包含一个或多个集合，每个集合都有一个用来定义列出集合中的组织的策略，以及用于在背书时控制私有数据传播的属性，还有一个可选的操作，决定是否清除数据。"

#: ../../source/private-data-arch.rst:15
msgid ""
"Beginning with the Fabric chaincode lifecycle introduced with the Fabric "
"v2.0 Alpha, the collection definition is part of the chaincode definition. "
"The collection is approved by channel members, and then deployed when the "
"chaincode definition is committed to the channel. The collection file needs "
"to be the same for all channel members. If you are using the peer CLI to "
"approve and commit the chaincode definition, use the ``--collections-"
"config`` flag to specify the path to the collection definition file. If you "
"are using the Fabric SDK for Node.js, visit `How to install and start your "
"chaincode <https://fabric-sdk-node.github.io/master/tutorial-chaincode-"
"lifecycle.html>`_. To use the `previous lifecycle process <https"
"://hyperledger-fabric.readthedocs.io/en/release-1.4/chaincode4noah.html>`_ "
"to deploy a private data collection, use the ``--collections-config`` flag "
"when `instantiating your chaincode <https://hyperledger-"
"fabric.readthedocs.io/en/latest/commands/peerchaincode.html#peer-chaincode-"
"instantiate>`_."
msgstr ""
"从Fabric v2.0 "
"Alpha版引入的Fabric链码生命周期开始，集合定义是链码定义的一部分。集合由通道成员批准，然后当链码的定义被提交到通道时会部署集合。对所有通道成员来说，集合文件都是相同的。如果您使用节点CLI来批准和提交链码的定义，那么使用"
" ``--collections-config`` 参数来指定集合的定义文件所在的路径。如果您正在使用Node版的Fabric SDK，请访问 "
"`如何安装和启动链代码 <https://fabric-sdk-node.github.io/master/tutorial-chaincode-"
"lifecycle.html>`_。使用 `previous lifecycle process <https://hyperledger-"
"fabric.readthedocs.io/en/release-1.4/chaincode4noah.html>`_ 来部署私有数据集合时，需要在 "
"`实例化你的链码 <https://hyperledger-"
"fabric.readthedocs.io/en/latest/commands/peerchaincode.html#peer-chaincode-"
"instantiate>`_ 阶段使用 ``--collections-config`` 参数。"

#: ../../source/private-data-arch.rst:26
msgid "Collection definitions are composed of the following properties:"
msgstr "集合定义由以下属性组成:"

#: ../../source/private-data-arch.rst:28
msgid "``name``: Name of the collection."
msgstr "``name``: 集合名称。"

#: ../../source/private-data-arch.rst:30
msgid ""
"``policy``: The private data collection distribution policy defines which "
"organizations' peers are allowed to persist the collection data expressed "
"using the ``Signature`` policy syntax, with each member being included in an"
" ``OR`` signature policy list. To support read/write transactions, the "
"private data distribution policy must define a broader set of organizations "
"than the chaincode endorsement policy, as peers must have the private data "
"in order to endorse proposed transactions. For example, in a channel with "
"ten organizations, five of the organizations might be included in a private "
"data collection distribution policy, but the endorsement policy might call "
"for any three of the organizations to endorse."
msgstr ""
"``policy``:私有数据集合分发策略定义了哪些组织的peer被允许使用``Signature``策略语法表示持久化集合数据，每个成员都包含在`OR``"
" "
"签名策略列表中。为了支持读/写交易，私有数据分发策略必须定义比链码背书策略更广泛的组织集合，因为peer必须拥有私有数据才能背书提议的交易。例如，在一个有十个组织的通道中，五个组织可能包括在一个私有数据集合分发策略中，但是背书策略可能要求任意三个组织背书。"

#: ../../source/private-data-arch.rst:41
msgid ""
"``requiredPeerCount``: Minimum number of peers (across authorized "
"organizations) that each endorsing peer must successfully disseminate "
"private data to before the peer signs the endorsement and returns the "
"proposal response back to the client. Requiring dissemination as a condition"
" of endorsement will ensure that private data is available in the network "
"even if the endorsing peer(s) become unavailable. When ``requiredPeerCount``"
" is ``0``, it means that no distribution is **required**, but there may be "
"some distribution if ``maxPeerCount`` is greater than zero. A "
"``requiredPeerCount`` of ``0`` would typically not be recommended, as it "
"could lead to loss of private data in the network if the endorsing peer(s) "
"becomes unavailable. Typically you would want to require at least some "
"distribution of the private data at endorsement time to ensure redundancy of"
" the private data on multiple peers in the network."
msgstr ""
"``requiredPeerCount``: "
"在背书节点签署背书并将提案响应返回给客户端之前，每个背书节点必须成功地向其传播私有数据的最小节点数量（跨授权组织）。要求先传播才能背书的条件将确保即使背书的节点变的无法使用了，也能从网络中获得私有数据。当``requiredPeerCount``"
" 为``0``时，意味着分布存储不是必须的**required**，但是如果``maxPeerCount``大于0，则可能存在一些分布存储。通常不建议将"
" "
"``requiredPeerCount``设为``0``，因为如果背书节点变得不可用，则可能导致网络中的私有数据丢失。通常，您可能希望在背书时至少需要一些私有数据的分布存储，以确保网络中多个节点上的私有数据有冗余。"

#: ../../source/private-data-arch.rst:54
msgid ""
"``maxPeerCount``: For data redundancy purposes, the maximum number of other "
"peers (across authorized organizations) that each endorsing peer will "
"attempt to distribute the private data to. If an endorsing peer becomes "
"unavailable between endorsement time and commit time, other peers that are "
"collection members but who did not yet receive the private data at "
"endorsement time, will be able to pull the private data from peers the "
"private data was disseminated to. If this value is set to ``0``, the private"
" data is not disseminated at endorsement time, forcing private data pulls "
"against endorsing peers on all authorized peers at commit time."
msgstr ""
"``maxPeerCount``:出于数据冗余的目的，每个背书节点尝试将私有数据分发给的其他节点（跨授权组织）的最大节点数量。如果在背书时间和提交时间之间某个背书节点不可用，那么在背书时间还没接收到私有数据到集合成员节点将能够从已接收到私有数据的节点中拉取私有数据。如果将此值设置为``0``，则不会在背书时传播私有数据，从而迫使已被授权获取私有数据的节点在提交时从背书节点拉取私有数据。"

#: ../../source/private-data-arch.rst:64
msgid ""
"``blockToLive``: Represents how long the data should live on the private "
"database in terms of blocks. The data will live for this specified number of"
" blocks on the private database and after that it will get purged, making "
"this data obsolete from the network so that it cannot be queried from "
"chaincode, and cannot be made available to requesting peers. To keep private"
" data indefinitely, that is, to never purge private data, set the "
"``blockToLive`` property to ``0``."
msgstr ""
"``blockToLive``:这个属性表示以块的形式存储在私有数据库上的数据应该存在多长时间。数据将在私有数据库上保留本字段指定的数量的块，超出这个数量长度的将被清除，使该数据在网络中过期，目的是不能从链码查询它，从节点也请求不到。如果要无限期地保留私有数据，即永远不清除私有数据，请将"
" ``blockToLive`` 属性设置为 ``0``。"

#: ../../source/private-data-arch.rst:72
msgid ""
"``memberOnlyRead``: a value of ``true`` indicates that peers automatically "
"enforce that only clients belonging to one of the collection member "
"organizations are allowed read access to private data. If a client from a "
"non-member org attempts to execute a chaincode function that performs a read"
" of a private data, the chaincode invocation is terminated with an error. "
"Utilize a value of ``false`` if you would like to encode more granular "
"access control within individual chaincode functions."
msgstr ""
"``memberOnlyRead``: "
"这个值为``true``表示节点自动强制要求只允许属于集合成员之一的组织的客户端对私有数据进行读访问。如果来自非成员组织的客户端试图执行一个链码函数，该函数执行对私有数据的读取功能，那么这个链码调用将以一个错误的形式终止。如果希望在每个链码函数中编码更细粒度的访问控制，请使用``false``值。"

#: ../../source/private-data-arch.rst:80
msgid ""
"Here is a sample collection definition JSON file, containing an array of two"
" collection definitions:"
msgstr "下边是一个定义集合的例子的JSON 文件，包含一个数组，数组内容为两个集合的定义："

#: ../../source/private-data-arch.rst:104
msgid ""
"This example uses the organizations from the BYFN sample network, ``Org1`` "
"and ``Org2`` . The policy in the  ``collectionMarbles`` definition "
"authorizes both organizations to the private data. This is a typical "
"configuration when the chaincode data needs to remain private from the "
"ordering service nodes. However, the policy in the "
"``collectionMarblePrivateDetails`` definition restricts access to a subset "
"of organizations in the channel (in this case ``Org1`` ). In a real "
"scenario, there would be many organizations in the channel, with two or more"
" organizations in each collection sharing private data between them."
msgstr ""
"这个例子使用了来自于 BYFN 样例网络中的组织，``Org1``和``Org2``。在 "
"``collectionMarbles``的定义里面的策略内容是对于私有数据授权了两个组织。这个是当链码数据需要针对排序服务节点保密的时候的一种典型配置。然而，在``collectionMarblePrivateDetails``的定义里面的策略内容是将访问控制在了通道中的组织的一个子集（在这里指的是"
" ``Org1`` ） 。在一个真实的场景中，在通道中会有好多组织，在每个集合中会有两个或者多个组织，他们彼此共享数据。"

#: ../../source/private-data-arch.rst:114
msgid "Private data dissemination"
msgstr "私有数据传播"

#: ../../source/private-data-arch.rst:116
msgid ""
"Since private data is not included in the transactions that get submitted to"
" the ordering service, and therefore not included in the blocks that get "
"distributed to all peers in a channel, the endorsing peer plays an important"
" role in disseminating private data to other peers of authorized "
"organizations. This ensures the availability of private data in the "
"channel's collection, even if endorsing peers become unavailable after their"
" endorsement. To assist with this dissemination, the  ``maxPeerCount`` and "
"``requiredPeerCount`` properties in the collection definition control the "
"degree of dissemination at endorsement time."
msgstr ""
"由于提交给排序服务的交易中不包含私有数据，因此也不包含在分发给通道中所有节点的块中，所以背书的节点在向被授权获取私有数据的组织的其他节点分发私有数据方面扮演着重要的角色。这确保了通道集合中私有数据的可用性，即使背书的节点在背书之后变得不可用。为了协助这种传播，集合定义中的"
" ``maxPeerCount`` 和 ``requiredPeerCount``属性控制在背书时的传播程度。"

#: ../../source/private-data-arch.rst:125
msgid ""
"If the endorsing peer cannot successfully disseminate the private data to at"
" least the ``requiredPeerCount``, it will return an error back to the "
"client. The endorsing peer will attempt to disseminate the private data to "
"peers of different organizations, in an effort to ensure that each "
"authorized organization has a copy of the private data. Since transactions "
"are not committed at chaincode execution time, the endorsing peer and "
"recipient peers store a copy of the private data in a local ``transient "
"store`` alongside their blockchain until the transaction is committed."
msgstr ""
"如果背书的节点不能成功地将私有数据传播给至少“requiredPeerCount”个节点，那么它将向客户端返回一个错误。背书节点将尝试将私有数据传播给不同组织的节点，以确保每个被授权的组织都拥有私有数据的副本。交易不是在链码执行时提交的，背书节点和接收私有数据的节点将私有数据的副本存储在本地的"
" ``transient store`` 临时存储中，直到交易提交时再与提交时的区块一起存储。"

#: ../../source/private-data-arch.rst:133
msgid ""
"When authorized peers do not have a copy of the private data in their "
"transient data store at commit time (either because they were not an "
"endorsing peer or because they did not receive the private data via "
"dissemination at endorsement time), they will attempt to pull the private "
"data from another authorized peer, *for a configurable amount of time* based"
" on the peer property ``peer.gossip.pvtData.pullRetryThreshold`` in the peer"
" configuration ``core.yaml`` file."
msgstr ""
"当提交时，被授权的节点在瞬态数据存储里面没有私有数据的副本（因为他们不是背书节点，或者因为他们不接受背书时传播过来的私有数据），他们将试图从另一个被授权节点拉取私有数据，拉取的重试的"
" *可配置的时间长度* "
"在节点配置文件``core.yaml``中设置``peer.gossip.pvtData.pullRetryThreshold``"

#: ../../source/private-data-arch.rst:141
msgid ""
"The peers being asked for private data will only return the private data if "
"the requesting peer is a member of the collection as defined by the private "
"data dissemination policy."
msgstr "只有当请求私有数据的节点是私有数据传播策略定义的集合的成员时，被请求的节点才会返回私有数据。"

#: ../../source/private-data-arch.rst:145
msgid "Considerations when using ``pullRetryThreshold``:"
msgstr "使用的考虑事项 ``pullRetryThreshold``："

#: ../../source/private-data-arch.rst:147
msgid ""
"If the requesting peer is able to retrieve the private data within the "
"``pullRetryThreshold``, it will commit the transaction to its ledger "
"(including the private data hash), and store the private data in its state "
"database, logically separated from other channel state data."
msgstr ""
"如果请求的节点能够在 ``pullRetryThreshold`` "
"变量配置的时间内检索到私有数据，那么它将把交易提交到其账本(包括私有数据哈希)，并将私有数据存储在其状态数据库中，从逻辑上与其他的通道状态数据分离。"

#: ../../source/private-data-arch.rst:152
msgid ""
"If the requesting peer is not able to retrieve the private data within the "
"``pullRetryThreshold``, it will commit the transaction to it’s blockchain "
"(including the private data hash), without the private data."
msgstr ""
"如果请求的节点无法在 ``pullRetryThreshold`` "
"变量配置的时间内检索到私有数据，则将交易提交给它的账本（包括私有数据哈希），而不包含私有数据。"

#: ../../source/private-data-arch.rst:156
msgid ""
"If the peer was entitled to the private data but it is missing, then that "
"peer will not be able to endorse future transactions that reference the "
"missing private data - a chaincode query for a key that is missing will be "
"detected (based on the presence of the key’s hash in the state database), "
"and the chaincode will receive an error."
msgstr ""

#: ../../source/private-data-arch.rst:162
msgid ""
"Therefore, it is important to set the ``requiredPeerCount`` and "
"``maxPeerCount`` properties large enough to ensure the availability of "
"private data in your channel. For example, if each of the endorsing peers "
"become unavailable before the transaction commits, the ``requiredPeerCount``"
" and ``maxPeerCount`` properties will have ensured the private data is "
"available on other peers."
msgstr ""

#: ../../source/private-data-arch.rst:168
msgid ""
"For collections to work, it is important to have cross organizational gossip"
" configured correctly. Refer to our documentation on :doc:`gossip`, paying "
"particular attention to the \"anchor peers\" and \"external endpoint\" "
"configuration."
msgstr ""

#: ../../source/private-data-arch.rst:174
msgid "Referencing collections from chaincode"
msgstr ""

#: ../../source/private-data-arch.rst:176
msgid ""
"A set of `shim APIs "
"<https://godoc.org/github.com/hyperledger/fabric/core/chaincode/shim>`_ are "
"available for setting and retrieving private data."
msgstr ""

#: ../../source/private-data-arch.rst:179
msgid ""
"The same chaincode data operations can be applied to channel state data and "
"private data, but in the case of private data, a collection name is "
"specified along with the data in the chaincode APIs, for example "
"``PutPrivateData(collection,key,value)`` and "
"``GetPrivateData(collection,key)``."
msgstr ""

#: ../../source/private-data-arch.rst:184
msgid "A single chaincode can reference multiple collections."
msgstr ""

#: ../../source/private-data-arch.rst:187
msgid "How to pass private data in a chaincode proposal"
msgstr ""

#: ../../source/private-data-arch.rst:189
msgid ""
"Since the chaincode proposal gets stored on the blockchain, it is also "
"important not to include private data in the main part of the chaincode "
"proposal. A special field in the chaincode proposal called the ``transient``"
" field can be used to pass private data from the client (or data that "
"chaincode will use to generate private data), to chaincode invocation on the"
" peer.  The chaincode can retrieve the ``transient`` field by calling the "
"`GetTransient() API "
"<https://github.com/hyperledger/fabric/blob/8b3cbda97e58d1a4ff664219244ffd1d89d7fba8/core/chaincode/shim/interfaces.go#L315-L321>`_."
" This ``transient`` field gets excluded from the channel transaction."
msgstr ""

#: ../../source/private-data-arch.rst:198
msgid "Access control for private data"
msgstr ""

#: ../../source/private-data-arch.rst:200
msgid ""
"Until version 1.3, access control to private data based on collection "
"membership was enforced for peers only. Access control based on the "
"organization of the chaincode proposal submitter was required to be encoded "
"in chaincode logic. Starting in v1.4 a collection configuration option "
"``memberOnlyRead`` can automatically enforce access control based on the "
"organization of the chaincode proposal submitter. For more information about"
" collection configuration definitions and how to set them, refer back to the"
" `Private data collection definition`_  section of this topic."
msgstr ""

#: ../../source/private-data-arch.rst:209
msgid ""
"If you would like more granular access control, you can set "
"``memberOnlyRead`` to false. You can then apply your own access control "
"logic in chaincode, for example by calling the GetCreator() chaincode API or"
" using the client identity `chaincode library "
"<https://github.com/hyperledger/fabric/tree/master/core/chaincode/shim/ext/cid>`__"
" ."
msgstr ""

#: ../../source/private-data-arch.rst:216
msgid "Querying Private Data"
msgstr ""

#: ../../source/private-data-arch.rst:218
msgid ""
"Private data collection can be queried just like normal channel data, using "
"shim APIs:"
msgstr ""

#: ../../source/private-data-arch.rst:221
msgid "``GetPrivateDataByRange(collection, startKey, endKey string)``"
msgstr ""

#: ../../source/private-data-arch.rst:222
msgid ""
"``GetPrivateDataByPartialCompositeKey(collection, objectType string, keys "
"[]string)``"
msgstr ""

#: ../../source/private-data-arch.rst:224
msgid ""
"And for the CouchDB state database, JSON content queries can be passed using"
" the shim API:"
msgstr ""

#: ../../source/private-data-arch.rst:227
msgid "``GetPrivateDataQueryResult(collection, query string)``"
msgstr ""

#: ../../source/private-data-arch.rst:229
msgid "Limitations:"
msgstr ""

#: ../../source/private-data-arch.rst:231
msgid ""
"Clients that call chaincode that executes range or rich JSON queries should "
"be aware that they may receive a subset of the result set, if the peer they "
"query has missing private data, based on the explanation in Private Data "
"Dissemination section above.  Clients can query multiple peers and compare "
"the results to determine if a peer may be missing some of the result set."
msgstr ""

#: ../../source/private-data-arch.rst:236
msgid ""
"Chaincode that executes range or rich JSON queries and updates data in a "
"single transaction is not supported, as the query results cannot be "
"validated on the peers that don’t have access to the private data, or on "
"peers that are missing the private data that they have access to. If a "
"chaincode invocation both queries and updates private data, the proposal "
"request will return an error. If your application can tolerate result set "
"changes between chaincode execution and validation/commit time, then you "
"could call one chaincode function to perform the query, and then call a "
"second chaincode function to make the updates. Note that calls to "
"GetPrivateData() to retrieve individual keys can be made in the same "
"transaction as PutPrivateData() calls, since all peers can validate key "
"reads based on the hashed key version."
msgstr ""

#: ../../source/private-data-arch.rst:248
msgid "Using Indexes with collections"
msgstr ""

#: ../../source/private-data-arch.rst:250
msgid ""
"The Fabric chaincode lifecycle being introduced in the Fabric v2.0 Alpha "
"does not support using couchDB indexes with your chaincode. To use the "
"previous lifecycle model to deploy couchDB indexes with private data "
"collections, visit the v1.4 version of the `Private Data Architecture Guide "
"<https://hyperledger-fabric.readthedocs.io/en/release-1.4/private-data-"
"arch.html>`_."
msgstr ""

#: ../../source/private-data-arch.rst:255
msgid ""
"The topic :doc:`couchdb_as_state_database` describes indexes that can be "
"applied to the channel’s state database to enable JSON content queries, by "
"packaging indexes in a ``META-INF/statedb/couchdb/indexes`` directory at "
"chaincode installation time.  Similarly, indexes can also be applied to "
"private data collections, by packaging indexes in a ``META-"
"INF/statedb/couchdb/collections/<collection_name>/indexes`` directory. An "
"example index is available `here <https://github.com/hyperledger/fabric-"
"samples/blob/master/chaincode/marbles02_private/go/META-"
"INF/statedb/couchdb/collections/collectionMarbles/indexes/indexOwner.json>`_."
msgstr ""

#: ../../source/private-data-arch.rst:263
msgid "Considerations when using private data"
msgstr ""

#: ../../source/private-data-arch.rst:266
msgid "Private data purging"
msgstr ""

#: ../../source/private-data-arch.rst:268
msgid ""
"Private data can be periodically purged from peers. For more details, see "
"the ``blockToLive`` collection definition property above."
msgstr ""

#: ../../source/private-data-arch.rst:271
msgid ""
"Additionally, recall that prior to commit, peers store private data in a "
"local transient data store. This data automatically gets purged when the "
"transaction commits.  But if a transaction was never submitted to the "
"channel and therefore never committed, the private data would remain in each"
" peer’s transient store.  This data is purged from the transient store after"
" a configurable number blocks by using the peer’s "
"``peer.gossip.pvtData.transientstoreMaxBlockRetention`` property in the peer"
" ``core.yaml`` file."
msgstr ""

#: ../../source/private-data-arch.rst:281
msgid "Updating a collection definition"
msgstr ""

#: ../../source/private-data-arch.rst:283
msgid ""
"To update a collection definition or add a new collection, you can upgrade "
"the chaincode to a new version and pass the new collection configuration in "
"the chaincode upgrade transaction, for example using the ``--collections-"
"config`` flag if using the CLI. If a collection configuration is specified "
"during the chaincode upgrade, a definition for each of the existing "
"collections must be included."
msgstr ""

#: ../../source/private-data-arch.rst:290
msgid ""
"When upgrading a chaincode, you can add new private data collections, and "
"update existing private data collections, for example to add new members to "
"an existing collection or change one of the collection definition "
"properties. Note that you cannot update the collection name or the "
"blockToLive property, since a consistent blockToLive is required regardless "
"of a peer's block height."
msgstr ""

#: ../../source/private-data-arch.rst:297
msgid ""
"Collection updates becomes effective when a peer commits the block that "
"contains the chaincode upgrade transaction. Note that collections cannot be "
"deleted, as there may be prior private data hashes on the channel’s "
"blockchain that cannot be removed."
msgstr ""

#: ../../source/private-data-arch.rst:303
msgid "Private data reconciliation"
msgstr ""

#: ../../source/private-data-arch.rst:305
msgid ""
"Starting in v1.4, peers of organizations that are added to an existing "
"collection will automatically fetch private data that was committed to the "
"collection before they joined the collection."
msgstr ""

#: ../../source/private-data-arch.rst:309
msgid ""
"This private data \"reconciliation\" also applies to peers that were "
"entitled to receive private data but did not yet receive it --- because of a"
" network failure, for example --- by keeping track of private data that was "
"\"missing\" at the time of block commit."
msgstr ""

#: ../../source/private-data-arch.rst:314
msgid ""
"Private data reconciliation occurs periodically based on the "
"``peer.gossip.pvtData.reconciliationEnabled`` and "
"``peer.gossip.pvtData.reconcileSleepInterval`` properties in core.yaml. The "
"peer will periodically attempt to fetch the private data from other "
"collection member peers that are expected to have it."
msgstr ""

#: ../../source/private-data-arch.rst:319
msgid ""
"Note that this private data reconciliation feature only works on peers "
"running v1.4 or later of Fabric."
msgstr ""
