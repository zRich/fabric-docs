# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, hyperledger
# This file is distributed under the same license as the hyperledger-fabricdocs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: hyperledger-fabricdocs master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-09 08:55+0800\n"
"PO-Revision-Date: 2019-06-01 14:53+0000\n"
"Language-Team: Chinese (China) (https://www.transifex.com/hyperledger/teams/97220/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../source/dev-setup/build.rst:2 ../../source/dev-setup/devenv.rst:153
msgid "Building Hyperledger Fabric"
msgstr ""

#: ../../source/dev-setup/build.rst:4
msgid ""
"The following instructions assume that you have already set up your "
":doc:`development environment <devenv>`."
msgstr ""

#: ../../source/dev-setup/build.rst:7
msgid "To build Hyperledger Fabric:"
msgstr ""

#: ../../source/dev-setup/build.rst:15
msgid "Running the unit tests"
msgstr ""

#: ../../source/dev-setup/build.rst:17
msgid "Use the following sequence to run all unit tests"
msgstr ""

#: ../../source/dev-setup/build.rst:24
msgid ""
"To run a subset of tests, set the TEST_PKGS environment variable. Specify a "
"list of packages (separated by space), for example:"
msgstr ""

#: ../../source/dev-setup/build.rst:32
msgid ""
"To run a specific test use the ``-run RE`` flag where RE is a regular "
"expression that matches the test case name. To run tests with verbose output"
" use the ``-v`` flag. For example, to run the ``TestGetFoo`` test case, "
"change to the directory containing the ``foo_test.go`` and call/execute"
msgstr ""

#: ../../source/dev-setup/build.rst:45
msgid "Running Node.js Client SDK Unit Tests"
msgstr ""

#: ../../source/dev-setup/build.rst:47
msgid ""
"You must also run the Node.js unit tests to ensure that the Node.js client "
"SDK is not broken by your changes. To run the Node.js unit tests, follow the"
" instructions `here <https://github.com/hyperledger/fabric-sdk-"
"node/blob/master/README.md>`__."
msgstr ""

#: ../../source/dev-setup/build.rst:53
msgid "Building outside of Vagrant"
msgstr ""

#: ../../source/dev-setup/build.rst:55
msgid ""
"It is possible to build the project and run peers outside of Vagrant. "
"Generally speaking, one has to 'translate' the vagrant `setup file "
"<https://github.com/hyperledger/fabric/blob/master/devenv/setup.sh>`__ to "
"the platform of your choice."
msgstr ""

#: ../../source/dev-setup/build.rst:61
msgid "Building on Z"
msgstr ""

#: ../../source/dev-setup/build.rst:63
msgid ""
"To make building on Z easier and faster, `this script "
"<https://github.com/hyperledger/fabric/blob/master/devenv/setupRHELonZ.sh>`__"
" is provided (which is similar to the `setup file "
"<https://github.com/hyperledger/fabric/blob/master/devenv/setup.sh>`__ "
"provided for vagrant). This script has been tested only on RHEL 7.2 and has "
"some assumptions one might want to re-visit (firewall settings, development "
"as root user, etc.). It is however sufficient for development in a "
"personally-assigned VM instance."
msgstr ""

#: ../../source/dev-setup/build.rst:72
msgid "To get started, from a freshly installed OS:"
msgstr ""

#: ../../source/dev-setup/build.rst:83
msgid ""
"From this point, you can proceed as described above for the Vagrant "
"development environment."
msgstr ""

#: ../../source/dev-setup/build.rst:92
msgid "Building on Power Platform"
msgstr ""

#: ../../source/dev-setup/build.rst:94
msgid ""
"Development and build on Power (ppc64le) systems is done outside of vagrant "
"as outlined `here <#building-outside-of-vagrant>`__. For ease of setting up "
"the dev environment on Ubuntu, invoke `this script "
"<https://github.com/hyperledger/fabric/blob/master/devenv/setupUbuntuOnPPC64le.sh>`__"
" as root. This script has been validated on Ubuntu 16.04 and assumes certain"
" things (like, development system has OS repositories in place, firewall "
"setting etc) and in general can be improvised further."
msgstr ""

#: ../../source/dev-setup/build.rst:102
msgid ""
"To get started on Power server installed with Ubuntu, first ensure you have "
"properly setup your Host's `GOPATH environment variable "
"<https://github.com/golang/go/wiki/GOPATH>`__. Then, execute the following "
"commands to build the fabric code:"
msgstr ""

#: ../../source/dev-setup/build.rst:117
msgid "Building on Centos 7"
msgstr ""

#: ../../source/dev-setup/build.rst:119
msgid ""
"You will have to build CouchDB from source because there is no package "
"available from the distribution. If you are planning a multi-orderer "
"arrangement, you will also need to install Apache Kafka from source. Apache "
"Kafka includes both Zookeeper and Kafka executables and supporting "
"artifacts."
msgstr ""

#: ../../source/dev-setup/build.rst:136
msgid "If you are not trying to build for docker, you only need the natives."
msgstr ""

#: ../../source/dev-setup/build.rst:140
msgid "Configuration"
msgstr ""

#: ../../source/dev-setup/build.rst:142
msgid ""
"Configuration utilizes the `viper <https://github.com/spf13/viper>`__ and "
"`cobra <https://github.com/spf13/cobra>`__ libraries."
msgstr ""

#: ../../source/dev-setup/build.rst:145
msgid ""
"There is a **core.yaml** file that contains the configuration for the peer "
"process. Many of the configuration settings can be overridden on the command"
" line by setting ENV variables that match the configuration setting, but by "
"prefixing with *'CORE\\_'*. For example, logging level manipulation through "
"the environment is shown below:"
msgstr ""

#: ../../source/dev-setup/devenv.rst:2
msgid "Setting up the development environment"
msgstr ""

#: ../../source/dev-setup/devenv.rst:5
msgid "Overview"
msgstr ""

#: ../../source/dev-setup/devenv.rst:7
msgid ""
"Prior to the v1.0.0 release, the development environment utilized Vagrant "
"running an Ubuntu image, which in turn launched Docker containers as a means"
" of ensuring a consistent experience for developers who might be working "
"with varying platforms, such as macOS, Windows, Linux, or whatever. Advances"
" in Docker have enabled native support on the most popular development "
"platforms: macOS and Windows. Hence, we have reworked our build to take full"
" advantage of these advances. While we still maintain a Vagrant based "
"approach that can be used for older versions of macOS and Windows that "
"Docker does not support, we strongly encourage that the non-Vagrant "
"development setup be used."
msgstr ""

#: ../../source/dev-setup/devenv.rst:18
msgid ""
"Note that while the Vagrant-based development setup could not be used in a "
"cloud context, the Docker-based build does support cloud platforms such as "
"AWS, Azure, Google and IBM to name a few. Please follow the instructions for"
" Ubuntu builds, below."
msgstr ""

#: ../../source/dev-setup/devenv.rst:24
msgid "Prerequisites"
msgstr ""

#: ../../source/dev-setup/devenv.rst:26
msgid "`Git client <https://git-scm.com/downloads>`__"
msgstr ""

#: ../../source/dev-setup/devenv.rst:27
msgid "`Go <https://golang.org/dl/>`__ - version 1.11.x"
msgstr ""

#: ../../source/dev-setup/devenv.rst:28
msgid ""
"(macOS) `Xcode <https://itunes.apple.com/us/app/xcode/id497799835?mt=12>`__ "
"must be installed"
msgstr ""

#: ../../source/dev-setup/devenv.rst:31
msgid "`Docker <https://www.docker.com/get-docker>`__ - 17.06.2-ce or later"
msgstr ""

#: ../../source/dev-setup/devenv.rst:32
msgid ""
"`Docker Compose <https://docs.docker.com/compose/>`__ - 1.14.0 or later"
msgstr ""

#: ../../source/dev-setup/devenv.rst:33
msgid "`Pip <https://pip.pypa.io/en/stable/installing/>`__"
msgstr ""

#: ../../source/dev-setup/devenv.rst:34
msgid ""
"(macOS) you may need to install gnutar, as macOS comes with bsdtar as the "
"default, but the build uses some gnutar flags. You can use Homebrew to "
"install it as follows:"
msgstr ""

#: ../../source/dev-setup/devenv.rst:42
msgid ""
"(macOS) `Libtool <https://www.gnu.org/software/libtool/>`__. You can use "
"Homebrew to install it as follows:"
msgstr ""

#: ../../source/dev-setup/devenv.rst:49
msgid ""
"(only if using Vagrant) - `Vagrant <https://www.vagrantup.com/>`__ - 1.9 or "
"later"
msgstr ""

#: ../../source/dev-setup/devenv.rst:51
msgid ""
"(only if using Vagrant) - `VirtualBox <https://www.virtualbox.org/>`__ - 5.0"
" or later"
msgstr ""

#: ../../source/dev-setup/devenv.rst:53
msgid "BIOS Enabled Virtualization - Varies based on hardware"
msgstr ""

#: ../../source/dev-setup/devenv.rst:55
msgid ""
"Note: The BIOS Enabled Virtualization may be within the CPU or Security "
"settings of the BIOS"
msgstr ""

#: ../../source/dev-setup/devenv.rst:59
msgid "``pip``"
msgstr ""

#: ../../source/dev-setup/devenv.rst:67
msgid "Steps"
msgstr ""

#: ../../source/dev-setup/devenv.rst:70
msgid "Set your GOPATH"
msgstr ""

#: ../../source/dev-setup/devenv.rst:72
msgid ""
"Make sure you have properly setup your Host's `GOPATH environment variable "
"<https://github.com/golang/go/wiki/GOPATH>`__. This allows for both building"
" within the Host and the VM."
msgstr ""

#: ../../source/dev-setup/devenv.rst:76
msgid ""
"In case you installed Go into a different location from the standard one "
"your Go distribution assumes, make sure that you also set `GOROOT "
"environment variable <https://golang.org/doc/install#install>`__."
msgstr ""

#: ../../source/dev-setup/devenv.rst:81
msgid "Note to Windows users"
msgstr ""

#: ../../source/dev-setup/devenv.rst:83
msgid ""
"If you are running Windows, before running any ``git clone`` commands, run "
"the following command."
msgstr ""

#: ../../source/dev-setup/devenv.rst:90
msgid ""
"If ``core.autocrlf`` is set to ``true``, you must set it to ``false`` by "
"running"
msgstr ""

#: ../../source/dev-setup/devenv.rst:97
msgid ""
"If you continue with ``core.autocrlf`` set to ``true``, the ``vagrant up`` "
"command will fail with the error:"
msgstr ""

#: ../../source/dev-setup/devenv.rst:100
msgid ""
"``./setup.sh: /bin/bash^M: bad interpreter: No such file or directory``"
msgstr ""

#: ../../source/dev-setup/devenv.rst:103
msgid "Cloning the Hyperledger Fabric source"
msgstr ""

#: ../../source/dev-setup/devenv.rst:105
msgid ""
"Since Hyperledger Fabric is written in ``Go``, you'll need to clone the "
"source repository to your $GOPATH/src directory. If your $GOPATH has "
"multiple path components, then you will want to use the first one. There's a"
" little bit of setup needed:"
msgstr ""

#: ../../source/dev-setup/devenv.rst:116
msgid ""
"Recall that we are using ``Gerrit`` for source control, which has its own "
"internal git repositories. Hence, we will need to clone from :doc:`Gerrit "
"<../Gerrit/gerrit>`. For brevity, the command is as follows:"
msgstr ""

#: ../../source/dev-setup/devenv.rst:125
msgid ""
"**Note:** Of course, you would want to replace ``LFID`` with your own "
":doc:`Linux Foundation ID <../Gerrit/lf-account>`."
msgstr ""

#: ../../source/dev-setup/devenv.rst:129
msgid "Bootstrapping the VM using Vagrant"
msgstr ""

#: ../../source/dev-setup/devenv.rst:131
msgid ""
"If you are planning on using the Vagrant developer environment, the "
"following steps apply. **Again, we recommend against its use except for "
"developers that are limited to older versions of macOS and Windows that are "
"not supported by Docker for Mac or Windows.**"
msgstr ""

#: ../../source/dev-setup/devenv.rst:141
msgid ""
"Go get coffee... this will take a few minutes. Once complete, you should be "
"able to ``ssh`` into the Vagrant VM just created."
msgstr ""

#: ../../source/dev-setup/devenv.rst:148
msgid ""
"Once inside the VM, you can find the source under "
"``$GOPATH/src/github.com/hyperledger/fabric``. It is also mounted as "
"``/hyperledger``."
msgstr ""

#: ../../source/dev-setup/devenv.rst:155
msgid ""
"Once you have all the dependencies installed, and have cloned the "
"repository, you can proceed to :doc:`build and test <build>` Hyperledger "
"Fabric."
msgstr ""

#: ../../source/dev-setup/devenv.rst:160
msgid "Notes"
msgstr ""

#: ../../source/dev-setup/devenv.rst:162
msgid ""
"**NOTE:** Any time you change any of the files in your local fabric "
"directory (under ``$GOPATH/src/github.com/hyperledger/fabric``), the update "
"will be instantly available within the VM fabric directory."
msgstr ""

#: ../../source/dev-setup/devenv.rst:166
msgid ""
"**NOTE:** If you intend to run the development environment behind an HTTP "
"Proxy, you need to configure the guest so that the provisioning process may "
"complete. You can achieve this via the *vagrant-proxyconf* plugin. Install "
"with ``vagrant plugin install vagrant-proxyconf`` and then set the "
"VAGRANT\\_HTTP\\_PROXY and VAGRANT\\_HTTPS\\_PROXY environment variables "
"*before* you execute ``vagrant up``. More details are available here: "
"https://github.com/tmatilai/vagrant-proxyconf/"
msgstr ""

#: ../../source/dev-setup/devenv.rst:174
msgid ""
"**NOTE:** The first time you run this command it may take quite a while to "
"complete (it could take 30 minutes or more depending on your environment) "
"and at times it may look like it's not doing anything. As long you don't get"
" any error messages just leave it alone, it's all good, it's just cranking."
msgstr ""

#: ../../source/dev-setup/devenv.rst:180
msgid ""
"**NOTE to Windows 10 Users:** There is a known problem with vagrant on "
"Windows 10 (see `hashicorp/vagrant#6754 "
"<https://github.com/hashicorp/vagrant/issues/6754>`__). If the ``vagrant "
"up`` command fails it may be because you do not have the Microsoft Visual "
"C++ Redistributable package installed. You can download the missing package "
"at the following address: http://www.microsoft.com/en-"
"us/download/details.aspx?id=8328"
msgstr ""

#: ../../source/dev-setup/devenv.rst:188
msgid ""
"**NOTE:** The inclusion of the miekg/pkcs11 package introduces an external "
"dependency on the ltdl.h header file during a build of fabric. Please ensure"
" your libtool and libltdl-dev packages are installed. Otherwise, you may get"
" a ltdl.h header missing error. You can download the missing package by "
"command: ``sudo apt-get install -y build-essential git make curl unzip g++ "
"libtool``."
msgstr ""
