# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, hyperledger
# This file is distributed under the same license as the hyperledger-fabricdocs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# zhonghui  geng <396071808@qq.com>, 2019
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: hyperledger-fabricdocs master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-01 12:09+0800\n"
"PO-Revision-Date: 2019-04-22 20:01+0000\n"
"Last-Translator: zhonghui  geng <396071808@qq.com>, 2019\n"
"Language-Team: Chinese (China) (https://www.transifex.com/hyperledger/teams/97220/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../source/tutorial/commercial_paper.md:1
msgid "Commercial paper tutorial"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:3
msgid ""
"Audience: Architects, application and smart contract developers, "
"administrators"
msgstr "受众 ：架构师、应用程序和智能合约开发者、管理员。"

#: ../../source/tutorial/commercial_paper.md:6
msgid ""
"This tutorial will show you how to install and use a commercial paper sample"
" application and smart contract. It is a task-oriented topic, so it "
"emphasizes procedures above concepts. When you’d like to understand the "
"concepts in more detail, you can read the Developing Applications topic."
msgstr ""
"本教程会知道你怎么样安装使用一个商业票据的应用和智能合约。它是一个面向任务的主题，所以它强调过程而不是概念。当您想更详细地理解这些概念时，您可以阅读“应用程序开发”主题。"

#: ../../source/tutorial/commercial_paper.md:12
msgid ""
"In this tutorial two organizations, MagnetoCorp and DigiBank, trade "
"commercial paper with each other using PaperNet, a Hyperledger Fabric "
"blockchain network."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:16
msgid ""
"Once you've set up a basic network, you'll act as Isabella, an employee of "
"MagnetoCorp, who will issue a commercial paper on its behalf. You'll then "
"switch hats to take the role of Balaji, an employee of DigiBank, who will "
"buy this commercial paper, hold it for a period of time, and then redeem it "
"with MagnetoCorp for a small profit."
msgstr ""
"一旦你建立了一个基本的网络，你将扮演伊莎贝拉（Isabella），她是磁石公司的一名员工，将代表磁石公司发行一份商业票据。然后，你将转换角色，扮演电子银行(DigiBank)的员工巴拉吉(Balaji)，他将购买这张商业票据，持有一段时间，然后跟MagnetoCorp兑换一小笔利润。"

#: ../../source/tutorial/commercial_paper.md:22
msgid ""
"You'll act as an developer, end user, and administrator, each in different "
"organizations, performing the following steps designed to help you "
"understand what it's like to collaborate as two different organizations "
"working independently, but according to mutually agreed rules in a "
"Hyperledger Fabric network."
msgstr ""
"您将扮演不同组织中的开发人员、最终用户和管理员的角色，执行以下步骤，这些步骤旨在帮助您理解作为两个独立工作的不同组织协作是什么样子的，但是要根据超级账本网络中相互同意的规则进行协作。"

#: ../../source/tutorial/commercial_paper.md:28
msgid "Set up machine and download samples"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:29
msgid "Create a network"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:30
msgid "Understand the structure of a smart contract"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:31
msgid ""
"Work as an organization, MagnetoCorp, to install and instantiate smart "
"contract"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:34
msgid ""
"Understand the structure of a MagnetoCorp application, including its "
"dependencies"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:37
msgid "Configure and use a wallet and identities"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:38
msgid "Run a MagnetoCorp application to issue a commercial paper"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:40
msgid ""
"Understand how a second organization, Digibank, uses the smart contract in "
"their applications"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:42
msgid "As Digibank, run applications that buy and redeem commercial paper"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:45
msgid ""
"This tutorial has been tested on MacOS and Ubuntu, and should work on other "
"Linux distributions. A Windows version is under development."
msgstr "本教程已经在MacOS和Ubuntu上进行了测试，应该可以在其他Linux发行版上使用。Windows版本正在开发中。"

#: ../../source/tutorial/commercial_paper.md:48
msgid "Prerequisites"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:50
msgid ""
"Before you start, you must install some prerequisite technology required by "
"the tutorial. We've kept these to a minimum so that you can get going "
"quickly."
msgstr "在开始之前，您必须安装本教程所需的一些必备技术软件。我们已经把这些降到最低，这样你就可以快速开始了。"

#: ../../source/tutorial/commercial_paper.md:53
msgid "You must have the following technologies installed:"
msgstr "你必须安装以下技术软件:"

#: ../../source/tutorial/commercial_paper.md:55
msgid ""
"Node version 8.9.0, or higher. Node is a JavaScript runtime that you can use"
" to run applications and smart contracts. You are recommended to use the LTS"
" (Long Term Support) version of node. Install node here."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:61
msgid ""
"Docker version 18.06, or higher. Docker help developers and administrators "
"create standard environments for building and running applications and smart"
" contracts. Hyperledger Fabric is provided as a set of Docker images, and "
"the PaperNet smart contract will run in a docker container. Install Docker "
"here."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:68
msgid "You will find it helpful to install the following technologies:"
msgstr "你会发现安装以下技术软件很有帮助:"

#: ../../source/tutorial/commercial_paper.md:70
msgid ""
"A source code editor, such as Visual Studio Code version 1.28, or higher. VS"
" Code will help you develop and test your application and smart contract. "
"Install VS Code here."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:75
msgid ""
"Many excellent code editors are available including Atom, Sublime Text and "
"Brackets."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:79
msgid ""
"You may find it helpful to install the following technologies as you become "
"more experienced with application and smart contract development. There's no"
" requirement to install these when you first run the tutorial:"
msgstr "随着您对应用程序和智能合约开发越来越有经验，您可能会发现安装以下技术很有帮助。当你第一次运行教程时，不需要安装这些:"

#: ../../source/tutorial/commercial_paper.md:83
msgid ""
"Node Version Manager. NVM helps you easily switch between different versions"
" of node -- it can be really helpful if you're working on multiple projects "
"at the same time. Install NVM here."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:88
msgid "Download samples"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:90
msgid ""
"The commercial paper tutorial is one of the Hyperledger Fabric samples held "
"in a public GitHub repository called fabric-samples. As you're going to run "
"the tutorial on your machine, your first task is to download the fabric-"
"samples repository."
msgstr ""
"商业票据教程是一个名为fabric -samples的公共GitHub仓库中保存的超级账本示例之一。在您的机器上运行本教程时"
"，您的第一个任务是下载fabric-samples仓库。"

#: ../../source/tutorial/commercial_paper.md:96
msgid "Download the fabric-samples GitHub repository to your local machine."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:99
msgid ""
"$GOPATH is an important environment variable in Hyperledger Fabric; it "
"identifies the root directory for installation. It is important to get right"
" no matter which programming language you're using! Open a new terminal "
"window and check your $GOPATH is set using the env command:"
msgstr ""
"$GOPATH是超级账本中的一个重要环境变量;它标识要安装的根目录。正确使用任何一种编程语言都是非常重要的!打开一个新的终端窗口，使用env命令检查$GOPATH是否已设置:"

#: ../../source/tutorial/commercial_paper.md:113
msgid "Use the following instructions if your $GOPATH is not set."
msgstr "如果没有设置$GOPATH，请使用以下说明"

#: ../../source/tutorial/commercial_paper.md:117
msgid ""
"You can now create a directory relative to $GOPATH where fabric-samples will"
" be installed:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:125
msgid ""
"Use the git clone command to copy fabric-samples repository to this "
"location:"
msgstr "使用git克隆命令将fabric-samples库复制到这个位置:"

#: ../../source/tutorial/commercial_paper.md:133
msgid "Feel free to examine the directory structure of fabric-samples:"
msgstr "请随意检查fabric-samples的目录结构"

#: ../../source/tutorial/commercial_paper.md:147
msgid ""
"Notice the commercial-paper directory -- that's where our sample is located!"
msgstr "请注意商业票据目录——这就是我们的示例所在的位置!"

#: ../../source/tutorial/commercial_paper.md:149
msgid ""
"You've now completed the first stage of the tutorial! As you proceed, you'll"
" open multiple command windows open for different users and components. For "
"example:"
msgstr "您现在已经完成了教程的第一阶段!在继续操作时，将为不同的用户和组件打开多个命令窗口。例如:"

#: ../../source/tutorial/commercial_paper.md:153
msgid ""
"to run applications on behalf of Isabella and Balaji who will trade "
"commercial paper with each other"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:155
msgid ""
"to issue commands to on behalf of administrators from MagnetoCorp and "
"DigiBank, including installing and instantiating smart contracts"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:157
msgid "to show peer, orderer and CA log output"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:159
msgid ""
"We'll make it clear when you should run a command from particular command "
"window; for example:"
msgstr "我们将清楚地说明什么时候应该从特定的命令窗口运行命令;例如"

#: ../../source/tutorial/commercial_paper.md:166
msgid "indicates that you should run the ls command from Isabella's window."
msgstr "指示您应该从Isabella的窗口运行ls命令。"

#: ../../source/tutorial/commercial_paper.md:168
msgid "Create network"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:170
msgid ""
"The tutorial currently uses the basic network; it will be updated soon to a "
"configuration which better reflects the multi-organization structure of "
"PaperNet. For now, this network is sufficient to show you how to develop an "
"application and smart contract."
msgstr ""
"本教程目前使用的基本网络;它将很快更新到一个配置，更好地反映了PaperNet的多组织结构。目前，这个网络足以向您展示如何开发应用程序和智能合约。"

#: ../../source/tutorial/commercial_paper.md:175
msgid ""
"The Hyperledger Fabric basic network comprises a peer and its ledger "
"database, an orderer and a certificate authority (CA). Each of these "
"components runs as a docker container."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:180
msgid ""
"The peer, its ledger, the orderer and the CA each run in the their own "
"docker container. In production environments, organizations typically use "
"existing CAs that are shared with other systems; they're not dedicated to "
"the Fabric network."
msgstr ""
"peer节点、它的分类账、orderer节点和CA都在各自的docker容器中运行。在生产环境中，组织通常使用与其他系统共享的现有ca;他们并不专注于Fabric网络。"

#: ../../source/tutorial/commercial_paper.md:185
msgid ""
"You can manage the basic network using the commands and configuration "
"included in the fabric-samples\\basic-network directory. Let's start the "
"network on your local machine with the start.sh shell script:"
msgstr ""
"您可以使用fabric-samples\\basic-network目录中包含的命令和配置来管理基本网络。让我们使用start.sh "
"shell脚本启动本地机器上的网络："

#: ../../source/tutorial/commercial_paper.md:224
msgid ""
"Notice how the docker-compose -f docker-compose.yml up -d ca.example.com... "
"command pulls the four Hyperledger Fabric container images from DockerHub, "
"and then starts them. These containers have the most up-to-date version of "
"the software for these Hyperledger Fabric components. Feel free to explore "
"the basic-network directory -- we'll use much of its contents during this "
"tutorial."
msgstr ""
"注意docker-compose -f docker-compose.yml up -d ca.example.com... "
"…命令如何从DockerHub中提取四个超级账本容器映像，然后启动它们。这些容器拥有用于这些超级账本组件的软件的最新版本。请随意探索basic-"
"network目录——在本教程中，我们将使用它的大部分内容。"

#: ../../source/tutorial/commercial_paper.md:231
msgid ""
"You can list the docker containers that are running the basic-network "
"components using the docker ps command:"
msgstr "您可以使用docker ps命令列出运行基本网络组件的docker容器"

#: ../../source/tutorial/commercial_paper.md:244
msgid ""
"See if you can map these containers to the basic-network (you may need to "
"horizontally scroll to locate the information):"
msgstr "看看你是否可以将这些容器映射到基本网络(你可能需要水平滚动来定位信息):"

#: ../../source/tutorial/commercial_paper.md:247
msgid "A peer peer0.org1.example.com is running in container ada3d078989b"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:248
msgid "An orderer orderer.example.com is running in container 1fa1fd107bfb"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:249
msgid "A CouchDB database couchdb is running in container 53fe614274f7"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:250
msgid "A CA ca.example.com is running in container 469201085a20"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:252
msgid ""
"These containers all form a docker network called net_basic. You can view "
"the network with the docker network command:"
msgstr "这些容器都来自一个名为net_basic的docker网络。您可以使用docker network命令查看网络:"

#: ../../source/tutorial/commercial_paper.md:284
msgid ""
"See how the four containers use different IP addresses, while being part of "
"a single docker network. (We've abbreviated the output for clarity.)"
msgstr "查看作为单个docker网络的一部分，这四个容器如何使用不同的IP地址。(为了清晰起见，我们将输出缩短了。)"

#: ../../source/tutorial/commercial_paper.md:287
msgid ""
"To recap: you've downloaded the Hyperledger Fabric samples repository from "
"GitHub and you've got the basic network running on your local machine. Let's"
" now start to play the role of MagnetoCorp, who wish to trade commercial "
"paper."
msgstr ""
"回顾一下:您已经从GitHub下载了Hyperledger "
"Fabric样例库，并且已经在本地机器上运行了基本网络。现在让我们开始扮演磁石公司的角色，他们希望交易商业票据。"

#: ../../source/tutorial/commercial_paper.md:291
msgid "Working as MagnetoCorp"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:293
msgid ""
"To monitor the MagnetoCorp components of PaperNet, an administrator can view"
" the aggregated output from a set of docker containers using the logspout "
"tool. It collects the different output streams into one place, making it "
"easy to see what's happening from a single window. This can be really "
"helpful for administrators when installing smart contracts or for developers"
" when invoking smart contracts, for example."
msgstr ""
"要监视PaperNet的MagnetoCorp组件，管理员可以使用logspout工具查看一组docker容器的聚合输出。它将不同的输出流收集到一个地方，这样就可以很容易地从一个窗口看到发生了什么。这对于管理员在安装智能合约或开发人员在调用智能合约时非常有用。"

#: ../../source/tutorial/commercial_paper.md:301
msgid ""
"Let's now monitor PaperNet as a MagnetoCorp administrator. Open a new window"
" in the fabric-samples directory, and locate and run the monitordocker.sh "
"script to start the logspout tool for the PaperNet docker containers "
"associated with the docker network net_basic:"
msgstr ""
"现在让我们以MagnetoCorp管理员的身份监视PaperNet。打开fabric-"
"samples目录中的一个新窗口，找到并运行monitordocker.sh脚本，用来启动与docker网络net_basic关联的PaperNet "
"docker容器的logspout工具:"

#: ../../source/tutorial/commercial_paper.md:318
msgid ""
"Note that you can pass a port number to the above command if the default "
"port in monitordocker.sh is already in use."
msgstr "注意，如果monitordocker.sh中的默认端口已经在使用，那么可以将端口号传递给上面的命令。"

#: ../../source/tutorial/commercial_paper.md:323
msgid ""
"This window will now show output from the docker containers, so let's start "
"another terminal window which will allow the MagnetoCorp administrator to "
"interact with the network."
msgstr "这个窗口现在将显示docker容器的输出，所以让我们启动另一个终端窗口，它将允许MagnetoCorp管理员与网络交互。"

#: ../../source/tutorial/commercial_paper.md:327
msgid ""
"A MagnetoCorp administrator interacts with the network via a docker "
"container."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:330
msgid ""
"To interact with PaperNet, a MagnetoCorp administrator needs to use the "
"Hyperledger Fabric peer commands. Conveniently, these are available pre-"
"built in the hyperledger/fabric-tools docker image."
msgstr ""
"为了与PaperNet交互，MagnetoCorp管理员需要使用超级账本peer命令。方便的是，这些都可以在hyperledger/fabric-"
"tools docker镜像中预先构建。"

#: ../../source/tutorial/commercial_paper.md:335
msgid ""
"Let's start a MagnetoCorp-specific docker container for the administrator "
"using the docker-compose command:"
msgstr "让我们使用docker-compose命令为管理员启动一个特定于magnetocorp的docker容器:"

#: ../../source/tutorial/commercial_paper.md:351
msgid ""
"Again, see how the hyperledger/fabric-tools docker image was retrieved from "
"Docker Hub and added to the network:"
msgstr "再次，查看如何从Docker Hub检索到hyperledger/fabric-tools docker镜像并添加到网络中:"

#: ../../source/tutorial/commercial_paper.md:366
msgid ""
"The MagnetoCorp administrator will use the command line in container "
"562a88b25149 to interact with PaperNet. Notice also the logspout container "
"b7f3586e5d02; this is capturing the output of all other docker containers "
"for the monitordocker.sh command."
msgstr ""
"MagnetoCorp管理员将使用容器562a88b25149中的命令行与PaperNet交互。还要注意logspout容器b7f3586e5d02;这是为monitordocker.sh命令捕获所有其他docker容器的输出。"

#: ../../source/tutorial/commercial_paper.md:371
msgid ""
"Let's now use this command line to interact with PaperNet as the MagnetoCorp"
" administrator."
msgstr "现在让我们使用这个命令行作为MagnetoCorp管理员与PaperNet进行交互。"

#: ../../source/tutorial/commercial_paper.md:374
msgid "Smart contract"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:376
msgid ""
"issue, buy and redeem are the three functions at the heart of the PaperNet "
"smart contract. It is used by applications to submit transactions which "
"correspondingly issue, buy and redeem commercial paper on the ledger. Our "
"next task is to examine this smart contract."
msgstr ""
"issue、buy和redeem是PaperNet智能合同的三个核心功能。它被应用于在账本上提交发行、购买和赎回商业票据的交易。我们的下一个任务是研究这个智能合约。"

#: ../../source/tutorial/commercial_paper.md:381
msgid ""
"Open a new terminal window to represent a MagnetoCorp developer and change "
"to the directory that contains MagnetoCorp's copy of the smart contract to "
"view it with your chosen editor (VS Code in this tutorial):"
msgstr ""
"打开一个代表MagnetoCorp开发人员的新终端窗口，并切换到包含MagnetoCorp的智能合约副本的目录，使用您选择的编辑器查看它(本教程中使用VS"
" Code):"

#: ../../source/tutorial/commercial_paper.md:390
msgid ""
"In the lib directory of the folder, you'll see papercontract.js file -- this"
" contains the commercial paper smart contract!"
msgstr "在文件夹的lib目录中，您将看到papercontract.js文件——它包含了商业票据的智能合约!"

#: ../../source/tutorial/commercial_paper.md:393
msgid ""
"An example code editor displaying the commercial paper smart contract in "
"papercontract.js"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:396
msgid ""
"papercontract.js is a JavaScript program designed to run in the node.js "
"environment. Note the following key program lines:"
msgstr "papercontract.js是一个JavaScript程序，设计用于运行在node.js环境中。注意以下关键程序行:"

#: ../../source/tutorial/commercial_paper.md:399
msgid "const { Contract, Context } = require('fabric-contract-api');"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:401
msgid ""
"This statement brings into scope two key Hyperledger Fabric classes that "
"will be used extensively by the smart contract  -- Contract and Context. You"
" can learn more about these classes in the fabric-shim JSDOCS."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:407
msgid "class CommercialPaperContract extends Contract {"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:409
msgid ""
"This defines the smart contract class CommercialPaperContract based on the "
"built-in Fabric Contract class.  The methods which implement the key "
"transactions to issue, buy and redeem commercial paper are defined within "
"this class."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:415
msgid ""
"async issue(ctx, issuer, paperNumber, issueDateTime, maturityDateTime...) {"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:417
msgid ""
"This method defines the commercial paper issue transaction for PaperNet. The"
" parameters that are passed to this method will be used to create the new "
"commercial paper."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:421
msgid ""
"Locate and examine the buy and redeem transactions within the smart "
"contract."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:425
msgid ""
"let paper = CommercialPaper.createInstance(issuer, paperNumber, "
"issueDateTime...);"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:427
msgid ""
"Within the issue transaction, this statement creates a new commercial paper "
"in memory using the CommercialPaper class with the supplied transaction "
"inputs. Examine the buy and redeem transactions to see how they similarly "
"use this class."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:433
msgid "await ctx.paperList.addPaper(paper);"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:435
msgid ""
"This statement adds the new commercial paper to the ledger using "
"ctx.paperList, an instance of a PaperList class that was created when the "
"smart contract context CommercialPaperContext was initialized. Again, "
"examine the buy and redeem methods to see how they use this class."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:441
msgid "return paper.toBuffer();"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:443
msgid ""
"This statement returns a binary buffer as response from the issue "
"transaction for processing by the caller of the smart contract."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:447
msgid ""
"Feel free to examine other files in the contract directory to understand how"
" the smart contract works, and read in detail how papercontract.js is "
"designed in the smart contract topic."
msgstr "请随意查看合同目录中的其他文件，以了解智能合约是如何工作的，并在智能合约主题中详细阅读papercontract.js是如何设计的。"

#: ../../source/tutorial/commercial_paper.md:451
msgid "Install contract"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:453
msgid ""
"Before papercontract can be invoked by applications, it must be installed "
"onto the appropriate peer nodes in PaperNet.  MagnetoCorp and DigiBank "
"administrators are able to install papercontract onto peers over which they "
"respectively have authority."
msgstr ""
"在应用程序调用papercontract之前，必须将其安装到PaperNet中适当的peer节点上。磁石集团(MagnetoCorp)和数字银行(DigiBank)的管理人员可以向各自拥有权限的peer节点上安装papercontract。"

#: ../../source/tutorial/commercial_paper.md:458
msgid ""
"A MagnetoCorp administrator installs a copy of the papercontract onto a "
"MagnetoCorp peer."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:461
msgid ""
"Smart contracts are the focus of application development, and are contained "
"within a Hyperledger Fabric artifact called chaincode. One or more smart "
"contracts can be defined within a single chaincode, and installing a "
"chaincode will allow them to be consumed by the different organizations in "
"PaperNet.  It means that only administrators need to worry about chaincode; "
"everyone else can think in terms of smart contracts."
msgstr ""
"智能合约是应用程序开发的重点，它包含在一个名为chaincode的超级账本构件中。一个或多个智能合约可以在一个链码中定义，安装一个链码将允许PaperNet中的不同组织使用它们。这意味着只有管理员才需要担心链码;每个人都可以用智能合约来行事。"

#: ../../source/tutorial/commercial_paper.md:468
msgid ""
"The MagnetoCorp administrator uses the peer chaincode install command to "
"copy the papercontract smart contract from their local machine's file system"
" to the file system within the target peer's docker container. Once the "
"smart contract is installed on the peer and instantiated on a channel, "
"papercontract can be invoked by applications, and interact with the ledger "
"database via the putState() and getState() Fabric APIs. Examine how these "
"APIs are used by StateList class within ledger-api\\statelist.js."
msgstr ""
"MagnetoCorp管理员使用peer chaincode "
"install命令将papercontract智能合约从本地机器的文件系统复制到目标peer节点的docker容器中的文件系统。一旦智能合约安装在peer节点上并在通道上实例化，应用程序就可以调用papercontract，并通过putState()和getState()"
" 这样的Fabric APIs与账本数据库交互。检查这些api是如何被ledger-api\\state .js中的StateList类使用的。"

#: ../../source/tutorial/commercial_paper.md:480
msgid ""
"Let's now install papercontract as the MagnetoCorp administrator. In the "
"MagnetoCorp administrator's command window, use the docker exec command to "
"run the peer chaincode install command in the cliMagnetCorp container:"
msgstr ""
"现在让我们以MagnetoCorp管理员的身份安装papercontract。在MagnetoCorp "
"administrator的命令窗口中，使用docker exec命令在cliMagnetCorp容器中运行peer chaincode "
"install命令:"

#: ../../source/tutorial/commercial_paper.md:492
msgid ""
"The cliMagnetCorp container has set "
"CORE_PEER_ADDRESS=peer0.org1.example.com:7051 to target its commands to "
"peer0.org1.example.com, and the INFO 003 Installed remotely... indicates "
"papercontract has been successfully installed on this peer. Currently, the "
"MagnetoCorp administrator only has to install a copy of papercontract on a "
"single MagentoCorp peer."
msgstr ""
"cliMagnetCorp容器已经将CORE_PEER_ADDRESS=peer0.org1.example.com:7051设置为将其命令指向peer0.org1.example.com，并且远程安装了INFO"
" "
"003…表明papercontract已成功安装到此peer节点。目前，MagentoCorp的管理人员只需在MagentoCorp的一个peer节点上安装一份papercontract合约。"

#: ../../source/tutorial/commercial_paper.md:499
msgid ""
"Note how peer chaincode install command specified the smart contract path, "
"-p, relative to the cliMagnetoCorp container's file system: "
"/opt/gopath/src/github.com/contract. This path has been mapped to the local "
"file system path .../organization/magnetocorp/contract via the "
"magnetocorp/configuration/cli/docker-compose.yml file:"
msgstr ""
"请注意peer chaincode install命令如何指定智能合约的路径，-p，与cliMagnetoCorp容器的文件系统相关: "
"/opt/gopath/src/github.com/contract。此路径已映射到本地文件系统路径.../organization/magnetocorp/contract。通过magnetocorp/configuration/cli"
"/docker-compose.yml文件:"

#: ../../source/tutorial/commercial_paper.md:512
msgid ""
"See how the volume directive maps organization/magnetocorp to "
"/opt/gopath/src/github.com/ providing this container access to your local "
"file system where MagnetoCorp's copy of the papercontract smart contract is "
"held."
msgstr ""
"查看volume指令如何将 "
"organization/magnetocorp映射到/opt/gopath/src/github.com/，从而提供对本地文件系统的容器访问，其中保存了magnetocorp的papercontract智能合约副本。"

#: ../../source/tutorial/commercial_paper.md:516
msgid ""
"You can read more about docker compose here and peer chaincode install "
"command here."
msgstr "您可以在这里阅读更多关于docker compose和peer chaincode install 命令。"

#: ../../source/tutorial/commercial_paper.md:520
msgid "Instantiate contract"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:522
msgid ""
"Now that papercontract chaincode containing the CommercialPaper smart "
"contract is installed on the required PaperNet peers, an administrator can "
"make it available to different network channels, so that it can be invoked "
"by applications connected to those channels. Because we're using the basic "
"network configuration for PaperNet, we're only going to make papercontract "
"available in a single network channel, mychannel."
msgstr ""
"现在，包含商业票据智能合约的papercontract链码已安装在所需的PaperNet的peer节点上，管理员可以将其提供给不同的网络通道，以便连接到这些通道的应用程序可以调用它。因为我们使用的是PaperNet的基本网络配置，所以我们只在一个网络通道mychannel中提供papercontract。"

#: ../../source/tutorial/commercial_paper.md:529
msgid ""
"A MagnetoCorp administrator instantiates papercontract chaincode containing "
"the smart contract. A new docker chaincode container will be created to run "
"papercontract."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:534
msgid ""
"The MagnetoCorp administrator uses the peer chaincode instantiate command to"
" instantiate papercontract on mychannel:"
msgstr ""
"MagnetoCorp管理员使用peer chaincode instantiate命令在mychannel上实例化papercontract:"

#: ../../source/tutorial/commercial_paper.md:544
msgid "This command may take a few minutes to complete."
msgstr "这个命令可能需要几分钟才能完成。"

#: ../../source/tutorial/commercial_paper.md:546
msgid ""
"One of the most important parameters on instantiate is -P. It specifies the "
"endorsement policy for papercontract, describing the set of organizations "
"that must endorse (execute and sign) a transaction before it can be "
"determined as valid. All transactions, whether valid or invalid, will be "
"recorded on the ledger blockchain, but only valid transactions will update "
"the world state."
msgstr ""
"实例化中最重要的参数之一是-P。它指定了papercontract的背书策略，描述了一组必须在确定交易有效之前对其进行背书(执行和签署)的组织。所有的交易，无论是有效的还是无效的，都将被记录在账本区块链上，但是只有有效的交易才会更新世界状态。"

#: ../../source/tutorial/commercial_paper.md:554
msgid ""
"In passing, see how instantiate passes the orderer address "
"orderer.example.com:7050. This is because it additionally submits an "
"instantiate transaction to the orderer, which will include the transaction "
"in the next block and distribute the transaction to all peers that have "
"joined mychannel, enabling any peer to execute the chaincode in their own "
"isolated chaincode container. Note that instantiate only needs to be issued "
"once for the channel where papercontract will run even though typically it "
"is installed on many peers."
msgstr ""
"在传递过程中，请查看实例化如何传递orderer地址orderer.example.com:7050。这是因为它还向orderer提交了一个实例化事务，orderer将在下一个块中包含该事务，并将该事务分发给已经加入mychannel的所有peer，从而使任何peer都能够在自己的隔离的chaincode容器中执行chaincode。注意，实例化只需要在papercontract将运行的通道发出一次，即使它通常安装在许多peer节点上。"

#: ../../source/tutorial/commercial_paper.md:563
msgid ""
"See how a papercontract container has been started with the docker ps "
"command:"
msgstr "使用docker ps命令查看一个papercontract容器如何被启动:"

#: ../../source/tutorial/commercial_paper.md:573
msgid ""
"Notice that the container is named dev-peer0.org1.example.com-"
"papercontract-0-d96... to indicate which peer started it, and the fact that "
"it's running papercontract version 0."
msgstr ""
"注意，容器名为dev-peer0.org1.example.com-"
"papercontract-0-d96…以指示是哪个peer节点启动了它，以及它正在运行papercontract version 0。"

#: ../../source/tutorial/commercial_paper.md:577
msgid ""
"Now that we've got a basic PaperNet up and running, and papercontract "
"installed and instantiated, let's turn our attention to the MagnetoCorp "
"application which issues a commercial paper."
msgstr ""
"现在我们已经建立并运行了一个基本的PaperNet，并且安装并实例化了papercontract，接下来让我们将注意力转向MagnetoCorp应用程序，它发行了一份商业票据。"

#: ../../source/tutorial/commercial_paper.md:581
msgid "Application structure"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:583
msgid ""
"The smart contract contained in papercontract is called by MagnetoCorp's "
"application issue.js. Isabella uses this application to submit a transaction"
" to the ledger which issues commercial paper 00001. Let's quickly examine "
"how the issue application works."
msgstr ""
"包含在papercontract中的智能合约被称为MagnetoCorp的应用 "
"issue.js。Isabella使用此应用程序向账本发出一笔交易，发行商业票据00001。让我们快速研究一下发行应用程序是如何工作的。"

#: ../../source/tutorial/commercial_paper.md:588
msgid ""
"A gateway allows an application to focus on transaction generation, "
"submission and response. It coordinates transaction proposal, ordering and "
"notification processing between the different network components."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:593
msgid ""
"Because the issue application submits transactions on behalf of Isabella, it"
" starts by retrieving Isabella's X.509 certificate from her wallet, which "
"might be stored on the local file system or a Hardware Security Module HSM. "
"The issue application is then able to utilize the gateway to submit "
"transactions on the channel. The Hyperledger Fabric SDK provides a gateway "
"abstraction so that applications can focus on application logic while "
"delegating network interaction to the gateway. Gateways and wallets make it "
"straightforward to write Hyperledger Fabric applications."
msgstr ""
"由于发行应用程序代表Isabella提交事务，它首先从Isabella的钱包中检索Isabella的X.509证书，该证书可能存储在本地文件系统或硬件安全模块HSM中。然后，发行应用程序可以利用网关在通道上提交事务。Hyperledger"
" Fabric SDK提供了一个抽象网关，这样应用程序可以在将网络交互委托给网关的同时专注于应用程序逻辑。网关和钱包使编写超级账应用程序变得很简单。"

#: ../../source/tutorial/commercial_paper.md:605
msgid ""
"So let's examine the issue application that Isabella is going to use. open a"
" separate terminal window for her, and in fabric-samples locate the "
"MagnetoCorp /application folder:"
msgstr ""
"让我们来看看伊莎贝拉将要使用的发行应用程序。为她打开一个单独的终端窗口，在fabric-samples中找到MagnetoCorp "
"/application文件夹:"

#: ../../source/tutorial/commercial_paper.md:616
msgid ""
"addToWallet.js is the program that Isabella is going to use to load her "
"identity into her wallet, and issue.js will use this identity to create "
"commercial paper 00001 on behalf of MagnetoCorp by invoking papercontract."
msgstr ""
"addToWalle.js是Isabella将用来将她的身份载入钱包的程序，而publish.js将通过调用papercontract来使用这个身份来代表MagnetoCorp创建商业票据00001。"

#: ../../source/tutorial/commercial_paper.md:620
msgid ""
"Change to the directory that contains MagnetoCorp's copy of the application "
"issue.js, and use your code editor to examine it:"
msgstr "更改为包含MagnetoCorp的应用程序issue.js的副本目录。，并使用你的代码编辑器来检查它:"

#: ../../source/tutorial/commercial_paper.md:628
msgid ""
"Examine this directory; it contains the issue application and all its "
"dependencies."
msgstr "检查该目录;它包含发行应用程序及其所有依赖项。"

#: ../../source/tutorial/commercial_paper.md:631
msgid ""
"A code editor displaying the contents of the commercial paper application "
"directory."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:634
msgid "Note the following key program lines in issue.js:"
msgstr "注意issue.js中的以下关键程序行:"

#: ../../source/tutorial/commercial_paper.md:636
msgid "const { FileSystemWallet, Gateway } = require('fabric-network');"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:638
msgid ""
"This statement brings two key Hyperledger Fabric SDK classes into scope -- "
"Wallet and Gateway. Because Isabella's X.509 certificate is in the local "
"file system, the application uses FileSystemWallet."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:643
msgid ""
"const wallet = new FileSystemWallet('../identity/user/isabella/wallet');"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:645
msgid ""
"This statement identifies that the application will use isabella wallet when"
" it connects to the blockchain network channel. The application will select "
"a particular identity within isabella wallet. (The wallet must have been "
"loaded with the Isabella's X.509 certificate -- that's what addToWallet.js "
"does.)"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:652
msgid "await gateway.connect(connectionProfile, connectionOptions);"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:654
msgid ""
"This line of code connects to the network using the gateway identified by "
"connectionProfile, using the identity referred to in ConnectionOptions."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:657
msgid ""
"See how ../gateway/networkConnection.yaml and User1@org1.example.com are "
"used for these values respectively."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:661
msgid "const network = await gateway.getNetwork('mychannel');"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:663
msgid ""
"This connects the application to the network channel mychannel, where the "
"papercontract was previously instantiated."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:667
msgid ""
"const contract = await network.getContract('papercontract', "
"'org.papernet.comm...');"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:669
msgid ""
"This statement gives the application addressability to smart contract "
"defined by the namespace org.papernet.commercialpaper within papercontract. "
"Once an application has issued getContract, it can submit any transaction "
"implemented within it."
msgstr ""
"此语句使应用程序可寻址到papercontract中的命名空间org.papernet.commercial "
"alpaper定义的智能合约。一旦应用程序发出getContract，它就可以提交在其中实现的任何事务。"

#: ../../source/tutorial/commercial_paper.md:675
msgid ""
"const issueResponse = await contract.submitTransaction('issue', "
"'MagnetoCorp', '00001'...);"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:677
msgid ""
"This line of code submits the a transaction to the network using the issue "
"transaction defined within the smart contract. MagnetoCorp, 00001... are the"
" values to be used by the issue transaction to create a new commercial "
"paper."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:682
msgid "let paper = CommercialPaper.fromBuffer(issueResponse);"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:684
msgid ""
"This statement processes the response from the issue transaction. The "
"response needs to deserialized from a buffer into paper, a CommercialPaper "
"object which can interpreted correctly by the application."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:689
msgid ""
"Feel free to examine other files in the /application directory to understand"
" how issue.js works, and read in detail how it is implemented in the "
"application topic."
msgstr "请随意检查/application目录中的其他文件，以了解issue.js是如何工作的，并详细阅读它在应用程序主题中是如何实现的"

#: ../../source/tutorial/commercial_paper.md:693
msgid "Application dependencies"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:695
msgid ""
"The issue.js application is written in JavaScript and designed to run in the"
" node.js environment that acts as a client to the PaperNet network. As is "
"common practice, MagnetoCorp's application is built on many external node "
"packages -- to improve quality and speed of development. Consider how "
"issue.js includes the js-yaml package to process the YAML gateway connection"
" profile, or the fabric-network package to access the Gateway and Wallet "
"classes:"
msgstr ""
"issues.js应用程序是用JavaScript编写的，设计运行在node.js环境中，充当PaperNet网络的客户端。与通常的做法一样，MagnetoCorp的应用程序构建在许多外部节点包之上——以提高开发的质量和速度。考虑一下problem"
".js是如何包含js-yaml包来处理YAML网关连接概要文件的，或者包含fabric-network包来访问网关和钱包类的:"

#: ../../source/tutorial/commercial_paper.md:710
msgid ""
"These packages have to be downloaded from npm to the local file system using"
" the npm install command. By convention, packages must be installed into an "
"application-relative /node_modules directory for use at runtime."
msgstr ""
"必须使用npm "
"install命令将这些包从npm下载到本地文件系统。按照惯例，必须将包安装到应用程序相关/node_modules目录中，以便在运行时使用。"

#: ../../source/tutorial/commercial_paper.md:715
msgid ""
"Examine the package.json file to see how issue.js identifies the packages to"
" download and their exact versions:"
msgstr "检查包装。查看issue.js如何识别要下载的包及其确切版本:"

#: ../../source/tutorial/commercial_paper.md:726
msgid "npm versioning is very powerful; you can read more about it here."
msgstr "npm版本控制非常强大;你可以在这里阅读更多。"

#: ../../source/tutorial/commercial_paper.md:729
msgid ""
"Let's install these packages with the npm install command -- this may take "
"up to a minute to complete:"
msgstr "让我们用npm install命令安装这些包——这可能需要一分钟来完成:"

#: ../../source/tutorial/commercial_paper.md:741
msgid "See how this command has updated the directory:"
msgstr "查看此命令如何更新目录:"

#: ../../source/tutorial/commercial_paper.md:750
msgid ""
"Examine the node_modules directory to see the packages that have been "
"installed. There are lots, because js-yaml and fabric-network are themselves"
" built on other npm packages! Helpfully, the package-lock.json file "
"identifies the exact versions installed, which can prove invaluable if you "
"want to exactly reproduce environments; to test, diagnose problems or "
"deliver proven applications for example."
msgstr ""
"检查node_modules目录，查看已安装的包。有很多，因为js-yaml和fabric-"
"network本身是建立在其他npm包之上的!有助的是，package_json文件标识所安装的确切版本，如果您想准确地重现环境，这将是非常宝贵的;例如，测试、诊断问题或交付经过验证的应用程序。"

#: ../../source/tutorial/commercial_paper.md:758
msgid "Wallet"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:760
msgid ""
"Isabella is almost ready to run issue.js to issue MagnetoCorp commercial "
"paper 00001; there's just one remaining task to perform! As issue.js acts on"
" behalf of Isabella, and therefore MagnetoCorp, it will use identity from "
"her wallet that reflects these facts. We now need to perform this one-time "
"activity of adding appropriate X.509 credentials to her wallet."
msgstr ""
"伊莎贝拉几乎准备好运行issue.js发行MagnetoCorp商业票据00001,只剩一项任务要做了!issue.js代表伊莎贝拉，因此磁石公司将使用她钱包里的身份来反映这些事实。现在，我们需要执行这个一次性活动，将适当的X.509凭证添加到她的钱包中。"

#: ../../source/tutorial/commercial_paper.md:767
msgid ""
"In Isabella's terminal window, run the addToWallet.js program to add "
"identity information to her wallet:"
msgstr "在Isabella的终端窗口中，运行addToWallet.js程序将身份信息添加到她的钱包中:"

#: ../../source/tutorial/commercial_paper.md:776
msgid ""
"Isabella can store multiple identities in her wallet, though in our example,"
" she only uses one -- User1@org.example.com. This identity is currently "
"associated with the basic network, rather than a more realistic PaperNet "
"configuration -- we'll update this tutorial soon."
msgstr ""
"Isabella可以在她的钱包中存储多个身份，但是在我们的示例中，她只使用一个——User1@org.example.com。这个身份目前与现在的基本网络相关，而不是更实际的PaperNet配置——我们将很快更新本教程。"

#: ../../source/tutorial/commercial_paper.md:781
msgid ""
"addToWallet.js is a simple file-copying program which you can examine at "
"your leisure. It moves an identity from the basic network sample to "
"Isabella's wallet. Let's focus on the result of this program -- the contents"
" of the wallet which will be used to submit transactions to PaperNet:"
msgstr ""
"addToWallet.js是一个简单的文件复制程序，您可以在空闲时查看。它从基本网络移动一个身份样本到Isabella的钱包。让我们关注一下这个程序的结果——用于向PaperNet提交交易的钱包的内容:"

#: ../../source/tutorial/commercial_paper.md:792
msgid ""
"See how the directory structure maps the User1@org1.example.com identity -- "
"other identities used by Isabella would have their own folder. Within this "
"directory you'll find the identity information that issue.js will use on "
"behalf of isabella:"
msgstr ""
"查看目录结构如何映射User1@org1.example.com身份标识——Isabella使用的其他标识将拥有自己的文件夹。在这个目录中，您将找到issue.js将代表isabella使用的身份信息:"

#: ../../source/tutorial/commercial_paper.md:804
msgid "Notice:"
msgstr "注意："

#: ../../source/tutorial/commercial_paper.md:806
msgid ""
"a private key c75bd6911a...-priv used to sign transactions on Isabella's "
"behalf, but not distributed outside of her immediate control."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:810
msgid ""
"a public key c75bd6911a...-pub which is cryptographically linked to "
"Isabella's private key. This is wholly contained within Isabella's X.509 "
"certificate."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:815
msgid ""
"a certificate User1@org.example.com which contains Isabella's public key and"
" other X.509 attributes added by the Certificate Authority at certificate "
"creation. This certificate is distributed to the network so that different "
"actors at different times can cryptographically verify information created "
"by Isabella's private key."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:821
msgid ""
"Learn more about certificates here. In practice, the certificate file also "
"contains some Fabric-specific metadata such as Isabella's organization and "
"role -- read more in the wallet topic."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:827
msgid "Issue application"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:829
msgid ""
"Isabella can now use issue.js to submit a transaction that will issue "
"MagnetoCorp commercial paper 00001:"
msgstr "Isabella现在可以使用issue.js提交一笔交易，该交易将发行MagnetoCorp的商业票据00001:"

#: ../../source/tutorial/commercial_paper.md:846
msgid ""
"The node command initializes a node.js environment, and runs issue.js. We "
"can see from the program output that MagnetoCorp commercial paper 00001 was "
"issued with a face value of 5M USD."
msgstr ""
"node命令初始化node.js环境，并运行issue.js。从程序输出可以看出，MagnetoCorp 商业票据 00001发行的面值为500万美元。"

#: ../../source/tutorial/commercial_paper.md:850
msgid ""
"As you've seen, to achieve this, the application invokes the issue "
"transaction defined in the CommercialPaper smart contract within "
"papercontract.js. This had been installed and instantiated in the network by"
" the MagnetoCorp administrator. It's the smart contract which interacts with"
" the ledger via the Fabric APIs, most notably putState() and getState(), to "
"represent the new commercial paper as a vector state within the world state."
" We'll see how this vector state is subsequently manipulated by the buy and "
"redeem transactions also defined within the smart contract."
msgstr ""
"如您所见，为了实现这一点，应用程序调用papercontract.js中的CommercialPaper智能合约中定义的发行事务。这是由MagnetoCorp管理员在网络中安装和实例化的。智能合约通过Fabric"
" "
"api与分类账本交互，最显著的是putState()和getState()，以表示新的商业票据作为世界状态中的向量状态。我们将看到这个向量状态是如何被smart合约中定义的buy和redeem事务控制的。"

#: ../../source/tutorial/commercial_paper.md:859
msgid ""
"All the time, the underlying Fabric SDK handles the transaction endorsement,"
" ordering and notification process, making the application's logic "
"straightforward; the SDK uses a gateway to abstract away network details and"
" connectionOptions to declare more advanced processing strategies such as "
"transaction retry."
msgstr ""
"底层Fabric "
"SDK始终处理事务背书、排序和通知过程，使应用程序的逻辑更加直观;SDK使用网关来抽象网络细节，connectionOptions来声明更高级的处理策略，比如事务重试。"

#: ../../source/tutorial/commercial_paper.md:866
msgid ""
"Let's now follow the lifecycle of MagnetoCorp 00001 by switching our "
"emphasis to DigiBank, who will buy the commercial paper."
msgstr "现在让我们跟随MagnetoCorp 00001的生命周期，将重点转向购买商业票据的DigiBank。"

#: ../../source/tutorial/commercial_paper.md:869
msgid "Working as DigiBank"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:871
msgid ""
"Now that commercial paper 00001has been issued by MagnetoCorp, let's switch "
"context to interact with PaperNet as employees of DigiBank. First, we'll act"
" as administrator who will create a console configured to interact with "
"PaperNet. Then Balaji, an end user, will use Digibank's buy application to "
"buy commercial paper 00001, moving it to the next stage in its lifecycle."
msgstr ""
"现在商业票据00001已经由MagnetoCorp发行，让我们切换上下文，作为DigiBank的员工与PaperNet进行交互。首先，我们将作为管理员创建一个配置为与PaperNet交互的控制台。然后，终端用户Balaji将使用Digibank的buy应用程序购买商业票据00001，将其移动到生命周期的下一个阶段。"

#: ../../source/tutorial/commercial_paper.md:877
msgid ""
"DigiBank administrators and applications interact with the PaperNet network."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:880
msgid ""
"As the tutorial currently uses the basic network for PaperNet, the network "
"configuration is quite simple. Administrators use a console similar to "
"MagnetoCorp, but configured for Digibank's file system. Likewise, Digibank "
"end users will use applications which invoke the same smart contract as "
"MagnetoCorp applications, though they contain Digibank-specific logic and "
"configuration. It's the smart contract which captures the shared business "
"process, and the ledger which holds the shared business data, no matter "
"which applications call them."
msgstr ""
"由于本教程目前使用的是PaperNet的基本网络，所以网络配置非常简单。管理员使用类似于MagnetoCorp的控制台，但配置为Digibank的文件系统。同样，digbank终端用户将使用与MagnetoCorp应用程序调用相同智能合约的应用程序，尽管它们包含的是digbank的逻辑和配置。智能合约捕获共享的业务流程，而分类账保存共享的业务数据，无论哪个应用程序调用它们。"

#: ../../source/tutorial/commercial_paper.md:889
msgid ""
"Let's open up a separate terminal to allow the DigiBank administrator to "
"interact with PaperNet. In fabric-samples:"
msgstr "让我们打开一个单独的终端，允许DigiBank管理员与PaperNet交互。在 fabric-samples中:"

#: ../../source/tutorial/commercial_paper.md:900
msgid ""
"This docker container is now available for Digibank administrators to "
"interact with the network:"
msgstr "Digibank银行管理人员现在可以使用这个docker容器与网络进行互动:"

#: ../../source/tutorial/commercial_paper.md:908
msgid ""
"In this tutorial, you'll use the command line container named cliDigiBank to"
" interact with the network on behalf of DigiBank. We've not shown all the "
"docker containers, and in the real world DigiBank users would only see the "
"network components (peers, orderers, CAs) to which they have access."
msgstr ""
"在本教程中，您将使用名为cliDigiBank的命令行容器代表DigiBank与网络进行交互。我们还没有显示所有docker容器，在现实世界中，digbank用户只能看到他们可以访问的网络组件(peers、orderers、ca)。"

#: ../../source/tutorial/commercial_paper.md:913
msgid ""
"Digibank's administrator doesn't have much to do in this tutorial right now "
"because the PaperNet network configuration is so simple. Let's turn our "
"attention to Balaji."
msgstr "由于PaperNet网络配置非常简单，所以digbank的管理员目前在本教程中没有什么要做的。让我们把注意力转向Balaji。"

#: ../../source/tutorial/commercial_paper.md:917
msgid "Digibank applications"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:919
msgid ""
"Balaji uses DigiBank's buy application to submit a transaction to the ledger"
" which transfers ownership of commercial paper 00001 from MagnetoCorp to "
"DigiBank. The CommercialPaper smart contract is the same as that used by "
"MagnetoCorp's application, however the transaction is different this time --"
" it's buy rather than issue. Let's examine how DigiBank's application works."
msgstr ""
"Balaji使用DigiBank的buy应用程序向超级账本提交一笔交易，该账本将商业票据00001的所有权从MagnetoCorp转移到DigiBank。商业票据智能合约与MagnetoCorp的应用程序使用的合约是一样的，但这次的交易不同——它是购买而不是发行。让我们来看看DigiBank的应用程序是如何工作的。"

#: ../../source/tutorial/commercial_paper.md:925
msgid ""
"Open a separate terminal window for Balaji. In fabric-samples, change to the"
" DigiBank application directory that contains the application, buy.js, and "
"open it with your editor:"
msgstr ""
"为Balaji打开一个单独的终端窗口。在fabric-samples中，切换到包含buy.js程序的DigiBank应用程序目录。然后用编辑器打开:"

#: ../../source/tutorial/commercial_paper.md:934
msgid ""
"As you can see, this directory contains both the buy and redeem applications"
" that will be used by Balaji."
msgstr "如您所见，这个目录包含Balaji将使用的buy和redeem应用程序。"

#: ../../source/tutorial/commercial_paper.md:939
msgid ""
"DigiBank's commercial paper directory containing the buy.js and redeem.js "
"applications."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:943
msgid ""
"DigiBank's buy.js application is very similar in structure to MagnetoCorp's "
"issue.js with two important differences:"
msgstr "DigiBank的buy.js应用程序在结构上与MagnetoCorp的issue.js非常相似，除了两点不同："

#: ../../source/tutorial/commercial_paper.md:947
msgid ""
"Identity: the user is a DigiBank user Balaji rather than MagnetoCorp's "
"Isabella"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:954
msgid ""
"See how the application uses the balaji wallet when it connects to the "
"PaperNet network channel. buy.js selects a particular identity within balaji"
" wallet."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:959
msgid "Transaction: the invoked transaction is buy rather than issue"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:965
msgid ""
"A buy transaction is submitted with the values MagnetoCorp, 00001..., that "
"are used by the CommercialPaper smart contract class to transfer ownership "
"of commercial paper 00001 to DigiBank."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:969
msgid ""
"Feel free to examine other files in the application directory to understand "
"how the application works, and read in detail how buy.js is implemented in "
"the application topic."
msgstr "请随意检查应用程序目录中的其他文件，以了解应用程序如何工作，并详细阅读应用程序主题中buy.js是如何实现的。"

#: ../../source/tutorial/commercial_paper.md:973
msgid "Run as DigiBank"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:975
msgid ""
"The DigiBank applications which buy and redeem commercial paper have a very "
"similar structure to MagnetoCorp's issue application. Therefore, let’s "
"install their dependencies and set up Balaji's wallet so that he can use "
"these applications to buy and redeem commercial paper."
msgstr ""
"购买和赎回商业票据的DigiBank应用程序与MagnetoCorp的发行应用程序具有非常相似的结构。因此，让我们安装它们的依赖项并设置Balaji的钱包，这样他就可以使用这些应用程序购买和赎回商业票据。"

#: ../../source/tutorial/commercial_paper.md:980
msgid ""
"Like MagnetoCorp, Digibank must the install the required application "
"packages using the npm install command, and again, this make take a short "
"time to complete."
msgstr "与MagnetoCorp一样，Digibank必须使用npm install命令安装所需的应用程序包，同样，这需要很短的时间来完成。"

#: ../../source/tutorial/commercial_paper.md:984
msgid ""
"In the DigiBank administrator window, install the application dependencies:"
msgstr "在 DigiBank 的管理员窗口下，安装应用程式的依赖项:"

#: ../../source/tutorial/commercial_paper.md:995
msgid ""
"In Balaji's terminal window, run the addToWallet.js program to add identity "
"information to his wallet:"
msgstr "在Balaji的终端窗口，运行addToWallet.js程序，将身份信息添加到他的钱包:"

#: ../../source/tutorial/commercial_paper.md:1004
msgid ""
"The addToWallet.js program has added identity information for balaji, to his"
" wallet, which will be used by buy.js and redeem.js to submit transactions "
"to PaperNet."
msgstr ""
"addToWallet.js程序将balaji的身份信息添加到他的钱包中，buy.js和redeemm .js将使用该钱包向PaperNet提交交易。"

#: ../../source/tutorial/commercial_paper.md:1008
msgid ""
"Like Isabella, Balaji can store multiple identities in his wallet, though in"
" our example, he only uses one -- Admin@org.example.com. His corresponding "
"wallet structure digibank/identity/user/balaji/wallet/Admin@org1.example.com"
" contains is very similar Isabella's -- feel free to examine it."
msgstr ""
"和Isabella一样，Balaji可以在他的钱包中存储多个身份，但是在我们的示例中，他只使用一个——Admin@org.example.com。他相应的钱包结构digbank"
" "
"/identity/user/balaji/wallet/Admin@org1.example.com包含的与Isabella的非常相似——请随意查看。"

#: ../../source/tutorial/commercial_paper.md:1013
msgid "Buy application"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:1015
msgid ""
"Balaji can now use buy.js to submit a transaction that will transfer "
"ownership of MagnetoCorp commercial paper 00001 to DigiBank."
msgstr "Balaji现在可以使用buy.js提交一笔交易，该交易将把MagnetoCorp商业票据00001的所有权转让给DigiBank。"

#: ../../source/tutorial/commercial_paper.md:1018
msgid "Run the buy application in Balaji's window:"
msgstr "在Balaji的窗口中运行buy应用程序:"

#: ../../source/tutorial/commercial_paper.md:1034
msgid ""
"You can see the program output that MagnetoCorp commercial paper 00001 was "
"successfully purchased by Balaji on behalf of DigiBank. buy.js invoked the "
"buy transaction defined in the CommercialPaper smart contract which updated "
"commercial paper 00001 within the world state using the putState() and "
"getState() Fabric APIs. As you've seen, the application logic to buy and "
"issue commercial paper is very similar, as is the smart contract logic."
msgstr ""
"您可以看到程序输出，MagnetoCorp commercial paper "
"00001被代表DigiBank的Balaji成功购买。js调用了businessalpaper smart "
"contract中定义的buy事务，该事务使用putState()和getState() Fabric "
"api在世界范围内更新了商业票据00001。正如您所看到的，购买和发行商业票据的应用程序逻辑非常类似，智能合约逻辑也是如此。"

#: ../../source/tutorial/commercial_paper.md:1041
msgid "Redeem application"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:1043
msgid ""
"The final transaction in the lifecycle of commercial paper 00001 is for "
"DigiBank to redeem it with MagnetoCorp. Balaji uses redeem.js to submit a "
"transaction to perform the redeem logic within the smart contract."
msgstr ""
"商业票据00001生命周期的最后一笔交易是由DigiBank与MagnetoCorp进行赎回。Balaji使用redeem.js提交事务来执行smart合约中的赎回逻辑。"

#: ../../source/tutorial/commercial_paper.md:1047
msgid "Run the redeem transaction in Balaji's window:"
msgstr "在Balaji的窗口中运行赎回交易:"

#: ../../source/tutorial/commercial_paper.md:1063
msgid ""
"Again, see how the commercial paper 00001 was successfully redeemed when "
"redeem.js invoked the redeem transaction defined in CommercialPaper. Again, "
"it updated commercial paper 00001 within the world state to reflect that the"
" ownership returned to MagnetoCorp, the issuer of the paper."
msgstr ""
"再次，请查看当redeem.js调用commercial "
"paper中定义的赎回事务时，商业票据00001是如何成功赎回的。再次，它更新了世界范围内的商业票据00001，以反映所有权回到了发行该票据的MagnetoCorp。"

#: ../../source/tutorial/commercial_paper.md:1068
msgid "Further reading"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:1070
msgid ""
"To understand how applications and smart contracts shown in this tutorial "
"work in more detail, you'll find it helpful to read Developing Applications."
" This topic will give you a fuller explanation of the commercial paper "
"scenario, the PaperNet business network, its actors, and how the "
"applications and smart contracts they use work in detail."
msgstr ""
"要更详细地了解本教程中显示的应用程序和智能合约是如何工作的，您将发现阅读开发应用程序很有帮助。本主题将更全面地解释商业票据场景、PaperNet业务网络及其参与者，以及它们使用的应用程序和智能契约如何工作。"

#: ../../source/tutorial/commercial_paper.md:1077
msgid ""
"Also feel free to use this sample to start creating your own applications "
"and smart contracts!"
msgstr "也可以使用这个示例开始创建您自己的应用程序和智能合约!"
