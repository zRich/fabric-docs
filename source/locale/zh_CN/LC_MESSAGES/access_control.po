# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, hyperledger
# This file is distributed under the same license as the hyperledger-fabricdocs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# 王伟兵 <wbwang@inspur.com>, 2019
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: hyperledger-fabricdocs master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-09 08:55+0800\n"
"PO-Revision-Date: 2019-04-22 19:58+0000\n"
"Last-Translator: 王伟兵 <wbwang@inspur.com>, 2019\n"
"Language-Team: Chinese (China) (https://www.transifex.com/hyperledger/teams/97220/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../source/access_control.md:1
msgid "Access Control Lists (ACL)"
msgstr ""

#: ../../source/access_control.md:3
msgid "What is an Access Control List?"
msgstr ""

#: ../../source/access_control.md:5
msgid ""
"Note: This topic deals with access control and policies on a channel "
"administration level. To learn about access control within a chaincode, "
"check out our chaincode for developers tutorial."
msgstr "注意：本主题涉及通道管理级别的访问控制和策略。要了解链码中的访问控制，请参阅我们的链码开发者教程。"

#: ../../source/access_control.md:9
msgid ""
"Fabric uses access control lists (ACLs) to manage access to resources by "
"associating a policy --- which specifies a rule that evaluates to true or "
"false, given a set of identities --- with the resource. Fabric contains a "
"number of default ACLs. In this document, we'll talk about how they're "
"formatted and how the defaults can be overridden."
msgstr ""
"Fabric使用访问控制列表(ACL)来管理对资源的访问，方法是将一个策略与资源相关联，策略指定一个计算结果为true或false规则，给定一组标识。Fabric包含许多缺省ACL。在本文档中，我们将讨论如何格式化它们以及如何重写默认值。"

#: ../../source/access_control.md:14
msgid ""
"But before we can do that, it's necessary to understand a little about "
"resources and policies."
msgstr "但在此之前，有必要对资源和策略有一些了解。"

#: ../../source/access_control.md:17
msgid "Resources"
msgstr ""

#: ../../source/access_control.md:19
msgid ""
"Users interact with Fabric by targeting a user chaincode, system chaincode, "
"or an events stream source. As such, these endpoints are considered "
"\"resources\" on which access control should be exercised."
msgstr "用户通过指定用户链码、系统链码或事件流源与Fabric交互。因此，这些端点被认为是应该执行访问控制的“资源”。"

#: ../../source/access_control.md:24
msgid ""
"Application developers need to be aware of these resources and the default "
"policies associated with them. The complete list of these resources are "
"found in configtx.yaml. You can look at a sample configtx.yaml file here."
msgstr ""
"应用程序开发人员需要了解这些资源以及与它们关联的默认策略。这些资源的完整列表可以在config "
".yaml中找到。您可以查看这里的configtx.yaml示例文件。"

#: ../../source/access_control.md:28
msgid ""
"The resources named in configtx.yaml is an exhaustive list of all internal "
"resources currently defined by Fabric. The loose convention adopted there is"
" <component>/<resource>. So cscc/GetConfigBlock is the resource for the "
"GetConfigBlock call in the CSCC component."
msgstr ""
"在configtx.yaml中命名的资源是Fabric当前定义的所有内部资源的详细列表。那里采用的宽松约定是<component>/<resource>。因此cscc/GetConfigBlock是CSCC组件中GetConfigBlock调用的资源。"

#: ../../source/access_control.md:33
msgid "Policies"
msgstr ""

#: ../../source/access_control.md:35
msgid ""
"Policies are fundamental to the way Fabric works because they allow the "
"identity (or set of identities) associated with a request to be checked "
"against the policy associated with the resource needed to fulfill the "
"request. Endorsement policies are used to determine whether a transaction "
"has been appropriately endorsed. The policies defined in the channel "
"configuration are referenced as modification policies as well as for access "
"control, and are defined in the channel configuration itself."
msgstr ""
"策略是Fabric工作方式的基础，因为它们允许根据与实现请求所需的资源关联的策略检查与请求关联的身份(或一组身份)。背书策略用于确定交易是否得到了适当的背书。在通道配置中定义的策略被引用为访问控制策略的修改策略，并在通道配置本身中定义。"

#: ../../source/access_control.md:42
msgid ""
"Policies can be structured in one of two ways: as Signature policies or as "
"an ImplicitMeta policy."
msgstr "策略可以通过以下两种方式构建：签名策略或 ImplicitMeta策略。"

#: ../../source/access_control.md:45
msgid "Signature policies"
msgstr ""

#: ../../source/access_control.md:47
msgid ""
"These policies identify specific users who must sign in order for a policy "
"to be satisfied. For example:"
msgstr "这些策略指定了满足策略需要哪些用户签名。例如:"

#: ../../source/access_control.md:58
msgid ""
"This policy construct can be interpreted as: the policy named MyPolicy can "
"only be satisfied by the signature of an identity with role of \"a peer from"
" Org1\" or \"a peer from Org2\"."
msgstr "此策略结构可以解释为：名为MyPolicy的策略只能通过“来自Org1的节点”或“来自Org2的节点”角色的身份签名来满足。"

#: ../../source/access_control.md:62
msgid ""
"Signature policies support arbitrary combinations of AND, OR, and NOutOf, "
"allowing the construction of extremely powerful rules like: \"An admin of "
"org A and two other admins, or 11 of 20 org admins\"."
msgstr ""
"签名策略支持AND、OR和NOutOf的任意组合，允许构造非常强大的规则，比如：“一个org "
"A管理员和两个其他管理员，或者20个org管理员中的11个”。"

#: ../../source/access_control.md:66
msgid "ImplicitMeta policies"
msgstr ""

#: ../../source/access_control.md:68
msgid ""
"ImplicitMeta policies aggregate the result of policies deeper in the "
"configuration hierarchy that are ultimately defined by Signature policies. "
"They support default rules like \"A majority of the organization admins\". "
"These policies use a different but still very simple syntax as compared to "
"Signature policies: <ALL|ANY|MAJORITY> <sub_policy>."
msgstr ""
"ImplicitMeta策略在配置层次结构的更深层上聚合最终由签名策略定义的策略结果。它们支持默认规则，比如“大多数组织管理员”。与签名策略相比，这些策略使用了不同但仍然非常简单的语法：<ALL|ANY|MAJORITY>"
" <sub_policy>。"

#: ../../source/access_control.md:74
msgid "For example: ANY Readers or MAJORITY Admins."
msgstr "例如：任何读者或多数管理员。"

#: ../../source/access_control.md:76
msgid ""
"Note that in the default policy configuration Admins have an operational "
"role. Policies that specify that only Admins --- or some subset of Admins "
"--- have access to a resource will tend to be for sensitive or operational "
"aspects of the network (such as instantiating chaincode on a channel). "
"Writers will tend to be able to propose ledger updates, such as a "
"transaction, but will not typically have administrative permissions. Readers"
" have a passive role. They can access information but do not have the "
"permission to propose ledger updates nor do can they perform administrative "
"tasks. These default policies can be added to, edited, or supplemented, for "
"example by the new peer and client roles (if you have NodeOU support)."
msgstr ""
"注意，在默认策略配置中，管理员具有管理角色。指定只有管理员(或管理员的某些子集)才能访问资源的策略往往是针对敏感或网络管理方面(例如在通道上实例化链码)。写入者往往能够提议账本更新，比如交易，但通常没有管理权限。读者是一个被动的角色。他们可以获取信息，但没有提议更新账本的权限，也不能执行管理任务。这些默认策略可以添加、编辑或补充，例如通过新的节点和客户端角色(如果您有NodeOU支持)。"

#: ../../source/access_control.md:87
msgid "Here's an example of an ImplicitMeta policy structure:"
msgstr "这里有一个ImplicitMeta策略结构的例子："

#: ../../source/access_control.md:96
msgid ""
"Here, the policy AnotherPolicy can be satisfied by the MAJORITY of Admins, "
"where Admins is eventually being specified by lower level Signature policy."
msgstr "在这里，大多数管理员可以满足策略AnotherPolicy，其中管理员最终由下级的签名策略指定。"

#: ../../source/access_control.md:99
msgid "Where is access control specified?"
msgstr ""

#: ../../source/access_control.md:101
msgid ""
"Access control defaults exist inside configtx.yaml, the file that "
"configtxgen uses to build channel configurations."
msgstr "访问控制默认值存在于configtx.yaml中, configtxgen用于构建通道的配置文件。"

#: ../../source/access_control.md:104
msgid ""
"Access control can be updated one of two ways, either by editing "
"configtx.yaml itself, which will propagate the ACL change to any new "
"channels, or by updating access control in the channel configuration of a "
"particular channel."
msgstr ""
"访问控制可以通过以下两种方式之一进行更新：编辑configtx.yaml，它将ACL更改传播到任何新通道，或者通过更新特定通道配置文件中的访问控制。"

#: ../../source/access_control.md:108
msgid "How ACLs are formatted in configtx.yaml"
msgstr ""

#: ../../source/access_control.md:110
msgid ""
"ACLs are formatted as a key-value pair consisting of a resource function "
"name followed by a string. To see what this looks like, reference this "
"sample configtx.yaml file."
msgstr "ACL的格式是键值对，由资源函数名后跟字符串组成。要查看这是什么样子，请参考这个示例文件configtx.yaml。"

#: ../../source/access_control.md:113
msgid "Two excerpts from this sample:"
msgstr "从这个例子中摘录了两段："

#: ../../source/access_control.md:125
msgid ""
"These ACLs define that access to peer/Propose and event/Block resources is "
"restricted to identities satisfying the policy defined at the canonical path"
" /Channel/Application/Writers and /Channel/Application/Readers, "
"respectively."
msgstr ""
"这些ACL定义了对节点/提议和事件/区块资源的访问，仅限于满足分别在正则路径/Channel/Application/Writers和/Channel/Application/Readers上定义的策略。"

#: ../../source/access_control.md:129
msgid "Updating ACL defaults in configtx.yaml"
msgstr ""

#: ../../source/access_control.md:131
msgid ""
"In cases where it will be necessary to override ACL defaults when "
"bootstrapping a network, or to change the ACLs before a channel has been "
"bootstrapped, the best practice will be to update configtx.yaml."
msgstr "在引导网络时需要覆盖ACL默认值，或者在引导通道之前更改ACL的情况下，最佳实践将是更新config .yaml。"

#: ../../source/access_control.md:135
msgid ""
"Let's say you want to modify the peer/Propose ACL default --- which "
"specifies the policy for invoking chaincodes on a peer -- from "
"/Channel/Application/Writers to a policy called MyPolicy."
msgstr ""
"假设您想修改节点/提议的ACL默认值，它指定了在节点上调用链码的策略，从/Channel/Application/ "
"writer到一个名为MyPolicy的策略。"

#: ../../source/access_control.md:139
msgid ""
"This is done by adding a policy called MyPolicy (it could be called "
"anything, but for this example we'll call it MyPolicy). The policy is "
"defined in the Application.Policies section inside configtx.yaml and "
"specifies a rule to be checked to grant or deny access to a user. For this "
"example, we'll be creating a Signature policy identifying SampleOrg.admin."
msgstr ""
"这是通过添加一个名为MyPolicy的策略来实现的（它可以被称为任何名称，但在本例中，我们将其称为MyPolicy）。这个策略在configtx.yaml中的Application.Policies部分下定义，它指定了对于一个用户要授予或拒绝的访问授权。对于本例，我们将创建一个标识为SampleOrg.admin的签名策略。"

#: ../../source/access_control.md:161
msgid ""
"Then, edit the Application: ACLs section inside configtx.yaml to change "
"peer/Propose from this:"
msgstr "然后，编辑configtx.yaml中的Application: ACLs部分，来修改 peer/Propose从下面的:"

#: ../../source/access_control.md:164
msgid "peer/Propose: /Channel/Application/Writers"
msgstr "peer/Propose: /Channel/Application/Writers"

#: ../../source/access_control.md:166 ../../source/access_control.md:250
msgid "To this:"
msgstr "到："

#: ../../source/access_control.md:168
msgid "peer/Propose: /Channel/Application/MyPolicy"
msgstr "peer/Propose: /Channel/Application/MyPolicy"

#: ../../source/access_control.md:170
msgid ""
"Once these fields have been changed in configtx.yaml, the configtxgen tool "
"will use the policies and ACLs defined when creating a channel creation "
"transaction. When appropriately signed and submitted by one of the admins of"
" the consortium members, a new channel with the defined ACLs and policies is"
" created."
msgstr ""
"一旦在configtx中更改了这些字段，configtxgen工具将使用在创建通道创建交易时定义的策略和ACL。当联盟成员的管理员之一适当地签署并提交时，将已定义的acl和策略创建一个新通道。"

#: ../../source/access_control.md:175
msgid ""
"Once MyPolicy has been bootstrapped into the channel configuration, it can "
"also be referenced to override other ACL defaults. For example:"
msgstr "一旦将MyPolicy引导到通道配置中，它还可以引用它来覆盖其他ACL默认值。例如:"

#: ../../source/access_control.md:188
msgid ""
"This would restrict the ability to subscribe to block events to "
"SampleOrg.admin."
msgstr "这将限制SampleOrg.admin签署出块事件的能力。"

#: ../../source/access_control.md:190
msgid ""
"If channels have already been created that want to use this ACL, they'll "
"have to update their channel configurations one at a time using the "
"following flow:"
msgstr "如果已经创建了希望使用这个ACL的通道，则它们必须使用以下流程一次更新一个通道配置:"

#: ../../source/access_control.md:193
msgid "Updating ACL defaults in the channel config"
msgstr ""

#: ../../source/access_control.md:195
msgid ""
"If channels have already been created that want to use MyPolicy to restrict "
"access to peer/Propose --- or if they want to create ACLs they don't want "
"other channels to know about --- they'll have to update their channel "
"configurations one at a time through config update transactions."
msgstr ""
"如果已经创建了通道，希望使用MyPolicy限制对节点/提议的访问，或者希望创建不想让其他通道知道的ACL，则必须通过配置更新交易一次更新一个通道配置。"

#: ../../source/access_control.md:200
msgid ""
"Note: Channel configuration transactions are an involved process we won't "
"delve into here. If you want to read more about them check out our document "
"on channel configuration updates and our \"Adding an Org to a Channel\" "
"tutorial."
msgstr ""
"注意:通道配置交易是一个复杂的过程，我们不会在这里深入讨论。如果你想了解更多关于他们的信息，请查看我们关于通道配置更新的文档和我们的“向通道添加组织”教程。"

#: ../../source/access_control.md:204
msgid ""
"After pulling, translating, and stripping the configuration block of its "
"metadata, you would edit the configuration by adding MyPolicy under "
"Application: policies, where the Admins, Writers, and Readers policies "
"already live."
msgstr ""
"在提取、翻译和剥离配置区块的元数据之后，您将通过在Application: "
"policies下添加MyPolicy来编辑配置，管理员、编写者和读者策略已经位于Application: policies下。"

#: ../../source/access_control.md:240
msgid "Note in particular the msp_identifer and role here."
msgstr "特别注意这里的msp_identifer和角色。"

#: ../../source/access_control.md:242
msgid ""
"Then, in the ACLs section of the config, change the peer/Propose ACL from "
"this:"
msgstr "然后，在配置的ACLs部分，从这里更改节点/提议 ACL:"

#: ../../source/access_control.md:257
msgid ""
"Note: If you do not have ACLs defined in your channel configuration, you "
"will have to add the entire ACL structure."
msgstr "注意：如果在通道配置中没有定义ACL，则必须添加整个ACL结构。"

#: ../../source/access_control.md:260
msgid ""
"Once the configuration has been updated, it will need to be submitted by the"
" usual channel update process."
msgstr "一旦更新了配置，就需要通过通常的通道更新流程来提交配置。"

#: ../../source/access_control.md:263
msgid "Satisfying an ACL that requires access to multiple resources"
msgstr ""

#: ../../source/access_control.md:265
msgid ""
"If a member makes a request that calls multiple system chaincodes, all of "
"the ACLs for those system chaincodes must be satisfied."
msgstr "如果成员发出调用多个系统链码的请求，则必须满足所有这些系统链码的ACL。"

#: ../../source/access_control.md:268
msgid ""
"For example, peer/Propose refers to any proposal request on a channel. If "
"the particular proposal requires access to two system chaincodes that "
"requires an identity satisfying Writers and one system chaincode that "
"requires an identity satisfying MyPolicy, then the member submitting the "
"proposal must have an identity that evaluates to \"true\" for both Writers "
"and MyPolicy."
msgstr ""
"例如，peer/ "
"proposal引用通道上的任何提议请求。如果特定的提议需要访问两个系统链码，其中一个系统链码需要一个身份满足写入者，另一个系统链码需要一个身份满足MyPolicy，那么提交提议的成员必须有一个对写入者和MyPolicy都计算为“true”的身份。"

#: ../../source/access_control.md:274
msgid ""
"In the default configuration, Writers is a signature policy whose rule is "
"SampleOrg.member. In other words, \"any member of my organization\". "
"MyPolicy, listed above, has a rule of SampleOrg.admin, or \"any admin of my "
"organization\". To satisfy these ACLs, the member would have to be both an "
"administrator and a member of SampleOrg. By default, all administrators are "
"members (though not all administrators are members), but it is possible to "
"overwrite these policies to whatever you want them to be. As a result, it's "
"important to keep track of these policies to ensure that the ACLs for peer "
"proposals are not impossible to satisfy (unless that is the intention)."
msgstr ""
"在默认配置中，Writer是一个签名策略，其规则是SampleOrg.member。换句话说，是“我组织的任何成员”。上面列出的MyPolicy有一个SampleOrg.admin规则，或“我的组织的任何管理员”。为了满足这些ACL，成员必须同时是管理员和SampleOrg成员。默认情况下，所有管理员都是成员（虽然不是所有管理员都是成员），但是可以将这些策略改写为您希望它们成为的任何内容。因此，重要的是跟踪这些策略，以确保节点提议的ACL是可以满足的（除非这是意图）。"

#: ../../source/access_control.md:284
msgid ""
"Migration considerations for customers using the experimental ACL feature"
msgstr ""

#: ../../source/access_control.md:286
msgid ""
"Previously, the management of access control lists was done in an "
"isolated_data section of the channel creation transaction and updated via "
"PEER_RESOURCE_UPDATE transactions. Originally, it was thought that the "
"resources tree would handle the update of several functions that, "
"ultimately, were handled in other ways, so maintaining a separate parallel "
"peer configuration tree was judged to be unnecessary."
msgstr ""
"以前，访问控制列表的管理是在通道创建交易的isolated_data部分中完成的，并通过PEER_RESOURCE_UPDATE交易进行更新。最初，人们认为资源树将处理几个函数的更新，而这些函数最终是用其他方式处理的，因此维护一个单独的并行节点配置树被认为是不必要的。"

#: ../../source/access_control.md:292
msgid ""
"Migration for customers using the experimental resources tree in v1.1 is "
"possible. Because the official v1.2 release does not support the old ACL "
"methods, the network operators should shut down all their peers.  Then, they"
" should upgrade them to v1.2, submit a channel reconfiguration transaction "
"which enables the v1.2 capability and sets the desired ACLs, and then "
"finally restart the upgraded peers.  The restarted peers will immediately "
"consume the new channel configuration and enforce the ACLs as desired."
msgstr ""
"使用v1.1中的实验资源树为客户迁移是可以的。由于官方v1.2版本不支持旧的ACL方法，网络操作者应该关闭所有的节点。然后，他们应该将它们升级到v1.2，提交一个通道重新配置交易，该交易启用v1.2功能并设置所需的ACL，最后重新启动升级的节点。重新启动的节点将立即使用新的通道配置并根据需要强制执行ACL。"
