# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, hyperledger
# This file is distributed under the same license as the hyperledger-fabricdocs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# JulienGuo郭立冬 <690748277@qq.com>, 2019
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: hyperledger-fabricdocs master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-04-23 09:48+0800\n"
"PO-Revision-Date: 2019-04-22 20:02+0000\n"
"Last-Translator: JulienGuo郭立冬 <690748277@qq.com>, 2019\n"
"Language-Team: Chinese (China) (https://www.transifex.com/hyperledger/teams/97220/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../source/Gerrit/changes.rst:2
msgid "Submitting a Change to Gerrit"
msgstr "往Gerrit上面提交变更"

#: ../../source/Gerrit/changes.rst:4
msgid ""
"Carefully review the following before submitting a change to the Hyperledger"
" Fabric code base. These guidelines apply to developers that are new to open"
" source, as well as to experienced open source developers."
msgstr ""
"在向Hyperledger Fabric代码库提交更改之前，请仔细检查以下代码。这些指导原则适用于刚接触开源的开发人员，也适用于经验丰富的开源开发人员。"

#: ../../source/Gerrit/changes.rst:9
msgid "Change Requirements"
msgstr "变更需求"

#: ../../source/Gerrit/changes.rst:11
msgid ""
"This section contains guidelines for submitting code changes for review. For"
" more information on how to submit a change using Gerrit, please see "
":doc:`Working with Gerrit <gerrit>`."
msgstr ""
"本节包含提交代码更改以供审核的指南。有关如何使用Gerrit提交更改的更多信息，请参见这里 :doc:`Working with Gerrit "
"<gerrit>`。"

#: ../../source/Gerrit/changes.rst:15
msgid ""
"All changes to Hyperledger Fabric are submitted as Git commits via Gerrit. "
"Each commit must contain:"
msgstr "所有对Hyperledger Fabric的更改都是在Git通过Gerrit提交时提交的。每次提交必须包含："

#: ../../source/Gerrit/changes.rst:18
msgid ""
"a short and descriptive subject line that is 55 characters or fewer, "
"followed by a blank line,"
msgstr "一个简短的描述性的主题行，长度不超过55个字符，后面是空行，"

#: ../../source/Gerrit/changes.rst:20
msgid ""
"a change description with the logic or reasoning for your changes, followed "
"by a blank line,"
msgstr "一个变更描述，包括您的变更的逻辑或推理，后面是空行，"

#: ../../source/Gerrit/changes.rst:22
msgid "a Signed-off-by line, followed by a colon (Signed-off-by:), and"
msgstr "Signed-off-by签名行，后跟冒号(Signed-off-by:)，和"

#: ../../source/Gerrit/changes.rst:23
msgid ""
"a Change-Id identifier line, followed by a colon (Change-Id:). Gerrit won't "
"accept patches without this identifier."
msgstr "Change-Id标识符行，后跟冒号(Change-Id:)。如果没有这个标识符，Gerrit将不会接受补丁。"

#: ../../source/Gerrit/changes.rst:26
msgid "A commit with the above details is considered well-formed."
msgstr "具有上述细节的提交被认为是格式良好的。"

#: ../../source/Gerrit/changes.rst:28
msgid ""
"You don't need to supply the Change-Id identifier for a new commit; this is "
"added automatically by the ``commit-msg`` Git hook associated with the "
"repository. If you subsequently amend your commit and resubmit it, using the"
" same Change-Id value as the initial commit will guarantee that Gerrit will "
"recognize that subsequent commit as an amended commit with respect to the "
"earlier one."
msgstr ""
"您不需要为新提交提供 Change-Id 标识符；这是由与仓库关联的``commit-msg`` Git hook "
"自动添加的。如果随后修改了提交并重新提交，使用与初始提交相同的Change-Id值，Gerrit将会识别出后续提交是相对于先前提交的修改后的提交。"

#: ../../source/Gerrit/changes.rst:36
msgid ""
"All changes and topics sent to Gerrit must be well-formed. In addition to "
"the above mandatory content in a commit, a commit message should include:"
msgstr "发送给Gerrit的所有更改和主题都必须是格式良好的。除了上述提交的强制性内容外，提交信息还应包括："

#: ../../source/Gerrit/changes.rst:40
msgid "**what** the change does,"
msgstr "**what** 这个变更做了什么，"

#: ../../source/Gerrit/changes.rst:41
msgid "**why** you chose that approach, and"
msgstr "**why** 你为什么选择这种方法，和"

#: ../../source/Gerrit/changes.rst:42
msgid "**how** you know it works --- for example, which tests you ran."
msgstr "**how** 你如何知道它有作用，例如，你做了什么测试。"

#: ../../source/Gerrit/changes.rst:44
msgid ""
"Commits must :doc:`build cleanly <../dev-setup/build>` when applied on top "
"of each other, thus avoiding breaking bisectability. Each commit should "
"address a single identifiable JIRA issue and should be logically self-"
"contained. For example, one commit might fix whitespace issues, another "
"commit might rename a function, while a third commit could change some "
"code's functionality."
msgstr ""
"提交必须在相互应用时干净地构建 :doc:`build cleanly <../dev-"
"setup/build>`，从而避免破坏可平分性。每个提交都应该处理一个可识别的JIRA问题，并且应该在逻辑上是自包含的。例如，一个提交可能修复空格问题，另一个提交可能重命名一个函数，而第三个提交可能更改一些代码的功能。"

#: ../../source/Gerrit/changes.rst:51
msgid "A well-formed commit is illustrated below in detail:"
msgstr "一份格式良好的提交详细说明如下："

#: ../../source/Gerrit/changes.rst:63
msgid ""
"The name in the ``Signed-off-by:`` line and your email must match the change"
" authorship information. Make sure your personal ``.gitconfig`` file is set "
"up correctly."
msgstr ""
"在 ``Signed-off-by:`` 行的名字和你的邮箱必须与变更的作者信息相符。确保你个人的``.gitconfig`` 文件设置正确。"

#: ../../source/Gerrit/changes.rst:67
msgid ""
"When a change is included in the set to enable other changes, but it will "
"not be part of the final set, please let the reviewers know this."
msgstr "当一个变更包含在集合中以支持其他变更，但它不属于最终集合的一部分时，请让审核人员知道这一点。"

#: ../../source/Gerrit/changes.rst:71
msgid "Check that your change request is validated by the CI process"
msgstr "用CI流程检验您的变更请求是可行的"

#: ../../source/Gerrit/changes.rst:73
msgid ""
"To ensure stability of the code and limit possible regressions, we use a "
"Continuous Integration (CI) process based on Jenkins which triggers a build "
"on several platforms and runs tests against every change request being "
"submitted. It is your responsibility to check that your CR passes these "
"tests. No CR will ever be merged if it fails the tests and you shouldn't "
"expect anybody to pay attention to your CRs until they pass the CI tests."
msgstr ""
"为了确保代码的稳定性并限制可能的回归，我们使用了基于Jenkins的持续集成(CI)过程，该过程在多个平台上都能触发构建，它针对提交的每个更改请求运行测试。您有责任检查您的CR是否通过这些测试。如果CR没有通过测试，那么它就不会被合并，在他们通过CI测试之前，不要期望任何人关注您的CRs。"

#: ../../source/Gerrit/changes.rst:81
msgid ""
"To check on the status of the CI process, simply look at your CR on Gerrit, "
"following the URL that was given to you as the result of the push in the "
"previous step. The History section at the bottom of the page will display a "
"set of actions taken by \"Hyperledger Jobbuilder\" corresponding to the CI "
"process being executed."
msgstr ""
"要检查CI流程的状态，只需查看Gerrit上的CR，并按照上一步中推送的结果提供给您的URL执行即可。页面底部的History部分将显示一组由“Hyperledger"
" Jobbuilder”执行的操作，这些操作对应于正在执行的CI进程。"

#: ../../source/Gerrit/changes.rst:87
msgid ""
"Upon completion, \"Hyperledger Jobbuilder\" will add to the CR a *+1 vote* "
"if successful and a *-1 vote* otherwise."
msgstr ""
"完成后，如果成功， \"Hyperledger Jobbuilder\" 将添加到CR一个*+1 vote* 投票，否则将添加*-1 vote*投票。"

#: ../../source/Gerrit/changes.rst:90
msgid ""
"In case of failure, explore the logs linked from the CR History. If you spot"
" a problem with your CR, amend your commit and push it to update it, which "
"will automatically kick off the CI process again."
msgstr "如果出现故障，请查看从CR历史记录中链接的日志。如果您发现CR有问题，请修改提交并推送更新，这将再次自动启动CI进程。"

#: ../../source/Gerrit/changes.rst:94
msgid ""
"If you see nothing wrong with your CR, it might be that the CI process "
"simply failed for some reason unrelated to your change. In that case you may"
" want to restart the CI process by posting a reply to your CR with the "
"simple content \"reverify\". Check the `CI management page "
"<https://github.com/hyperledger/ci-"
"management/blob/master/docs/source/fabric_ci_process.rst>`__ for additional "
"information and options on this."
msgstr ""
"如果您没有发现CR有任何问题，那么CI过程可能只是由于没有与您的更改关联起来而失败。在这种情况下，您可能希望通过向CR发送带有简单内容“reverify”的回复来重新启动CI进程。更多信息和选择请查看"
" `CI management page <https://github.com/hyperledger/ci-"
"management/blob/master/docs/source/fabric_ci_process.rst>`__。"
