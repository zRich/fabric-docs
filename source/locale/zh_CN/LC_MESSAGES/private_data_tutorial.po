# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, hyperledger
# This file is distributed under the same license as the hyperledger-fabricdocs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# JulienGuo郭立冬 <690748277@qq.com>, 2019
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: hyperledger-fabricdocs master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-01 12:09+0800\n"
"PO-Revision-Date: 2019-04-22 19:56+0000\n"
"Last-Translator: JulienGuo郭立冬 <690748277@qq.com>, 2019\n"
"Language-Team: Chinese (China) (https://www.transifex.com/hyperledger/teams/97220/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../source/private_data_tutorial.rst:3
msgid "Using Private Data in Fabric"
msgstr "在Fabric里面使用私有数据"

#: ../../source/private_data_tutorial.rst:5
msgid ""
"This tutorial will demonstrate the use of collections to provide storage and"
" retrieval of private data on the blockchain network for authorized peers of"
" organizations."
msgstr ""

#: ../../source/private_data_tutorial.rst:9
msgid ""
"The information in this tutorial assumes knowledge of private data stores "
"and their use cases. For more information, check out :doc:`private-data"
"/private-data`."
msgstr ""

#: ../../source/private_data_tutorial.rst:12
msgid ""
"These instructions use the new Fabric chaincode lifecycle introduced in the "
"Fabric v2.0 Alpha release. If you would like to use the previous lifecycle "
"model to use private data with chaincode, visit the v1.4 version of the "
"`Using Private Data in Fabric tutorial <https://hyperledger-"
"fabric.readthedocs.io/en/release-1.4/private_data_tutorial.html>`__."
msgstr ""

#: ../../source/private_data_tutorial.rst:17
msgid ""
"The tutorial will take you through the following steps to practice defining,"
" configuring and using private data with Fabric:"
msgstr ""

#: ../../source/private_data_tutorial.rst:20
msgid ":ref:`pd-build-json`"
msgstr ""

#: ../../source/private_data_tutorial.rst:21
msgid ":ref:`pd-read-write-private-data`"
msgstr ""

#: ../../source/private_data_tutorial.rst:22
msgid ":ref:`pd-install-define_cc`"
msgstr ""

#: ../../source/private_data_tutorial.rst:23
msgid ":ref:`pd-store-private-data`"
msgstr ""

#: ../../source/private_data_tutorial.rst:24
msgid ":ref:`pd-query-authorized`"
msgstr ""

#: ../../source/private_data_tutorial.rst:25
msgid ":ref:`pd-query-unauthorized`"
msgstr ""

#: ../../source/private_data_tutorial.rst:26
msgid ":ref:`pd-purge`"
msgstr ""

#: ../../source/private_data_tutorial.rst:27
msgid ":ref:`pd-indexes`"
msgstr ""

#: ../../source/private_data_tutorial.rst:28
msgid ":ref:`pd-ref-material`"
msgstr ""

#: ../../source/private_data_tutorial.rst:30
msgid ""
"This tutorial will use the `marbles private data sample "
"<https://github.com/hyperledger/fabric-"
"samples/tree/master/chaincode/marbles02_private>`__ --- running on the "
"Building Your First Network (BYFN) tutorial network --- to demonstrate how "
"to create, deploy, and use a collection of private data. The marbles private"
" data sample will be deployed to the :doc:`build_network` (BYFN) tutorial "
"network. You should have completed the task :doc:`install`; however, running"
" the BYFN tutorial is not a prerequisite for this tutorial. Instead the "
"necessary commands are provided throughout this tutorial to use the network."
" We will describe what is happening at each step, making it possible to "
"understand the tutorial without actually running the sample."
msgstr ""

#: ../../source/private_data_tutorial.rst:43
msgid "Build a collection definition JSON file"
msgstr ""

#: ../../source/private_data_tutorial.rst:45
msgid ""
"The first step in privatizing data on a channel is to build a collection "
"definition which defines access to the private data."
msgstr ""

#: ../../source/private_data_tutorial.rst:48
msgid ""
"The collection definition describes who can persist data, how many peers the"
" data is distributed to, how many peers are required to disseminate the "
"private data, and how long the private data is persisted in the private "
"database. Later, we will demonstrate how chaincode APIs ``PutPrivateData`` "
"and ``GetPrivateData`` are used to map the collection to the private data "
"being secured."
msgstr ""

#: ../../source/private_data_tutorial.rst:54
msgid "A collection definition is composed of the following properties:"
msgstr ""

#: ../../source/private_data_tutorial.rst:58
msgid "``name``: Name of the collection."
msgstr ""

#: ../../source/private_data_tutorial.rst:60
msgid ""
"``policy``: Defines the organization peers allowed to persist the collection"
" data."
msgstr ""

#: ../../source/private_data_tutorial.rst:62
msgid ""
"``requiredPeerCount``: Number of peers required to disseminate the private "
"data as a condition of the endorsement of the chaincode"
msgstr ""

#: ../../source/private_data_tutorial.rst:65
msgid ""
"``maxPeerCount``: For data redundancy purposes, the number of other peers "
"that the current endorsing peer will attempt to distribute the data to. If "
"an endorsing peer goes down, these other peers are available at commit time "
"if there are requests to pull the private data."
msgstr ""

#: ../../source/private_data_tutorial.rst:70
msgid ""
"``blockToLive``: For very sensitive information such as pricing or personal "
"information, this value represents how long the data should live on the "
"private database in terms of blocks. The data will live for this specified "
"number of blocks on the private database and after that it will get purged, "
"making this data obsolete from the network. To keep private data "
"indefinitely, that is, to never purge private data, set the ``blockToLive`` "
"property to ``0``."
msgstr ""

#: ../../source/private_data_tutorial.rst:77
msgid ""
"``memberOnlyRead``: a value of ``true`` indicates that peers automatically "
"enforce that only clients belonging to one of the collection member "
"organizations are allowed read access to private data."
msgstr ""

#: ../../source/private_data_tutorial.rst:81
msgid ""
"To illustrate usage of private data, the marbles private data example "
"contains two private data collection definitions: ``collectionMarbles`` and "
"``collectionMarblePrivateDetails``. The ``policy`` property in the "
"``collectionMarbles`` definition allows all members of  the channel (Org1 "
"and Org2) to have the private data in a private database. The "
"``collectionMarblesPrivateDetails`` collection allows only members of Org1 "
"to have the private data in their private database."
msgstr ""

#: ../../source/private_data_tutorial.rst:89
msgid ""
"For more information on building a policy definition refer to the :doc"
":`endorsement-policies` topic."
msgstr ""

#: ../../source/private_data_tutorial.rst:116
msgid ""
"The data to be secured by these policies is mapped in chaincode and will be "
"shown later in the tutorial."
msgstr ""

#: ../../source/private_data_tutorial.rst:119
msgid ""
"This collection definition file is deployed when the chaincode definition is"
" committed to the channel using the `peer lifecycle chaincode commit command"
" <http://hyperledger-"
"fabric.readthedocs.io/en/latest/commands/peerchaincode.html#peer-chaincode-"
"instantiate>`__. More details on this process are provided in Section 3 "
"below."
msgstr ""

#: ../../source/private_data_tutorial.rst:126
msgid "Read and Write private data using chaincode APIs"
msgstr ""

#: ../../source/private_data_tutorial.rst:128
msgid ""
"The next step in understanding how to privatize data on a channel is to "
"build the data definition in the chaincode. The marbles private data sample "
"divides the private data into two separate data definitions according to how"
" the data will be accessed."
msgstr ""

#: ../../source/private_data_tutorial.rst:151
msgid "Specifically access to the private data will be restricted as follows:"
msgstr ""

#: ../../source/private_data_tutorial.rst:153
msgid ""
"``name, color, size, and owner`` will be visible to all members of the "
"channel (Org1 and Org2)"
msgstr ""

#: ../../source/private_data_tutorial.rst:154
msgid "``price`` only visible to members of Org1"
msgstr ""

#: ../../source/private_data_tutorial.rst:156
msgid ""
"Thus two different sets of private data are defined in the marbles private "
"data sample. The mapping of this data to the collection policy which "
"restricts its access is controlled by chaincode APIs. Specifically, reading "
"and writing private data using a collection definition is performed by "
"calling ``GetPrivateData()`` and ``PutPrivateData()``, which can be found "
"`here "
"<https://github.com/hyperledger/fabric/blob/master/core/chaincode/shim/interfaces.go#L179>`_."
msgstr ""

#: ../../source/private_data_tutorial.rst:162
msgid ""
"The following diagrams illustrate the private data model used by the marbles"
" private data sample."
msgstr ""

#: ../../source/private_data_tutorial.rst:171
msgid "Reading collection data"
msgstr ""

#: ../../source/private_data_tutorial.rst:173
msgid ""
"Use the chaincode API ``GetPrivateData()`` to query private data in the "
"database.  ``GetPrivateData()`` takes two arguments, the **collection name**"
" and the data key. Recall the collection  ``collectionMarbles`` allows "
"members of Org1 and Org2 to have the private data in a side database, and "
"the collection ``collectionMarblePrivateDetails`` allows only members of "
"Org1 to have the private data in a side database. For implementation details"
" refer to the following two `marbles private data functions "
"<https://github.com/hyperledger/fabric-"
"samples/blob/master/chaincode/marbles02_private/go/marbles_chaincode_private.go>`__:"
msgstr ""

#: ../../source/private_data_tutorial.rst:181
msgid ""
"**readMarble** for querying the values of the ``name, color, size and "
"owner`` attributes"
msgstr ""

#: ../../source/private_data_tutorial.rst:182
msgid ""
"**readMarblePrivateDetails** for querying the values of the ``price`` "
"attribute"
msgstr ""

#: ../../source/private_data_tutorial.rst:184
msgid ""
"When we issue the database queries using the peer commands later in this "
"tutorial, we will call these two functions."
msgstr ""

#: ../../source/private_data_tutorial.rst:188
msgid "Writing private data"
msgstr ""

#: ../../source/private_data_tutorial.rst:190
msgid ""
"Use the chaincode API ``PutPrivateData()`` to store the private data into "
"the private database. The API also requires the name of the collection. "
"Since the marbles private data sample includes two different collections, it"
" is called twice in the chaincode:"
msgstr ""

#: ../../source/private_data_tutorial.rst:195
msgid ""
"Write the private data ``name, color, size and owner`` using the collection "
"named ``collectionMarbles``."
msgstr ""

#: ../../source/private_data_tutorial.rst:197
msgid ""
"Write the private data ``price`` using the collection named "
"``collectionMarblePrivateDetails``."
msgstr ""

#: ../../source/private_data_tutorial.rst:200
msgid ""
"For example, in the following snippet of the ``initMarble`` function, "
"``PutPrivateData()`` is called twice, once for each set of private data."
msgstr ""

#: ../../source/private_data_tutorial.rst:240
msgid ""
"To summarize, the policy definition above for our ``collection.json`` allows"
" all peers in Org1 and Org2 to store and transact with the marbles private "
"data ``name, color, size, owner`` in their private database. But only peers "
"in Org1 can store and transact with the ``price`` private data in its "
"private database."
msgstr ""

#: ../../source/private_data_tutorial.rst:246
msgid ""
"As an additional data privacy benefit, since a collection is being used, "
"only the private data hashes go through orderer, not the private data "
"itself, keeping private data confidential from orderer."
msgstr ""

#: ../../source/private_data_tutorial.rst:251
msgid "Start the network"
msgstr ""

#: ../../source/private_data_tutorial.rst:253
msgid ""
"Now we are ready to step through some commands which demonstrate how to use "
"private data."
msgstr ""

#: ../../source/private_data_tutorial.rst:256
#: ../../source/private_data_tutorial.rst:330
#: ../../source/private_data_tutorial.rst:424
#: ../../source/private_data_tutorial.rst:518
#: ../../source/private_data_tutorial.rst:562
#: ../../source/private_data_tutorial.rst:710
#: ../../source/private_data_tutorial.rst:728
#: ../../source/private_data_tutorial.rst:747
#: ../../source/private_data_tutorial.rst:796
msgid ":guilabel:`Try it yourself`"
msgstr ""

#: ../../source/private_data_tutorial.rst:258
msgid ""
"Before installing, defining, and using the marbles private data chaincode "
"below, we need to start the BYFN network. For the sake of this tutorial, we "
"want to operate from a known initial state. The following command will kill "
"any active or stale docker containers and remove previously generated "
"artifacts. Therefore let's run the following command to clean up any "
"previous environments:"
msgstr ""

#: ../../source/private_data_tutorial.rst:271
msgid ""
"If you've already run through this tutorial, you'll also want to delete the "
"underlying docker containers for the marbles private data chaincode. Let's "
"run the following commands to clean up previous environments:"
msgstr ""

#: ../../source/private_data_tutorial.rst:280
msgid ""
"Start up the BYFN network with CouchDB by running the following command:"
msgstr ""

#: ../../source/private_data_tutorial.rst:286
msgid ""
"This will create a simple Fabric network consisting of a single channel "
"named ``mychannel`` with two organizations (each maintaining two peer nodes)"
" and an ordering service while using CouchDB as the state database. Either "
"LevelDB or CouchDB may be used with collections. CouchDB was chosen to "
"demonstrate how to use indexes with private data."
msgstr ""

#: ../../source/private_data_tutorial.rst:292
msgid ""
"For collections to work, it is important to have cross organizational gossip"
" configured correctly. Refer to our documentation on :doc:`gossip`, paying "
"particular attention to the section on \"anchor peers\". Our tutorial does "
"not focus on gossip given it is already configured in the BYFN sample, but "
"when configuring a channel, the gossip anchors peers are critical to "
"configure for collections to work properly."
msgstr ""

#: ../../source/private_data_tutorial.rst:302
msgid "Install and define a chaincode with a collection"
msgstr ""

#: ../../source/private_data_tutorial.rst:304
msgid ""
"Client applications interact with the blockchain ledger through chaincode. "
"Therefore we need to install a chaincode on every peer that will execute and"
" endorse our transactions. However, before we can interact with our "
"chaincode, the members of the channel need to agree on a chaincode "
"definition that establishes chaincode governance, including the private data"
" collection configuration. We are going to package, install, and then define"
" the chaincode on the channel using :doc:`commands/peerlifecycle`."
msgstr ""

#: ../../source/private_data_tutorial.rst:313
msgid "Install chaincode on all peers"
msgstr ""

#: ../../source/private_data_tutorial.rst:315
msgid ""
"The chaincode needs to be packaged before it can be installed on our peers. "
"We can use the `peer lifecycle chaincode package <http://hyperledger-"
"fabric.readthedocs.io/en/latest/commands/peerlifecycle.html#peer-lifecycle-"
"chaincode-package>`__ command to package the marbles chaincode."
msgstr ""

#: ../../source/private_data_tutorial.rst:319
msgid ""
"The BYFN network includes two organizations, Org1 and Org2, with two peers "
"each. Therefore, the chaincode package has to be installed on four peers:"
msgstr ""

#: ../../source/private_data_tutorial.rst:322
msgid "peer0.org1.example.com"
msgstr ""

#: ../../source/private_data_tutorial.rst:323
msgid "peer1.org1.example.com"
msgstr ""

#: ../../source/private_data_tutorial.rst:324
msgid "peer0.org2.example.com"
msgstr ""

#: ../../source/private_data_tutorial.rst:325
msgid "peer1.org2.example.com"
msgstr ""

#: ../../source/private_data_tutorial.rst:327
msgid ""
"After the chaincode is packaged, we can use the `peer lifecycle chaincode "
"install <http://hyperledger-"
"fabric.readthedocs.io/en/latest/commands/peerlifecycle.html#peer-lifecycle-"
"chaincode-install>`__ command to install the Marbles chaincode on each peer."
msgstr ""

#: ../../source/private_data_tutorial.rst:332
msgid "Assuming you have started the BYFN network, enter the CLI container."
msgstr ""

#: ../../source/private_data_tutorial.rst:338
msgid "Your command prompt will change to something similar to:"
msgstr ""

#: ../../source/private_data_tutorial.rst:344
msgid ""
"Use the following command to package the Marbles private data chaincode from"
" the git repository inside your local container."
msgstr ""

#: ../../source/private_data_tutorial.rst:351
msgid "This command will create a chaincode package named marblesp.tar.gz."
msgstr ""

#: ../../source/private_data_tutorial.rst:353
msgid ""
"Use the following command to install the chaincode package onto the peer "
"``peer0.org1.example.com`` in your BYFN network. By default, after starting "
"the BYFN network, the active peer is set to: "
"``CORE_PEER_ADDRESS=peer0.org1.example.com:7051``:"
msgstr ""

#: ../../source/private_data_tutorial.rst:362
msgid ""
"A successful install command will return the chaincode identifier, similar "
"to the response below:"
msgstr ""

#: ../../source/private_data_tutorial.rst:370
msgid ""
"Use the CLI to switch the active peer to the second peer in Org1 and install"
" the chaincode. Copy and paste the following entire block of commands into "
"the CLI container and run them:"
msgstr ""

#: ../../source/private_data_tutorial.rst:379
msgid ""
"Use the CLI to switch to Org2. Copy and paste the following block of "
"commands as a group into the peer container and run them all at once:"
msgstr ""

#: ../../source/private_data_tutorial.rst:389
msgid ""
"Switch the active peer to the first peer in Org2 and install the chaincode:"
msgstr ""

#: ../../source/private_data_tutorial.rst:396
msgid ""
"Switch the active peer to the second peer in org2 and install the chaincode:"
msgstr ""

#: ../../source/private_data_tutorial.rst:405
msgid "Approve the chaincode definition"
msgstr ""

#: ../../source/private_data_tutorial.rst:407
msgid ""
"Each channel member that wants to use the chaincode needs to approve a "
"chaincode definition for their organization. Since both organizations are "
"going to use the chaincode in this tutorial, we need to approve the "
"chaincode definition for both Org1 and Org2."
msgstr ""

#: ../../source/private_data_tutorial.rst:412
msgid ""
"The chaincode definition includes the package identifier that was returned "
"by the install command. This packege ID is used to associate the chaincode "
"package installed on your peers with the chaincode definition approved by "
"your organization. We can also use the `peer lifecycle chaincode "
"queryinstalled <http://hyperledger-"
"fabric.readthedocs.io/en/latest/commands/peerlifecycle.html#peer-lifecycle-"
"chaincode-queryinstalled>`__ command to find the package ID of "
"``marblesp.tar.gz``."
msgstr ""

#: ../../source/private_data_tutorial.rst:418
msgid ""
"Once we have the package ID, we can then use the `peer lifecycle chaincode "
"approveformyorg <http://hyperledger-"
"fabric.readthedocs.io/en/latest/commands/peerlifecycle.html#peer-lifecycle-"
"chaincode-approveformyorg>`__ command to approve a definition of the marbles"
" chaincode for Org1 and Org2. To approve the private data collection "
"definition that accompanies the ``marbles02_private``, sample, provide the "
"path to the collections JSON file using the ``--collections-config`` flag."
msgstr ""

#: ../../source/private_data_tutorial.rst:426
msgid ""
"Run the following commands inside the CLI container to approve a definition "
"for Org1 and Org2."
msgstr ""

#: ../../source/private_data_tutorial.rst:429
msgid ""
"Use the following command to query your peer for the package ID of the "
"installed chaincode."
msgstr ""

#: ../../source/private_data_tutorial.rst:436
msgid ""
"The command will return the same package identifier as the install command. "
"You should see output similar to the following:"
msgstr ""

#: ../../source/private_data_tutorial.rst:445
msgid ""
"Declare the package ID as an environment variable. Paste the package ID of "
"marblespv1 returned by the ``peer lifecycle chaincode queryinstalled`` into "
"the command below. The package ID may not be the same for all users, so you "
"need to complete this step using the package ID returned from your console."
msgstr ""

#: ../../source/private_data_tutorial.rst:454
msgid ""
"Make sure we are running the CLI as Org1. Copy and paste the following block"
" of commands as a group into the peer container and run them all at once:"
msgstr ""

#: ../../source/private_data_tutorial.rst:465
msgid ""
"Use the following command to approve a definition of the Marbles private "
"data chaincode for Org2. This command includes a path to the collection "
"definition file. The approval is distributed within each organization using "
"gossip, so the command does not need to target every peer within an "
"organization."
msgstr ""

#: ../../source/private_data_tutorial.rst:475
msgid ""
"When the command completes successfully you should see something similar to:"
msgstr ""

#: ../../source/private_data_tutorial.rst:482
msgid ""
"Use the CLI to switch to Org2. Copy and paste the following block of "
"commands as a group into the peer container and run them all at once."
msgstr ""

#: ../../source/private_data_tutorial.rst:493
msgid "You can now approve the chaincode definition for Org2:"
msgstr ""

#: ../../source/private_data_tutorial.rst:500
msgid "Commit the chaincode definition"
msgstr ""

#: ../../source/private_data_tutorial.rst:502
msgid ""
"Once a sufficient number of organizations (in this case, a majority) have "
"approved a chaincode definition, one organization commit the definition to "
"the channel."
msgstr ""

#: ../../source/private_data_tutorial.rst:506
msgid ""
"Use the `peer lifecycle chaincode commit <http://hyperledger-"
"fabric.readthedocs.io/en/latest/commands/peerlifecycle.html#peer-lifecycle-"
"chaincode-commit>`__ command to commit the chaincode definition. This "
"command needs to target the peers in Org1 and Org2 to collect endorsements "
"for the commit transaction. The peers will endorse the transaction only if "
"their organizations have approved the chaincode definition. This command "
"will also deploy the collection definition to the channel."
msgstr ""

#: ../../source/private_data_tutorial.rst:513
msgid ""
"We are ready to use the chaincode after the chaincode definition has been "
"committed to the channel. Because the marbles private data chaincode "
"contains an initiation function, we need to use the `peer chaincode invoke "
"<http://hyperledger-"
"fabric.readthedocs.io/en/master/commands/peerchaincode.html?%20chaincode%20instantiate"
"#peer-chaincode-instantiate>`__ command to invoke ``Init()`` before we can "
"use other functions in the chaincode."
msgstr ""

#: ../../source/private_data_tutorial.rst:520
msgid ""
"Run the following commands to commit the definition of the marbles private "
"data chaincode to the BYFN channel ``mychannel``."
msgstr ""

#: ../../source/private_data_tutorial.rst:530
msgid ""
"When specifying the value of the ``--collections-config`` flag, you will "
"need to specify the fully qualified path to the collections_config.json "
"file. For example:"
msgstr ""

#: ../../source/private_data_tutorial.rst:538
msgid ""
"When the commit transaction completes successfully you should see something "
"similar to:"
msgstr ""

#: ../../source/private_data_tutorial.rst:546
msgid ""
"Use the following command to invoke the ``Init`` function to initialize the "
"chaincode:"
msgstr ""

#: ../../source/private_data_tutorial.rst:556
msgid "Store private data"
msgstr ""

#: ../../source/private_data_tutorial.rst:558
msgid ""
"Acting as a member of Org1, who is authorized to transact with all of the "
"private data in the marbles private data sample, switch back to an Org1 peer"
" and submit a request to add a marble:"
msgstr ""

#: ../../source/private_data_tutorial.rst:564
msgid "Copy and paste the following set of commands to the CLI command line."
msgstr ""

#: ../../source/private_data_tutorial.rst:574
msgid ""
"Invoke the marbles ``initMarble`` function which creates a marble with "
"private data ---  name ``marble1`` owned by ``tom`` with a color ``blue``, "
"size ``35`` and price of ``99``. Recall that private data **price** will be "
"stored separately from the private data **name, owner, color, size**. For "
"this reason, the ``initMarble`` function calls the ``PutPrivateData()`` API "
"twice to persist the private data, once for each collection. Also note that "
"the private data is passed using the ``--transient`` flag. Inputs passed as "
"transient data will not be persisted in the transaction in order to keep the"
" data private. Transient data is passed as binary data and therefore when "
"using CLI it must be base64 encoded. We use an environment variable to "
"capture the base64 encoded value, and use ``tr`` command to strip off the "
"problematic newline characters that linux base64 command adds."
msgstr ""

#: ../../source/private_data_tutorial.rst:592
#: ../../source/private_data_tutorial.rst:837
msgid "You should see results similar to:"
msgstr ""

#: ../../source/private_data_tutorial.rst:594
msgid ""
"``[chaincodeCmd] chaincodeInvokeOrQuery->INFO 001 Chaincode invoke "
"successful. result: status:200``"
msgstr ""

#: ../../source/private_data_tutorial.rst:599
msgid "Query the private data as an authorized peer"
msgstr ""

#: ../../source/private_data_tutorial.rst:601
msgid ""
"Our collection definition allows all members of Org1 and Org2 to have the "
"``name, color, size, owner`` private data in their side database, but only "
"peers in Org1 can have the ``price`` private data in their side database. As"
" an authorized peer in Org1, we will query both sets of private data."
msgstr ""

#: ../../source/private_data_tutorial.rst:606
msgid ""
"The first ``query`` command calls the ``readMarble`` function which passes "
"``collectionMarbles`` as an argument."
msgstr ""

#: ../../source/private_data_tutorial.rst:636
msgid ""
"The second ``query`` command calls the ``readMarblePrivateDetails`` function"
" which passes ``collectionMarblePrivateDetails`` as an argument."
msgstr ""

#: ../../source/private_data_tutorial.rst:666
msgid "Now :guilabel:`Try it yourself`"
msgstr ""

#: ../../source/private_data_tutorial.rst:668
msgid ""
"Query for the ``name, color, size and owner`` private data of ``marble1`` as"
" a member of Org1. Note that since queries do not get recorded on the "
"ledger, there is no need to pass the marble name as a transient input."
msgstr ""

#: ../../source/private_data_tutorial.rst:676
#: ../../source/private_data_tutorial.rst:688
msgid "You should see the following result:"
msgstr ""

#: ../../source/private_data_tutorial.rst:682
msgid ""
"Query for the ``price`` private data of ``marble1`` as a member of Org1."
msgstr ""

#: ../../source/private_data_tutorial.rst:697
msgid "Query the private data as an unauthorized peer"
msgstr ""

#: ../../source/private_data_tutorial.rst:699
msgid ""
"Now we will switch to a member of Org2 which has the marbles private data "
"``name, color, size, owner`` in its side database, but does not have the "
"marbles ``price`` private data in its side database. We will query for both "
"sets of private data."
msgstr ""

#: ../../source/private_data_tutorial.rst:705
msgid "Switch to a peer in Org2"
msgstr ""

#: ../../source/private_data_tutorial.rst:707
msgid ""
"From inside the docker container, run the following commands to switch to "
"the peer which is unauthorized to access the marbles ``price`` private data."
msgstr ""

#: ../../source/private_data_tutorial.rst:721
msgid "Query private data Org2 is authorized to"
msgstr ""

#: ../../source/private_data_tutorial.rst:723
msgid ""
"Peers in Org2 should have the first set of marbles private data (``name, "
"color, size and owner``) in their side database and can access it using the "
"``readMarble()`` function which is called with the ``collectionMarbles`` "
"argument."
msgstr ""

#: ../../source/private_data_tutorial.rst:734
msgid "You should see something similar to the following result:"
msgstr ""

#: ../../source/private_data_tutorial.rst:741
msgid "Query private data Org2 is not authorized to"
msgstr ""

#: ../../source/private_data_tutorial.rst:743
msgid ""
"Peers in Org2 do not have the marbles ``price`` private data in their side "
"database. When they try to query for this data, they get back a hash of the "
"key matching the public state but will not have the private state."
msgstr ""

#: ../../source/private_data_tutorial.rst:753
msgid "You should see a result similar to:"
msgstr ""

#: ../../source/private_data_tutorial.rst:763
msgid ""
"Members of Org2 will only be able to see the public hash of the private "
"data."
msgstr ""

#: ../../source/private_data_tutorial.rst:768
msgid "Purge Private Data"
msgstr ""

#: ../../source/private_data_tutorial.rst:770
msgid ""
"For use cases where private data only needs to be on the ledger until it can"
" be replicated into an off-chain database, it is possible to \"purge\" the "
"data after a certain set number of blocks, leaving behind only hash of the "
"data that serves as immutable evidence of the transaction."
msgstr ""

#: ../../source/private_data_tutorial.rst:775
msgid ""
"There may be private data including personal or confidential information, "
"such as the pricing data in our example, that the transacting parties don't "
"want disclosed to other organizations on the channel. Thus, it has a limited"
" lifespan, and can be purged after existing unchanged on the blockchain for "
"a designated number of blocks using the ``blockToLive`` property in the "
"collection definition."
msgstr ""

#: ../../source/private_data_tutorial.rst:782
msgid ""
"Our ``collectionMarblePrivateDetails`` definition has a ``blockToLive`` "
"property value of three meaning this data will live on the side database for"
" three blocks and then after that it will get purged. Tying all of the "
"pieces together, recall this collection definition  "
"``collectionMarblePrivateDetails`` is associated with the ``price`` private "
"data in the  ``initMarble()`` function when it calls the "
"``PutPrivateData()`` API and passes the ``collectionMarblePrivateDetails`` "
"as an argument."
msgstr ""

#: ../../source/private_data_tutorial.rst:790
msgid ""
"We will step through adding blocks to the chain, and then watch the price "
"information get purged by issuing four new transactions (Create a new "
"marble, followed by three marble transfers) which adds four new blocks to "
"the chain. After the fourth transaction (third marble transfer), we will "
"verify that the price private data is purged."
msgstr ""

#: ../../source/private_data_tutorial.rst:798
msgid ""
"Switch back to peer0 in Org1 using the following commands. Copy and paste "
"the following code block and run it inside your peer container:"
msgstr ""

#: ../../source/private_data_tutorial.rst:809
msgid ""
"Open a new terminal window and view the private data logs for this peer by "
"running the following command:"
msgstr ""

#: ../../source/private_data_tutorial.rst:816
msgid ""
"You should see results similar to the following. Note the highest block "
"number in the list. In the example below, the highest block height is ``4``."
msgstr ""

#: ../../source/private_data_tutorial.rst:829
msgid ""
"Back in the peer container, query for the **marble1** price data by running "
"the following command. (A Query does not create a new transaction on the "
"ledger since no data is transacted)."
msgstr ""

#: ../../source/private_data_tutorial.rst:843
msgid "The ``price`` data is still in the private data ledger."
msgstr ""

#: ../../source/private_data_tutorial.rst:845
msgid ""
"Create a new **marble2** by issuing the following command. This transaction "
"creates a new block on the chain."
msgstr ""

#: ../../source/private_data_tutorial.rst:853
#: ../../source/private_data_tutorial.rst:882
#: ../../source/private_data_tutorial.rst:910
#: ../../source/private_data_tutorial.rst:939
msgid ""
"Switch back to the Terminal window and view the private data logs for this "
"peer again. You should see the block height increase by 1."
msgstr ""

#: ../../source/private_data_tutorial.rst:860
msgid ""
"Back in the peer container, query for the **marble1** price data again by "
"running the following command:"
msgstr ""

#: ../../source/private_data_tutorial.rst:867
msgid ""
"The private data has not been purged, therefore the results are unchanged "
"from previous query:"
msgstr ""

#: ../../source/private_data_tutorial.rst:874
msgid ""
"Transfer marble2 to \"joe\" by running the following command. This "
"transaction will add a second new block on the chain."
msgstr ""

#: ../../source/private_data_tutorial.rst:889
#: ../../source/private_data_tutorial.rst:917
#: ../../source/private_data_tutorial.rst:946
msgid ""
"Back in the peer container, query for the marble1 price data by running the "
"following command:"
msgstr ""

#: ../../source/private_data_tutorial.rst:896
msgid "You should still be able to see the price private data."
msgstr ""

#: ../../source/private_data_tutorial.rst:902
msgid ""
"Transfer marble2 to \"tom\" by running the following command. This "
"transaction will create a third new block on the chain."
msgstr ""

#: ../../source/private_data_tutorial.rst:924
msgid "You should still be able to see the price data."
msgstr ""

#: ../../source/private_data_tutorial.rst:930
msgid ""
"Finally, transfer marble2 to \"jerry\" by running the following command. "
"This transaction will create a fourth new block on the chain. The ``price`` "
"private data should be purged after this transaction."
msgstr ""

#: ../../source/private_data_tutorial.rst:952
msgid ""
"Because the price data has been purged, you should no longer be able to see "
"it. You should see something similar to:"
msgstr ""

#: ../../source/private_data_tutorial.rst:963
msgid "Using indexes with private data"
msgstr ""

#: ../../source/private_data_tutorial.rst:965
msgid ""
"Indexes can also be applied to private data collections, by packaging "
"indexes in the ``META-"
"INF/statedb/couchdb/collections/<collection_name>/indexes`` directory "
"alongside the chaincode. An example index is available `here "
"<https://github.com/hyperledger/fabric-"
"samples/blob/master/chaincode/marbles02_private/go/META-"
"INF/statedb/couchdb/collections/collectionMarbles/indexes/indexOwner.json>`__"
" ."
msgstr ""

#: ../../source/private_data_tutorial.rst:969
msgid ""
"For deployment of chaincode to production environments, it is recommended to"
" define any indexes alongside chaincode so that the chaincode and supporting"
" indexes are deployed automatically as a unit, once the chaincode has been "
"installed on a peer and instantiated on a channel. The associated indexes "
"are automatically deployed upon chaincode instantiation on the channel when "
"the  ``--collections-config`` flag is specified pointing to the location of "
"the collection JSON file."
msgstr ""

#: ../../source/private_data_tutorial.rst:981
msgid "Additional resources"
msgstr ""

#: ../../source/private_data_tutorial.rst:983
msgid ""
"For additional private data education, a video tutorial has been created."
msgstr ""

#: ../../source/private_data_tutorial.rst:985
msgid ""
"The video uses the previous lifecycle model to install private data "
"collections with chaincode."
msgstr ""
