# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, hyperledger
# This file is distributed under the same license as the hyperledger-fabricdocs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: hyperledger-fabricdocs master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-09 08:55+0800\n"
"PO-Revision-Date: 2019-06-01 14:53+0000\n"
"Language-Team: Chinese (China) (https://www.transifex.com/hyperledger/teams/97220/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../source/tutorial/commercial_paper.md:1
msgid "Commercial paper tutorial"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:3
msgid ""
"Audience: Architects, application and smart contract developers, "
"administrators"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:6
msgid ""
"This tutorial will show you how to install and use a commercial paper sample"
" application and smart contract. It is a task-oriented topic, so it "
"emphasizes procedures above concepts. When youâ€™d like to understand the "
"concepts in more detail, you can read the Developing Applications topic."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:12
msgid ""
"commercialpaper.tutorial In this tutorial two organizations, MagnetoCorp and"
" DigiBank, trade commercial paper with each other using PaperNet, a "
"Hyperledger Fabric blockchain network."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:16
msgid ""
"Once you've set up a basic network, you'll act as Isabella, an employee of "
"MagnetoCorp, who will issue a commercial paper on its behalf. You'll then "
"switch hats to take the role of Balaji, an employee of DigiBank, who will "
"buy this commercial paper, hold it for a period of time, and then redeem it "
"with MagnetoCorp for a small profit."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:22
msgid ""
"You'll act as an developer, end user, and administrator, each in different "
"organizations, performing the following steps designed to help you "
"understand what it's like to collaborate as two different organizations "
"working independently, but according to mutually agreed rules in a "
"Hyperledger Fabric network."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:45
msgid ""
"This tutorial has been tested on MacOS and Ubuntu, and should work on other "
"Linux distributions. A Windows version is under development."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:48
msgid "Prerequisites"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:50
msgid ""
"Before you start, you must install some prerequisite technology required by "
"the tutorial. We've kept these to a minimum so that you can get going "
"quickly."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:53
msgid "You must have the following technologies installed:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:68
msgid "You will find it helpful to install the following technologies:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:79
msgid ""
"You may find it helpful to install the following technologies as you become "
"more experienced with application and smart contract development. There's no"
" requirement to install these when you first run the tutorial:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:88
msgid "Download samples"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:90
msgid ""
"The commercial paper tutorial is one of the Hyperledger Fabric samples held "
"in a public GitHub repository called fabric-samples. As you're going to run "
"the tutorial on your machine, your first task is to download the fabric-"
"samples repository."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:96
msgid ""
"commercialpaper.download Download the fabric-samples GitHub repository to "
"your local machine."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:99
msgid ""
"$GOPATH is an important environment variable in Hyperledger Fabric; it "
"identifies the root directory for installation. It is important to get right"
" no matter which programming language you're using! Open a new terminal "
"window and check your $GOPATH is set using the env command:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:113
msgid "Use the following instructions if your $GOPATH is not set."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:117
msgid ""
"You can now create a directory relative to $GOPATHwhere fabric-samples will "
"be installed:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:125
msgid ""
"Use the git clone command to copy fabric-samples repository to this "
"location:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:133
msgid "Feel free to examine the directory structure of fabric-samples:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:147
msgid ""
"Notice the commercial-paper directory -- that's where our sample is located!"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:149
msgid ""
"You've now completed the first stage of the tutorial! As you proceed, you'll"
" open multiple command windows open for different users and components. For "
"example:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:159
msgid ""
"We'll make it clear when you should run a command from particular command "
"window; for example:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:166
msgid "indicates that you should run the ls command from Isabella's window."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:168
msgid "Create network"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:170
msgid ""
"The tutorial currently uses the basic network; it will be updated soon to a "
"configuration which better reflects the multi-organization structure of "
"PaperNet. For now, this network is sufficient to show you how to develop an "
"application and smart contract."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:175
msgid ""
"commercialpaper.network The Hyperledger Fabric basic network comprises a "
"peer and its ledger database, an orderer and a certificate authority (CA). "
"Each of these components runs as a docker container."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:180
msgid ""
"The peer, its ledger, the orderer and the CA each run in the their own "
"docker container. In production environments, organizations typically use "
"existing CAs that are shared with other systems; they're not dedicated to "
"the Fabric network."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:185
msgid ""
"You can manage the basic network using the commands and configuration "
"included in the fabric-samples\\basic-network directory. Let's start the "
"network on your local machine with the start.sh shell script:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:224
msgid ""
"Notice how the docker-compose -f docker-compose.yml up -d ca.example.com... "
"command pulls the four Hyperledger Fabric container images from DockerHub, "
"and then starts them. These containers have the most up-to-date version of "
"the software for these Hyperledger Fabric components. Feel free to explore "
"the basic-network directory -- we'll use much of its contents during this "
"tutorial."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:231
msgid ""
"You can list the docker containers that are running the basic-network "
"components using the docker ps command:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:244
msgid ""
"See if you can map these containers to the basic-network (you may need to "
"horizontally scroll to locate the information):"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:252
msgid ""
"These containers all form a docker network called net_basic. You can view "
"the network with the docker network command:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:284
msgid ""
"See how the four containers use different IP addresses, while being part of "
"a single docker network. (We've abbreviated the output for clarity.)"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:287
msgid ""
"To recap: you've downloaded the Hyperledger Fabric samples repository from "
"GitHub and you've got the basic network running on your local machine. Let's"
" now start to play the role of MagnetoCorp, who wish to trade commercial "
"paper."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:291
msgid "Working as MagnetoCorp"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:293
msgid ""
"To monitor the MagnetoCorp components of PaperNet, an administrator can view"
" the aggregated output from a set of docker containers using the logspout "
"tool. It collects the different output streams into one place, making it "
"easy to see what's happening from a single window. This can be really "
"helpful for administrators when installing smart contracts or for developers"
" when invoking smart contracts, for example."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:301
msgid ""
"Let's now monitor PaperNet as a MagnetoCorp administrator. Open a new window"
" in the fabric-samples directory, and locate and run the monitordocker.sh "
"script to start the logspout tool for the PaperNet docker containers "
"associated with the docker network net_basic:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:318
msgid ""
"Note that you can pass a port number to the above command if the default "
"port in monitordocker.sh is already in use."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:323
msgid ""
"This window will now show output from the docker containers, so let's start "
"another terminal window which will allow the MagnetoCorp administrator to "
"interact with the network."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:327
msgid ""
"commercialpaper.workmagneto A MagnetoCorp administrator interacts with the "
"network via a docker container."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:330
msgid ""
"To interact with PaperNet, a MagnetoCorp administrator needs to use the "
"Hyperledger Fabric peer commands. Conveniently, these are available pre-"
"built in the hyperledger/fabric-tools docker image."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:335
msgid ""
"Let's start a MagnetoCorp-specific docker container for the administrator "
"using the docker-compose command:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:351
msgid ""
"Again, see how the hyperledger/fabric-tools docker image was retrieved from "
"Docker Hub and added to the network:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:366
msgid ""
"The MagnetoCorp administrator will use the command line in container "
"562a88b25149 to interact with PaperNet. Notice also the logspout container "
"b7f3586e5d02; this is capturing the output of all other docker containers "
"for the monitordocker.sh command."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:371
msgid ""
"Let's now use this command line to interact with PaperNet as the MagnetoCorp"
" administrator."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:374
msgid "Smart contract"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:376
msgid ""
"issue, buy and redeem are the three functions at the heart of the PaperNet "
"smart contract. It is used by applications to submit transactions which "
"correspondingly issue, buy and redeem commercial paper on the ledger. Our "
"next task is to examine this smart contract."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:381
msgid ""
"Open a new terminal window to represent a MagnetoCorp developer and change "
"to the directory that contains MagnetoCorp's copy of the smart contract to "
"view it with your chosen editor (VS Code in this tutorial):"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:390
msgid ""
"In the lib directory of the folder, you'll see papercontract.js file -- this"
" contains the commercial paper smart contract!"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:393
msgid ""
"commercialpaper.vscode1 An example code editor displaying the commercial "
"paper smart contract in papercontract.js"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:396
msgid ""
"papercontract.js is a JavaScript program designed to run in the node.js "
"environment. Note the following key program lines:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:447
msgid ""
"Feel free to examine other files in the contract directory to understand how"
" the smart contract works, and read in detail how papercontract.js is "
"designed in the smart contract topic."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:451
msgid "Install contract"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:453
msgid ""
"Before papercontract can be invoked by applications, it must be installed "
"onto the appropriate peer nodes in PaperNet.  MagnetoCorp and DigiBank "
"administrators are able to install papercontract onto peers over which they "
"respectively have authority."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:458
msgid ""
"commercialpaper.install A MagnetoCorp administrator installs a copy of the "
"papercontract onto a MagnetoCorp peer."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:461
msgid ""
"Smart contracts are the focus of application development, and are contained "
"within a Hyperledger Fabric artifact called chaincode. One or more smart "
"contracts can be defined within a single chaincode, and installing a "
"chaincode will allow them to be consumed by the different organizations in "
"PaperNet.  It means that only administrators need to worry about chaincode; "
"everyone else can think in terms of smart contracts."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:468
msgid ""
"The MagnetoCorp administrator uses the peer chaincode install command to "
"copy the papercontract smart contract from their local machine's file system"
" to the file system within the target peer's docker container. Once the "
"smart contract is installed on the peer and instantiated on a channel, "
"papercontract can be invoked by applications, and interact with the ledger "
"database via the putState() and getState() Fabric APIs. Examine how these "
"APIs are used by StateList class within ledger-api\\statelist.js."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:480
msgid ""
"Let's now install papercontract as the MagnetoCorp administrator. In the "
"MagnetoCorp administrator's command window, use the docker exec command to "
"run the peer chaincode install command in the cliMagnetCorp container:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:492
msgid ""
"The cliMagnetCorp container has set "
"CORE_PEER_ADDRESS=peer0.org1.example.com:7051 to target its commands to "
"peer0.org1.example.com, and the INFO 003 Installed remotely... indicates "
"papercontract has been successfully installed on this peer. Currently, the "
"MagnetoCorp administrator only has to install a copy of papercontract on a "
"single MagentoCorp peer."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:499
msgid ""
"Note how peer chaincode install command specified the smart contract path, "
"-p, relative to the cliMagnetoCorp container's file system: "
"/opt/gopath/src/github.com/contract. This path has been mapped to the local "
"file system path .../organization/magnetocorp/contract via the "
"magnetocorp/configuration/cli/docker-compose.yml file:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:512
msgid ""
"See how the volume directive maps organization/magnetocorp to "
"/opt/gopath/src/github.com/ providing this container access to your local "
"file system where MagnetoCorp's copy of the papercontract smart contract is "
"held."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:516
msgid ""
"You can read more about docker compose here and peer chaincode install "
"command here."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:520
msgid "Instantiate contract"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:522
msgid ""
"Now that papercontract chaincode containing the CommercialPaper smart "
"contract is installed on the required PaperNet peers, an administrator can "
"make it available to different network channels, so that it can be invoked "
"by applications connected to those channels. Because we're using the basic "
"network configuration for PaperNet, we're only going to make papercontract "
"available in a single network channel, mychannel."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:529
msgid ""
"commercialpaper.instant A MagnetoCorp administrator instantiates "
"papercontract chaincode containing the smart contract. A new docker "
"chaincode container will be created to run papercontract."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:534
msgid ""
"The MagnetoCorp administrator uses the peer chaincode instantiate command to"
" instantiate papercontract on mychannel:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:545
msgid ""
"One of the most important parameters on instantiate is -P. It specifies the "
"endorsement policy for papercontract, describing the set of organizations "
"that must endorse (execute and sign) a transaction before it can be "
"determined as valid. All transactions, whether valid or invalid, will be "
"recorded on the ledger blockchain, but only valid transactions will update "
"the world state."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:553
msgid ""
"In passing, see how instantiate passes the orderer address "
"orderer.example.com:7050. This is because it additionally submits an "
"instantiate transaction to the orderer, which will include the transaction "
"in the next block and distribute it to all peers that have joined mychannel,"
" enabling any peer to execute the chaincode in their own isolated chaincode "
"container. Note that instantiate only needs to be issued once for "
"papercontract even though typically it is installed on many peers."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:561
msgid ""
"See how a papercontract container has been started with the docker ps "
"command:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:571
msgid ""
"Notice that the container is named dev-peer0.org1.example.com-"
"papercontract-0-d96... to indicate which peer started it, and the fact that "
"it's running papercontract version 0."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:575
msgid ""
"Now that we've got a basic PaperNet up and running, and papercontract "
"installed and instantiated, let's turn our attention to the MagnetoCorp "
"application which issues a commercial paper."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:579
msgid "Application structure"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:581
msgid ""
"The smart contract contained in papercontract is called by MagnetoCorp's "
"application issue.js. Isabella uses this application to submit a transaction"
" to the ledger which issues commercial paper 00001. Let's quickly examine "
"how the issue application works."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:586
msgid ""
"commercialpaper.application A gateway allows an application to focus on "
"transaction generation, submission and response. It coordinates transaction "
"proposal, ordering and notification processing between the different network"
" components."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:591
msgid ""
"Because the issue application submits transactions on behalf of Isabella, it"
" starts by retrieving Isabella's X.509 certificate from her wallet, which "
"might be stored on the local file system or a Hardware Security Module HSM. "
"The issue application is then able to utilize the gateway to submit "
"transactions on the channel. The Hyperledger Fabric SDK provides a gateway "
"abstraction so that applications can focus on application logic while "
"delegating network interaction to the gateway. Gateways and wallets make it "
"straightforward to write Hyperledger Fabric applications."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:603
msgid ""
"So let's examine the issue application that Isabella is going to use. open a"
" separate terminal window for her, and in fabric-samples locate the "
"MagnetoCorp /application folder:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:614
msgid ""
"addToWallet.js is the program that Isabella is going to use to load her "
"identity into her wallet, and issue.js will use this identity to create "
"commercial paper 00001 on behalf of MagnetoCorp by invoking papercontract."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:618
msgid ""
"Change to the directory that contains MagnetoCorp's copy of the application "
"issue.js, and use your code editor to examine it:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:626
msgid ""
"Examine this directory; it contains the issue application and all its "
"dependencies."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:629
msgid ""
"commercialpaper.vscode2 A code editor displaying the contents of the "
"commercial paper application directory."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:632
msgid "Note the following key program lines in issue.js:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:667
msgid ""
"This statement gives the application addressability to smart contract "
"defined by the namespace org.papernet.commercialpaper within papercontract. "
"Once an application has issued getContract, it can submit any transaction "
"implemented within it."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:687
msgid ""
"Feel free to examine other files in the /application directory to understand"
" how issue.js works, and read in detail how it is implemented in the "
"application topic."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:691
msgid "Application dependencies"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:693
msgid ""
"The issue.js application is written in JavaScript and designed to run in the"
" node.js environment that acts as a client to the PaperNet network. As is "
"common practice, MagnetoCorp's application is built on many external node "
"packages -- to improve quality and speed of development. Consider how "
"issue.js includes the js-yaml package to process the YAML gateway connection"
" profile, or the fabric-network package to access the Gateway and Wallet "
"classes:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:708
msgid ""
"These packages have to be downloaded from npm to the local file system using"
" the npm install command. By convention, packages must be installed into an "
"application-relative /node_modules directory for use at runtime."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:713
msgid ""
"Examine the package.json file to see how issue.js identifies the packages to"
" download and their exact versions:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:724
msgid "npm versioning is very powerful; you can read more about it here."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:727
msgid ""
"Let's install these packages with the npm install command -- this may take "
"up to a minute to complete:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:738
msgid "See how this command has updated the directory:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:747
msgid ""
"Examine the node_modules directory to see the packages that have been "
"installed. There are lots, because js-yaml and fabric-network are themselves"
" built on other npm packages! Helpfully, the package-lock.json file "
"identifies the exact versions installed, which can prove invaluable if you "
"want to exactly reproduce environments; to test, diagnose problems or "
"deliver proven applications for example."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:755
msgid "Wallet"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:757
msgid ""
"Isabella is almost ready to run issue.js to issue MagnetoCorp commercial "
"paper 00001; there's just one remaining task to perform! As issue.js acts on"
" behalf of Isabella, and therefore MagnetoCorp, it will use identity from "
"her wallet that reflects these facts. We now need to perform this one-time "
"activity of adding appropriate X.509 credentials to her wallet."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:764
msgid ""
"In Isabella's terminal window, run the addToWallet.js program to add "
"identity information to her wallet:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:773
msgid ""
"Isabella can store multiple identities in her wallet, though in our example,"
" she only uses one -- User1@org.example.com. This identity is currently "
"associated with the basic network, rather than a more realistic PaperNet "
"configuration -- we'll update this tutorial soon."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:778
msgid ""
"addToWallet.js is a simple file-copying program which you can examine at "
"your leisure. It moves an identity from the basic network sample to "
"Isabella's wallet. Let's focus on the result of this program -- the contents"
" of the wallet which will be used to submit transactions to PaperNet:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:789
msgid ""
"See how the directory structure maps the User1@org1.example.com identity -- "
"other identities used by Isabella would have their own folder. Within this "
"directory you'll find the identity information that issue.js will use on "
"behalf of isabella:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:801
msgid "Notice:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:824
msgid "Issue application"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:826
msgid ""
"Isabella can now use issue.js to submit a transaction that will issue "
"MagnetoCorp commercial paper 00001:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:843
msgid ""
"The node command initializes a node.js environment, and runs issue.js. We "
"can see from the program output that MagnetoCorp commercial paper 00001 was "
"issued with a face value of 5M USD."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:847
msgid ""
"As you've seen, to achieve this, the application invokes the issue "
"transaction defined in the CommercialPaper smart contract within "
"papercontract.js. This had been installed and instantiated in the network by"
" the MagnetoCorp administrator. It's the smart contract which interacts with"
" the ledger via the Fabric APIs, most notably putState() and getState(), to "
"represent the new commercial paper as a vector state within the world state."
" We'll see how this vector state is subsequently manipulated by the buy and "
"redeem transactions also defined within the smart contract."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:856
msgid ""
"All the time, the underlying Fabric SDK handles the transaction endorsement,"
" ordering and notification process, making the application's logic "
"straightforward; the SDK uses a gateway to abstract away network details and"
" connectionOptions to declare more advanced processing strategies such as "
"transaction retry."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:863
msgid ""
"Let's now follow the lifecycle of MagnetoCorp 00001 by switching our "
"emphasis to DigiBank, who will buy the commercial paper."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:866
msgid "Working as DigiBank"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:868
msgid ""
"Now that commercial paper 00001has been issued by MagnetoCorp, let's switch "
"context to interact with PaperNet as employees of DigiBank. First, we'll act"
" as administrator who will create a console configured to interact with "
"PaperNet. Then Balaji, an end user, will use Digibank's buy application to "
"buy commercial paper 00001, moving it to the next stage in its lifecycle."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:874
msgid ""
"commercialpaper.workdigi DigiBank administrators and applications interact "
"with the PaperNet network."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:877
msgid ""
"As the tutorial currently uses the basic network for PaperNet, the network "
"configuration is quite simple. Administrators use a console similar to "
"MagnetoCorp, but configured for Digibank's file system. Likewise, Digibank "
"end users will use applications which invoke the same smart contract as "
"MagnetoCorp applications, though they contain Digibank-specific logic and "
"configuration. It's the smart contract which captures the shared business "
"process, and the ledger which holds the shared business data, no matter "
"which applications call them."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:886
msgid ""
"Let's open up a separate terminal to allow the DigiBank administrator to "
"interact with PaperNet. In fabric-samples:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:897
msgid ""
"This docker container is now available for Digibank administrators to "
"interact with the network:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:905
msgid ""
"In this tutorial, you'll use the command line container named cliDigiBank to"
" interact with the network on behalf of DigiBank. We've not shown all the "
"docker containers, and in the real world DigiBank users would only see the "
"network components (peers, orderers, CAs) to which they have access."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:910
msgid ""
"Digibank's administrator doesn't have much to do in this tutorial right now "
"because the PaperNet network configuration is so simple. Let's turn our "
"attention to Balaji."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:914
msgid "Digibank applications"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:916
msgid ""
"Balaji uses DigiBank's buy application to submit a transaction to the ledger"
" which transfers ownership of commercial paper 00001 from MagnetoCorp to "
"DigiBank. The CommercialPaper smart contract is the same as that used by "
"MagnetoCorp's application, however the transaction is different this time --"
" it's buy rather than issue. Let's examine how DigiBank's application works."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:922
msgid ""
"Open a separate terminal window for Balaji. In fabric-samples, change to the"
" DigiBank application directory that contains the application, buy.js, and "
"open it with your editor:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:931
msgid ""
"As you can see, this directory contains both the buy and redeem applications"
" that will be used by Balaji."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:936
msgid ""
"commercialpaper.vscode3 DigiBank's commercial paper directory containing the"
" buy.js and redeem.js applications."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:940
msgid ""
"DigiBank's buy.js application is very similar in structure to MagnetoCorp's "
"issue.js with two important differences:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:966
msgid ""
"Feel free to examine other files in the application directory to understand "
"how the application works, and read in detail how buy.js is implemented in "
"the application topic."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:970
msgid "Run as DigiBank"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:972
msgid ""
"The DigiBank applications which buy and redeem commercial paper have a very "
"similar structure to MagnetoCorp's issue application. Therefore, letâ€™s "
"install their dependencies and set up Balaji's wallet so that he can use "
"these applications to buy and redeem commercial paper."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:977
msgid ""
"Like MagnetoCorp, Digibank must the install the required application "
"packages using the npm install command, and again, this make take a short "
"time to complete."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:981
msgid ""
"In the DigiBank administrator window, install the application dependencies:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:992
msgid ""
"In Balaji's terminal window, run the addToWallet.js program to add identity "
"information to his wallet:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:1001
msgid ""
"The addToWallet.js program has added identity information for balaji, to his"
" wallet, which will be used by buy.js and redeem.js to submit transactions "
"to PaperNet."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:1005
msgid ""
"Like Isabella, Balaji can store multiple identities in his wallet, though in"
" our example, he only uses one -- Admin@org.example.com. His corresponding "
"wallet structure digibank/identity/user/balaji/wallet/Admin@org1.example.com"
" contains is very similar Isabella's -- feel free to examine it."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:1010
msgid "Buy application"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:1012
msgid ""
"Balaji can now use buy.js to submit a transaction that will transfer "
"ownership of MagnetoCorp commercial paper 00001 to DigiBank."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:1015
msgid "Run the buy application in Balaji's window:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:1031
msgid ""
"You can see the program output that MagnetoCorp commercial paper 00001 was "
"successfully purchased by Balaji on behalf of DigiBank. buy.js invoked the "
"buy transaction defined in the CommercialPaper smart contract which updated "
"commercial paper 00001 within the world state using the putState() and "
"getState() Fabric APIs. As you've seen, the application logic to buy and "
"issue commercial paper is very similar, as is the smart contract logic."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:1038
msgid "Redeem application"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:1040
msgid ""
"The final transaction in the lifecycle of commercial paper 00001 is for "
"DigiBank to redeem it with MagnetoCorp. Balaji uses redeem.js to submit a "
"transaction to perform the redeem logic within the smart contract."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:1044
msgid "Run the redeem transaction in Balaji's window:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:1060
msgid ""
"Again, see how the commercial paper 00001 was successfully redeemed when "
"redeem.js invoked the redeem transaction defined in CommercialPaper. Again, "
"it updated commercial paper 00001 within the world state to reflect that the"
" ownership returned to MagnetoCorp, the issuer of the paper."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:1065
msgid "Further reading"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:1067
msgid ""
"To understand how applications and smart contracts shown in this tutorial "
"work in more detail, you'll find it helpful to read Developing Applications."
" This topic will give you a fuller explanation of the commercial paper "
"scenario, the PaperNet business network, its actors, and how the "
"applications and smart contracts they use work in detail."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:1074
msgid ""
"Also feel free to use this sample to start creating your own applications "
"and smart contracts!"
msgstr ""

#: ../../source/tutorial/installxcode.md:1
msgid "Install Xcode"
msgstr ""

#: ../../source/tutorial/installxcode.md:3
msgid "If your Mac OS is running Mojave, you will need to install Xcode."
msgstr ""

#: ../../source/tutorial/installxcode.md:19
msgid "Note: Make sure your Xcode application path is correct."
msgstr ""
