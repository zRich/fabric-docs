# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, hyperledger
# This file is distributed under the same license as the hyperledger-fabricdocs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# JulienGuo郭立冬 <690748277@qq.com>, 2019
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: hyperledger-fabricdocs master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-04-23 09:48+0800\n"
"PO-Revision-Date: 2019-04-22 19:57+0000\n"
"Last-Translator: JulienGuo郭立冬 <690748277@qq.com>, 2019\n"
"Language-Team: Chinese (China) (https://www.transifex.com/hyperledger/teams/97220/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../source/txflow.rst:2
msgid "Transaction Flow"
msgstr "交易流程"

#: ../../source/txflow.rst:4
msgid ""
"This document outlines the transactional mechanics that take place during a "
"standard asset exchange. The scenario includes two clients, A and B, who are"
" buying and selling radishes. They each have a peer on the network through "
"which they send their transactions and interact with the ledger."
msgstr ""
"本文档概述了在一个标准的资产交换期间发生的交易机制。场景包括两个客户，A和B，他们正在买卖萝卜。他们每个人在网络上都有一个Peer，通过网络他们发送交易并与账本交互。"

#: ../../source/txflow.rst:11
msgid "**Assumptions**"
msgstr "**假设**"

#: ../../source/txflow.rst:13
msgid ""
"This flow assumes that a channel is set up and running. The application user"
" has registered and enrolled with the organization’s Certificate Authority "
"(CA) and received back necessary cryptographic material, which is used to "
"authenticate to the network."
msgstr ""
"本流程假设当下已设置了一个通道运行着。应用程序用户已在组织的证书颁发机构(CA)注册并登记，并收到了所需的加密材料，这些加密材料用于网络中的身份验证。"

#: ../../source/txflow.rst:18
msgid ""
"The chaincode (containing a set of key value pairs representing the initial "
"state of the radish market) is installed on the peers and instantiated on "
"the channel. The chaincode contains logic defining a set of transaction "
"instructions and the agreed upon price for a radish. An endorsement policy "
"has also been set for this chaincode, stating that both ``peerA`` and "
"``peerB`` must endorse any transaction."
msgstr ""
"链码（包含一系列表示萝卜市场初始状态的键值对）安装在Peers上，并在通道上实例化。链码包含定义一系列交易指令和商定萝卜价格的逻辑。链码还设置了背书策略，规定任何交易均需由``peerA``和``peerB``同时背书。"

#: ../../source/txflow.rst:27
msgid "**Client A initiates a transaction**"
msgstr "**客户端A启动交易**"

#: ../../source/txflow.rst:29
msgid ""
"What's happening? Client A is sending a request to purchase radishes. This "
"request targets ``peerA`` and ``peerB``, who are respectively representative"
" of Client A and Client B. The endorsement policy states that both peers "
"must endorse any transaction, therefore the request goes to ``peerA`` and "
"``peerB``."
msgstr ""
"发生什么事情了？客户A正在发送购买萝卜的请求。此请求针对的是``peerA``和``peerB``，它们分别代表客户A和客户B。背书策略规定，双方必须对任何交易进行背书，因此该请求指向``peerA``和``peerB``。"

#: ../../source/txflow.rst:34
msgid ""
"Next, the transaction proposal is constructed. An application leveraging a "
"supported SDK (Node, Java, Python) utilizes one of the available API's to "
"generate a transaction proposal. The proposal is a request to invoke a "
"chaincode function with certain input parameters, with the intent of reading"
" and/or updating the ledger."
msgstr ""
"接下来，构造交易提案。应用程序使用支持的SDK "
"(Node、Java、Python)里面可用的API来生成交易提案。该提案是一个调用链码函数的请求，带有特定的输入参数，目的是读取或更新账本。"

#: ../../source/txflow.rst:40
msgid ""
"The SDK serves as a shim to package the transaction proposal into the "
"properly architected format (protocol buffer over gRPC) and takes the user’s"
" cryptographic credentials to produce a unique signature for this "
"transaction proposal."
msgstr ""
"SDK充当一个中间层，将交易提案打包成适当的架构格式（gRPC上的protocol buffer），并使用用户的加密证书为该交易提案生成唯一的签名。"

#: ../../source/txflow.rst:47
msgid "**Endorsing peers verify signature & execute the transaction**"
msgstr "**背书节点验证签名并且执行交易**"

#: ../../source/txflow.rst:49
msgid ""
"The endorsing peers verify (1) that the transaction proposal is well formed,"
" (2) it has not been submitted already in the past (replay-attack "
"protection), (3) the signature is valid (using the MSP), and (4) that the "
"submitter (Client A, in the example) is properly authorized to perform the "
"proposed operation on that channel (namely, each endorsing peer ensures that"
" the submitter satisfies the channel's *Writers* policy). The endorsing "
"peers take the transaction proposal inputs as arguments to the invoked "
"chaincode's function. The chaincode is then executed against the current "
"state database to produce transaction results including a response value, "
"read set, and write set (i.e. key/value pairs representing an asset to "
"create or update). No updates are made to the ledger at this point. The set "
"of these values, along with the endorsing peer’s signature is passed back as"
" a “proposal response” to the SDK which parses the payload for the "
"application to consume."
msgstr ""
"背书节点验证（1）交易提案的格式完整，（2）且验证该交易提案之前没有被提交过（重放攻击保护），（3）验证签名是有效的（使用MSP），（4）验证发起者（在这个例子中是客户端A）是已经被授权在该通道上执行该操作（也就是说，每个背书节点确保发起者满足通道*Writers*策略）。背书节点将交易提案输入作为调用的链码函数的参数。然后针对当前状态数据库执行链码，生成交易结果，包括响应值、读集和写集（即表示要创建或更新的资产的键值对）。目前没有对账本进行更新。这些值，以及背书节点的签名，一起作为“提案响应”传递回SDK，SDK为应用程序解析出来这些数据再使用。"

#: ../../source/txflow.rst:63
msgid ""
"The MSP is a peer component that allows peers to verify transaction requests"
" arriving from clients and to sign transaction results (endorsements). The "
"writing policy is defined at channel creation time and determines which "
"users are entitled to submit a transaction to that channel. For more "
"information about membership, check out our :doc:`membership/membership` "
"documentation."
msgstr ""
"MSP是节点的组件，它允许Peers验证来自客户端的交易请求，并签署交易结果（即背书）。写入策略在通道创建时就会定义，用来确定哪些用户有权向该通道提交交易。有关成员关系的更多信息，请查看我们的"
" :doc:`membership/membership` 文档。"

#: ../../source/txflow.rst:72
msgid "**Proposal responses are inspected**"
msgstr "**提案响应要被检查**"

#: ../../source/txflow.rst:74
msgid ""
"The application verifies the endorsing peer signatures and compares the "
"proposal responses to determine if the proposal responses are the same. If "
"the chaincode is only queried the ledger, the application would inspect the "
"query response and would typically not submit the transaction to the "
"ordering service. If the client application intends to submit the "
"transaction to the ordering service to update the ledger, the application "
"determines if the specified endorsement policy has been fulfilled before "
"submitting (i.e. did peerA and peerB both endorse). The architecture is such"
" that even if an application chooses not to inspect responses or otherwise "
"forwards an unendorsed transaction, the endorsement policy will still be "
"enforced by peers and upheld at the commit validation phase."
msgstr ""
"应用程序验证背书节点的签名，并比较多个提案响应，以确定提案响应是否相同。如果链码只查询账本，应用程序将检查查询响应，并且通常不会将交易提交给排序服务。如果客户端应用程序打算向排序服务提交交易以更新账本，则应用程序在提交之前需确定是否已满足指定的背书策略（即peerA和peerB都要背书）。该体系结构是这样的，即使应用程序选择不检查响应或以其他方式转发未背书的交易，背书策略仍将由节点强制执行，并在提交验证阶段遵守该策略。"

#: ../../source/txflow.rst:88
msgid "**Client assembles endorsements into a transaction**"
msgstr "**客户端将背书结果封装进交易**"

#: ../../source/txflow.rst:90
msgid ""
"The application “broadcasts” the transaction proposal and response within a "
"“transaction message” to the ordering service. The transaction will contain "
"the read/write sets, the endorsing peers signatures and the Channel ID. The "
"ordering service does not need to inspect the entire content of a "
"transaction in order to perform its operation, it simply receives "
"transactions from all channels in the network, orders them chronologically "
"by channel, and creates blocks of transactions per channel."
msgstr ""
"应用程序将交易提案和“交易消息”中的交易响应“广播”给排序服务。交易会包含读/写集，背书节点的签名和通道ID。排序服务不需要为了执行其操作而检查交易的整个内容，它只是从网络中的所有通道接收交易，将它们按时间按通道排序，并将每个通道的交易打包成区块。"

#: ../../source/txflow.rst:100
msgid "**Transaction is validated and committed**"
msgstr "**交易被验证提交**"

#: ../../source/txflow.rst:102
msgid ""
"The blocks of transactions are “delivered” to all peers on the channel.  The"
" transactions within the block are validated to ensure endorsement policy is"
" fulfilled and to ensure that there have been no changes to ledger state for"
" read set variables since the read set was generated by the transaction "
"execution. Transactions in the block are tagged as being valid or invalid."
msgstr ""
"交易区块被“递送”给通道上的所有Peers。对区块内的交易进行验证，以确保满足背书策略，并确保自交易执行生成读集以来，没有对读集变量的账本状态进行更改。块中的交易会被标记为有效或无效。"

#: ../../source/txflow.rst:110
msgid "**Ledger updated**"
msgstr "**账本更新**"

#: ../../source/txflow.rst:112
msgid ""
"Each peer appends the block to the channel’s chain, and for each valid "
"transaction the write sets are committed to current state database. An event"
" is emitted, to notify the client application that the transaction "
"(invocation) has been immutably appended to the chain, as well as "
"notification of whether the transaction was validated or invalidated."
msgstr ""
"每个Peer都将区块追加到通道的链上，对于每个有效的交易，写入集都提交到当前状态数据库。系统会发出一个事件，通知客户端应用程序本次交易（调用）已被不可更改地附加到链上，同时还会通知交易验证结果是有效还是无效。"

#: ../../source/txflow.rst:118
msgid ""
"Applications should listen for the transaction event after submitting a "
"transaction, for example by using the ``submitTransaction`` API, which "
"automatically listen for transaction events. Without listening for "
"transaction events, you will not know whether your transaction has actually "
"been ordered, validated, and committed to the ledger."
msgstr ""
"应用程序应该在提交交易后监听交易事件，例如使用``submitTransaction`` "
"API，它会自动监听交易事件。如果不监听交易事件，您将不知道您的交易是否已经被排序、验证并提交到账本。"

#: ../../source/txflow.rst:125
msgid ""
"See the :ref:`sequence diagram <swimlane>` to better understand the "
"transaction flow."
msgstr "查看 :ref:`sequence diagram <swimlane>` 来更好的理解交易流程。"

#: ../../source/txflow.rst:129
msgid "https://creativecommons.org/licenses/by/4.0/"
msgstr "https://creativecommons.org/licenses/by/4.0/"
